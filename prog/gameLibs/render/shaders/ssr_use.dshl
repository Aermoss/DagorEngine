include "ssr_common_use.dshl"
include "upscale_use.dshl"
texture ssr_target;
float4 SSRParams = (0.91, -2.5, 0,0);

define_macro_if_not_defined SSR_COMMON_DEFINES()
endmacro

macro INIT_USE_SSR_BASE(stage)
  (stage) {
    ssr_target@smp2d = ssr_target;
    SSRParams@f4 = SSRParams;
  }
endmacro

macro INIT_USE_SSR()
  INIT_USE_SSR_BASE(ps)
endmacro

macro USE_SSR_BASE(code)
  SSR_COMMON_DEFINES()
  hlsl(code) {
    #ifndef SSR_MIPS
      #define SSR_MIPS 3
    #endif

    #if OPTIMIZED_UPSCALE
      half4 getSSR(half linear_roughness, float2 tc, int2 screenpos)
    #else
      half4 getSSR(half linear_roughness, float2 tc, int2 screenpos = 0)
    #endif
    {
      #if OPTIMIZED_UPSCALE == 1
        float roughnessFade = saturate(linear_roughness * SSRParams.y + 2);
        BRANCH
        if (roughnessFade==0)
          return 0;
        float ssrMip = linear_roughness*SSR_MIPS;
        half4 ssr;
        BRANCH
        if (ssrMip<1)
        {
          half4 lowResR = ssr_target.GatherRed(ssr_target_samplerstate,tc);
          half4 lowResG = ssr_target.GatherGreen(ssr_target_samplerstate,tc);
          half4 lowResB = ssr_target.GatherBlue(ssr_target_samplerstate,tc);
          half4 lowResA = ssr_target.GatherAlpha(ssr_target_samplerstate,tc);

          float4 weight = SampleUpscaleWeight(screenpos);

          ssr = half4(dot(lowResR,weight),dot(lowResG,weight),dot(lowResB,weight),dot(lowResA,weight));
        }
        else
          ssr = tex2Dlod(ssr_target, float4(tc,0,ssrMip));
        ssr *= roughnessFade;
      #else
        float roughnessFade = saturate(linear_roughness * SSRParams.y + 2);
        BRANCH
        if (roughnessFade==0)
          return 0;
        float ssrMip = linear_roughness*SSR_MIPS;
        half4 ssr = tex2Dlod(ssr_target, float4(tc,0,ssrMip));
        ssr *= roughnessFade;
      #endif
      return ssr;
    }
  }
endmacro

macro USE_SSR()
  USE_SSR_BASE(ps)
endmacro

macro USING_SSR_BASE(code)
  if (ssr_target != NULL) {
    INIT_USE_SSR_BASE(code)
    USE_SSR_BASE(code)
  } else {
    hlsl(code) {
      half4 getSSR(float a, float3 b, float4 c, float2 d, float2 e) { return 0; }
      half4 getSSR(float a, float2 b, int2 d = 0) { return 0; }
    }
  }
endmacro

macro USING_SSR()
  USING_SSR_BASE(ps)
endmacro