include "shader_global.dshl"

shader debug_ri
{
  //supports global_frame;
  cull_mode = cw;
  //z_test = false;
  //z_write = false;
  blend_src = sa; blend_dst = isa;

  channel float3 pos = pos;

  hlsl {
    struct VsInput
    {
      float3 pos : POSITION;
    };

    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float3 pointToEye : TEXCOORD1;
      float4 debug_ri_color:TEXCOORD2;
    };
  }

  hlsl(ps) {
    float4 xray_lighting(float3 point_to_eye, float4 hatching_color, float3 world_normal)
    {
      float4 hatching_type = float4(0.5,1,0,0);
      float fresnel = saturate(1 - abs(dot(world_normal, normalize(point_to_eye).xyz)));
      fresnel = saturate(lerp(hatching_type.y, hatching_type.z, pow4(fresnel)) + hatching_type.x * world_normal.y);
      float4 hatching_fresnel = hatching_color*0.5;
      half4 colorRet = lerp(hatching_color, hatching_fresnel, fresnel);
      return float4(colorRet.rgb, hatching_color.a);
    }
    float4 debug_ps(VsOutput input) : SV_Target
    {
      float3 normal = normalize(cross(normalize(ddy(input.pointToEye.xyz)), normalize(ddx(input.pointToEye.xyz))));
      return xray_lighting(input.pointToEye.xyz, input.debug_ri_color, normal);
    }
  }
  compile("target_ps", "debug_ps");

  (vs) {
    world_view_pos@f3 = world_view_pos;
    globtm@f44 = globtm;
  }

  hlsl(vs) {
    float3 world_local_x_vs:register(c8);
    float3 world_local_y_vs:register(c9);
    float3 world_local_z_vs:register(c10);
    float3 world_local_pos_vs:register(c11);
    float4 debug_ri_color:register(c12);

    VsOutput debug_vs(VsInput input)
    {
      VsOutput output;
      float3 vertex_pos = input.pos;
      float3 worldPos = float3(vertex_pos.x * world_local_x_vs + vertex_pos.y * world_local_y_vs + vertex_pos.z * world_local_z_vs + world_local_pos_vs);

      output.pointToEye = world_view_pos - worldPos;
      output.pos = mulPointTm(worldPos, globtm);
      output.debug_ri_color=debug_ri_color;

      return output;
    }
  }
  compile("target_vs", "debug_vs");
}