include "shader_global.dshl"

int sp_harm_cube_face_width;
int sp_harm_face_number;
int sp_harm_mip_number;
int sp_harm_final_reduction_size;

int sp_harm_type = 0;
interval sp_harm_type : from_sky_box < 1, from_panorama;

float sp_harm_gamma;

hlsl(cs)
{
  #include "spherical_harmonics_consts.hlsli"

  //#define HarmCoefsHalf HarmCoefs
  #define PACKED_FLOAT4_COUNT 7
  struct HarmCoefsUnpacked { float3 coeficients[HARM_COEFS_COUNT]; };
  struct HarmCoefsPacked { float4 coeficients[PACKED_FLOAT4_COUNT]; };//27 floats packed into 28 floats
  void pack(out HarmCoefsPacked to, HarmCoefsUnpacked from)
  {
    to.coeficients[0] = float4(from.coeficients[0].xyz, from.coeficients[1].x);
    to.coeficients[1] = float4(from.coeficients[1].yz, from.coeficients[2].xy);
    to.coeficients[2] = float4(from.coeficients[2].z, from.coeficients[3].xyz);

    to.coeficients[3] = float4(from.coeficients[4].xyz, from.coeficients[5].x);
    to.coeficients[4] = float4(from.coeficients[5].yz, from.coeficients[6].xy);
    to.coeficients[5] = float4(from.coeficients[6].z, from.coeficients[7].xyz);
    to.coeficients[6] = float4(from.coeficients[8].xyz, 0);
  }
  void unpack(out HarmCoefsUnpacked to, HarmCoefsPacked from)
  {
    //to = (HarmCoefs)0;
    to.coeficients[0] = from.coeficients[0].xyz;
    to.coeficients[1] = float3(from.coeficients[0].w, from.coeficients[1].xy);
    to.coeficients[2] = float3(from.coeficients[1].zw, from.coeficients[2].x);
    to.coeficients[3] = from.coeficients[2].yzw;
    to.coeficients[4] = from.coeficients[3].xyz;
    to.coeficients[5] = float3(from.coeficients[3].w, from.coeficients[4].xy);
    to.coeficients[6] = float3(from.coeficients[4].zw, from.coeficients[5].x);
    to.coeficients[7] = from.coeficients[5].yzw;
    to.coeficients[8] = from.coeficients[6].xyz;
  }
  void convert_to_final(out HarmCoefs to, HarmCoefsPacked from)
  {
    to.coeficients[0] = float4(from.coeficients[0].xyz,0);
    to.coeficients[1] = float4(float3(from.coeficients[0].w, from.coeficients[1].xy),0);
    to.coeficients[2] = float4(float3(from.coeficients[1].zw, from.coeficients[2].x),0);
    to.coeficients[3] = float4(from.coeficients[2].yzw,0);
    to.coeficients[4] = float4(from.coeficients[3].xyz,0);
    to.coeficients[5] = float4(float3(from.coeficients[3].w, from.coeficients[4].xy),0);
    to.coeficients[6] = float4(float3(from.coeficients[4].zw, from.coeficients[5].x),0);
    to.coeficients[7] = float4(from.coeficients[5].yzw,0);
    to.coeficients[8] = float4(from.coeficients[6].xyz,0);
  }
  void convert_from_final(out HarmCoefsPacked to, HarmCoefs from)
  {
    to.coeficients[0] = float4(from.coeficients[0].xyz, from.coeficients[1].x);
    to.coeficients[1] = float4(from.coeficients[1].yz, from.coeficients[2].xy);
    to.coeficients[2] = float4(from.coeficients[2].z, from.coeficients[3].xyz);

    to.coeficients[3] = float4(from.coeficients[4].xyz, from.coeficients[5].x);
    to.coeficients[4] = float4(from.coeficients[5].yz, from.coeficients[6].xy);
    to.coeficients[5] = float4(from.coeficients[6].z, from.coeficients[7].xyz);
    to.coeficients[6] = float4(from.coeficients[8].xyz, 0);
  }

  void addCoefs(inout HarmCoefsPacked a, HarmCoefsPacked b)
  {
    UNROLL
    for (int coefIdx = 0; coefIdx < PACKED_FLOAT4_COUNT; ++coefIdx)
      a.coeficients[coefIdx] += b.coeficients[coefIdx];
  }

#define REDUCTION(shift) \
      if (flatIdx < i) \
      { \
        HarmCoefsPacked anotherCoefs = coefsToReduct[flatIdx + i]; \
        addCoefs(threadCoefs, anotherCoefs); \
        coefsToReduct[flatIdx] = threadCoefs; \
      }
}

shader spherical_harmonics_reduction_cs
{
  (cs) {
    width__half_step__step__face@f4 = (sp_harm_cube_face_width , 1. / sp_harm_cube_face_width, 2. / sp_harm_cube_face_width, sp_harm_face_number);
    gamma__mip_number@f2 = (sp_harm_gamma, sp_harm_mip_number);
  }
  ENABLE_ASSERT(cs)
  hlsl(cs) {

    #define gamma gamma__mip_number.x
    #define mip_number gamma__mip_number.y

    RWStructuredBuffer<HarmCoefs> harmonicsValues: register(u0);
    groupshared HarmCoefsPacked coefsToReduct[THREADS_PER_GROUP_AXIS * THREADS_PER_GROUP_AXIS];

  ##if (sp_harm_type == from_sky_box)

    TextureCube cube_tex : register(t1);
    SamplerState cube_tex_samplerstate : register(s1);

    float3 getEnviValue(float3 direction)
    {
      return texCUBElod(cube_tex, float4(direction, mip_number)).rgb;
    }

  ##else //from_panorama

    Texture2D panorama_tex : register(t1);
    SamplerState panorama_tex_samplerstate : register(s1);

    float3 getEnviValue(float3 direction)
    {
      float theta = acos(direction.y);
      float phi = atan2(direction.z, direction.x);
      float2 uv = float2(phi / (2.0 * PI), theta / PI);
      return tex2Dlod(panorama_tex, float4(uv, mip_number, 0)).rgb;
    }

  ##endif


    #include <get_cubemap_vector.hlsl>
    #include <pixelPacking/ColorSpaceUtility.hlsl>
    float get_tangent_infl(float2 uv)
    {
      float2 texelCenter = uv + width__half_step__step__face.y;
      float sqTexelCenterDist = dot(texelCenter, texelCenter) + 1;
      return 4 / sqTexelCenterDist / sqrt(sqTexelCenterDist) / pow2(width__half_step__step__face.x);
    }

    HarmCoefsPacked computeCoefs(float2 uv, uint face_number)
    {
      float3 normal = normalize(GetCubemapVector(uv + width__half_step__step__face.y, face_number));
      float3 color = max(getEnviValue(normal), 0);
      color = pow(color, gamma);
      color *= get_tangent_infl(uv);
      HarmCoefsUnpacked threadCoefs;
      threadCoefs.coeficients[0] = color;
      threadCoefs.coeficients[1] = color * normal.y;
      threadCoefs.coeficients[2] = color * normal.z;
      threadCoefs.coeficients[3] = color * normal.x;
      threadCoefs.coeficients[4] = color * normal.x * normal.y;
      threadCoefs.coeficients[5] = color * normal.y * normal.z;
      threadCoefs.coeficients[7] = color * normal.z * normal.x;
      threadCoefs.coeficients[6] = color * (3 * normal.z * normal.z - 1);
      threadCoefs.coeficients[8] = color * (normal.x * normal.x - normal.y * normal.y);
      HarmCoefsPacked ret;
      pack(ret, threadCoefs);
      return ret;
    }
    [numthreads(THREADS_PER_GROUP_AXIS, THREADS_PER_GROUP_AXIS, 1)]
    void reduction_cs(uint3 groupId : SV_GroupID, uint flatIdx : SV_GroupIndex, uint3 dtId : SV_DispatchThreadID)
    {
      uint width = width__half_step__step__face.x;
      int face_number = width__half_step__step__face.w;
      if (face_number == -1)
        face_number = groupId.z;

      HarmCoefsPacked threadCoefs = computeCoefs(dtId.xy * width__half_step__step__face.z - 1, face_number);
      addCoefs(threadCoefs, computeCoefs((dtId.xy + uint2(0, width / 2)) * width__half_step__step__face.z - 1, face_number));

      coefsToReduct[flatIdx] = threadCoefs;
      GroupMemoryBarrierWithGroupSync();

      const int WARP_SIZE = 32;

      UNROLL
      for (int i = THREADS_PER_GROUP_AXIS * THREADS_PER_GROUP_AXIS / 2; i > WARP_SIZE; i >>= 1)
      {
        REDUCTION(i)
        GroupMemoryBarrierWithGroupSync();
      }

      if (flatIdx < WARP_SIZE)
      {
        UNROLL
        for (int i = WARP_SIZE; i > 0; i >>= 1)
          REDUCTION(i)
      }

      if (flatIdx == 0)
        convert_to_final(structuredBufferAt(harmonicsValues, groupId.z * pow2(width / THREADS_PER_GROUP_AXIS) / 2 + groupId.y * width / THREADS_PER_GROUP_AXIS + groupId.x), coefsToReduct[0]);
    }
  }
  compile("cs_5_0", "reduction_cs");
}

shader final_harmonics_reduction_cs
{
  (cs) { final_reduction_size@f1 = (sp_harm_final_reduction_size); }
  ENABLE_ASSERT(cs)
  hlsl(cs)
  {
    RWStructuredBuffer<HarmCoefs> harmonicsValuesFinal: register(u0);
    StructuredBuffer<HarmCoefs> harmonicsValues: register(t0);

    groupshared HarmCoefsPacked coefsToReduct[FINAL_REDUCTION_HIGH_THREADS_COUNT];

    [numthreads(FINAL_REDUCTION_HIGH_THREADS_COUNT, 1, 1)]
    void reduction_cs(uint flatIdx : SV_GroupIndex)
    {
      HarmCoefsPacked threadCoefs = (HarmCoefsPacked)0;
      if (flatIdx < final_reduction_size)
        convert_from_final(threadCoefs, structuredBufferAt(harmonicsValues, flatIdx));
      if (flatIdx + FINAL_REDUCTION_HIGH_THREADS_COUNT < final_reduction_size)
      {
        HarmCoefsPacked tmp;
        convert_from_final(tmp, structuredBufferAt(harmonicsValues, flatIdx + FINAL_REDUCTION_HIGH_THREADS_COUNT));
        addCoefs(threadCoefs, tmp);
      }

      coefsToReduct[flatIdx] = threadCoefs;
      GroupMemoryBarrierWithGroupSync();

      const int WARP_SIZE = 32;

      UNROLL
      for (int i = FINAL_REDUCTION_HIGH_THREADS_COUNT / 2; i > WARP_SIZE; i >>= 1)
      {
        REDUCTION(i)
        GroupMemoryBarrierWithGroupSync();
      }

      if (flatIdx < WARP_SIZE)
      {
        UNROLL
        for (int i = WARP_SIZE; i > 0; i >>= 1)
          REDUCTION(i)
      }
      if (flatIdx == 0)
        convert_to_final(structuredBufferAt(harmonicsValuesFinal, 0), coefsToReduct[0]);
    }
  }
  compile("cs_5_0", "reduction_cs");
}
