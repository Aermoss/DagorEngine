buffer omni_lights always_referenced;
buffer spot_lights always_referenced;
buffer common_lights_shadows always_referenced;
texture photometry_textures_tex;
texture dynamic_light_shadows;

// GridLightsParams
int omniLightsCount = 0;
int omniLightsWordCount = 0;
int spotLightsCount = 0;
int spotLightsWordCount = 0;
float depthSliceScale = 0.0;
float depthSliceBias = 0.0;
float4 shadowAtlasTexel = (0.0, 0.0, 0.0, 0.0);
float shadowDistScale = 0.0;
float shadowDistBias = 0.0;
float shadowZBias = 0.0;
float shadowSlopeZBias = 0.0;

macro INIT_PHOTOMETRY_TEXTURES(code)
  (code) { photometry_textures_tex@smpArray = photometry_textures_tex; }
endmacro

macro USE_PHOTOMETRY_TEXTURES(code)
  hlsl(code) {
    #include <pixelPacking/ColorSpaceUtility.hlsl>
    #include <fast_shader_trig.hlsl>
    #include <renderLightsConsts.hlsli>
    #include <ies_mappings.hlsl>

    #ifndef M_PI
    #define M_PI (3.14159265358979323846)
    #endif

    half2 getPhotometryTexCoords(half3 lightDir, half3 dir, float zoom, bool rotate) {
      half3 side = abs(lightDir.x) < 0.707106781186548 // = cos(M_PI/4)
        ? half3(1, 0, 0)
        : half3(0, 0, 1);
      half3 forward = normalize(cross(side, lightDir));
      side = cross(lightDir, forward);
#if USE_OCTAHEDRAL_MAPPING
      // --- octahedral mapping ---
      half2 tc = octahedral_mapping(half3(dot(side, dir), dot(lightDir, dir), dot(forward, dir)), zoom, rotate);
#else
      // --- spherical mapping ---
      half phi = atan2(dot(forward, dir), dot(side, dir));
      half2 tc = half2(phi/(2*M_PI), acosFast4(dot(lightDir, dir))/M_PI * zoom);
#endif
      return tc;
    }

    float getPhotometryValue(float3 light_dir, float3 dir, float zoom, bool rotated, float texId)
    {
      half2 tc = getPhotometryTexCoords(light_dir, dir, zoom, rotated);
      BRANCH
      if (any(tc < 0 || tc > 1))
        return 0;
      half4 photometry = tex3Dlod(
        photometry_textures_tex,
        half4(tc, texId, 0));
      return SRGBToLinear_Fast(photometry.r).r;
    }

    // returns ies_intensity * currentAttenuation
    // early exit is used in case currentAttenuation is already 0
    half applyPhotometryIntensity(float3 lightToWorldDir, float3 lightDir, float texId, float texScale_rotation, float currentAttenuation) {
      ##if photometry_textures_tex != NULL
      bool rotated = texScale_rotation < 0;
      float zoom = abs(texScale_rotation);
      BRANCH
      if (texId < 0 || currentAttenuation < 0.0001)
        return currentAttenuation;
      return getPhotometryValue(lightDir, lightToWorldDir, zoom, rotated, texId) * currentAttenuation;
      ##else
      return currentAttenuation;
      ##endif
    }
  }
endmacro

macro INIT_AND_USE_PHOTOMETRY_TEXTURES(code)
  INIT_PHOTOMETRY_TEXTURES(code)
  USE_PHOTOMETRY_TEXTURES(code)
endmacro

macro INIT_CLUSTERED_LIGHTS(code)
  (code) {
    light_count_params@i4 = (omniLightsCount, omniLightsWordCount, spotLightsCount, spotLightsWordCount);
    depth_slice_params__shadow_atlas_texel@f4 = (depthSliceScale, depthSliceBias, shadowAtlasTexel.x, shadowAtlasTexel.y);
    shadow_scale_bias_params@f4 = (shadowDistScale, shadowDistBias, shadowZBias, shadowSlopeZBias);
  }
endmacro

macro USE_CLUSTERED_LIGHTS(code)
  hlsl(code) {
    #define omniLightsCount light_count_params.x
    #define omniLightsWordCount light_count_params.y
    #define spotLightsCount light_count_params.z
    #define spotLightsWordCount light_count_params.w
    #define depthSliceScale depth_slice_params__shadow_atlas_texel.x
    #define depthSliceBias depth_slice_params__shadow_atlas_texel.y
    #define shadowAtlasTexel depth_slice_params__shadow_atlas_texel.zw
    #define shadowDistScale shadow_scale_bias_params.x
    #define shadowDistBias shadow_scale_bias_params.y
    #define shadowZBias shadow_scale_bias_params.z
    #define shadowSlopeZBias shadow_scale_bias_params.w
  }
endmacro

macro INIT_AND_USE_CLUSTERED_LIGHTS(code)
  INIT_CLUSTERED_LIGHTS(code)
  USE_CLUSTERED_LIGHTS(code)
endmacro

macro INIT_OMNI_LIGHTS_CB(code)
  (code) {
    Lights@cbuf = omni_lights hlsl {
      #include <renderLights.hlsli>
      #include <fast_shader_trig.hlsl>
      cbuffer Lights@cbuf
      {
        uint4 omni_lights_count;
        RenderOmniLight omni_lights_cb[MAX_OMNI_LIGHTS];
      };
    }
  }
endmacro

macro USE_OMNI_LIGHTS_CB(code)
  hlsl(code) {
    half getOmniLightFade(RenderOmniLight ol, float3 worldPos) {
      float3 boxPos = half3(ol.boxR0.w, ol.boxR1.w, ol.boxR2.w);
      float3 boxDiff = worldPos - boxPos;
      float3 box = 2 * (ol.boxR0.xyz * boxDiff.x + ol.boxR1.xyz * boxDiff.y + ol.boxR2.xyz * boxDiff.z);
      box = saturate(abs(box));
      const float FADEOUT_DIST = 0.05; // 5% on both sides
      box = 1 - box;
      float fadeout = min3(box.x, box.y, box.z);
      float fadelimit = FADEOUT_DIST; // linear function
      return fadeout <= fadelimit ? fadeout / fadelimit : 1;
    }

    half getOmniLightIntensity(RenderOmniLight ol, float3 worldPos) {
      ##if photometry_textures_tex != NULL
      float texScale = ol.direction__tex_scale.w;
      BRANCH
      if (abs(texScale) < 0.0001)
        return 1;
      float3 dir = normalize(worldPos - ol.posRadius.xyz);
      bool rotated = texScale < 0;
      texScale = abs(texScale);
      float texId = floor(texScale * (1.0 / TEX_ID_MULTIPLIER));
      float zoom = texScale - texId * TEX_ID_MULTIPLIER;
      return getPhotometryValue(ol.direction__tex_scale.xyz, dir, zoom, rotated, texId);
      ##else
      return 1;
      ##endif
    }

    float4 getFinalColor(RenderOmniLight ol, float3 worldPos) {
      return ol.colorFlags * getOmniLightFade(ol, worldPos) * getOmniLightIntensity(ol, worldPos);
    }
  }
endmacro

macro INIT_AND_USE_OMNI_LIGHTS_CB(code)
  INIT_OMNI_LIGHTS_CB(code)
  USE_OMNI_LIGHTS_CB(code)
endmacro

macro INIT_LIGHT_SHADOWS(code)
  (code)
  {
    dynamic_light_shadows@shd = dynamic_light_shadows;
  }
endmacro

macro USE_LIGHT_SHADOWS(code)
  hlsl(code) {

    half dynamic_shadow_sample(float2 tc, float z)
    {
      return dynamic_light_shadows.SampleCmpLevelZero(dynamic_light_shadows_cmpSampler, tc.xy, z);
    }

    half dynamic_shadow_sample_fxaa(float2 pos, float z, float2 texel_size)
    {
      float2 fxaaConsoleRcpFrameOpt = 0.5*texel_size;
      float4 fxaaConsolePosPos = float4(pos - fxaaConsoleRcpFrameOpt, pos + fxaaConsoleRcpFrameOpt);
      half4 luma = half4(
               dynamic_shadow_sample(fxaaConsolePosPos.xy, z),
               dynamic_shadow_sample(fxaaConsolePosPos.xw, z),
               dynamic_shadow_sample(fxaaConsolePosPos.zy, z),
               dynamic_shadow_sample(fxaaConsolePosPos.zw, z));
       half4 dir = half4(
         dot(luma, half4(-1,1,-1,1)),
         dot(luma, half4(1,1,-1,-1)),
         0,0
       );
       float2 dir2 = dir.xy * texel_size;
       half3 grad = half3(
         dynamic_shadow_sample(pos.xy, z),
         dynamic_shadow_sample(pos.xy - dir2, z),
         dynamic_shadow_sample(pos.xy + dir2, z)
       );
       return saturate(dot(grad, half3(0.2, 0.4, 0.4) ));
    }
    #include <interleavedGradientNoise.hlsl>
    half dynamic_shadow_sample_8tap(float2 screenpos, float2 pos, float z, float radius, float frame)
    {
      float2 rotation;
      sincos((2*PI)*interleavedGradientNoiseFramed(screenpos, frame), rotation.x, rotation.y);
      float2x2 rotationMatrix = {rotation.x, rotation.y, -rotation.y, rotation.x};
      const int NUM_SAMPLES = 4;
      const float2 offsets[32] =//fixme: move to separate const buffer!
      {
        float2( 0.337219344255f, 0.57229881707f ),
        float2( -0.573982177743f, -0.799635574054f ),
        float2( 0.679255251604f, -0.65997901429f ),
        float2( -0.892186823575f, 0.404959480819f ),

        float2( 0.816424053179f, -0.548170142661f ),
        float2( -0.833925266583f, 0.545581110136f ),
        float2( -0.525005773899f, -0.805277049262f ),
        float2( 0.324521580535f, 0.785584251486f ),

        float2( -0.365103620512f, -0.871708293801f ),
        float2( 0.30268865232f, 0.924430192218f ),
        float2( 0.919585398916f, -0.258148956848f ),
        float2( -0.878812342437f, 0.332246828123f ),

        float2( -0.679374536212f, -0.663335212756f ),
        float2( 0.704181074766f, 0.648385817291f ),
        float2( -0.675304741649f, 0.657206995364f ),
        float2( 0.730600839551f, -0.615268393278f ),

        float2( 0.882880032571f, -0.252055365939f ),
        float2( -0.815902405519f, 0.279264733888f ),
        float2( -0.209182819347f, -0.808498547699f ),
        float2( 0.359405243809f, 0.921547588839f ),

        float2( -0.058305608623f, 0.907915085075f ),
        float2( -0.156033484238f, -0.977887612536f ),
        float2( 0.98067075742f, 0.0142957188351f ),
        float2( -0.982131816966f, 0.05922295699f ),

        float2( 0.485243100439f, 0.43545130271f ),
        float2( -0.77682740988f, -0.587696460901f ),
        float2( 0.429579595122f, -0.894642710457f ),
        float2( -0.720340535983f, 0.641385073215f ),

        float2( 0.574746847182f, -0.673570114093f ),
        float2( -0.384732521594f, 0.908689777207f ),
        float2( -0.725552751165f, -0.57621829525f ),
        float2( 0.831738405676f, 0.549035049699f ),
      };
      /*const float2 offsets[NUM_SAMPLES] = {
        float2( -0.7071,  0.7071),
        float2( -0.0000, -0.8750),
        float2(  0.5303,  0.5303),
        float2( -0.6250, -0.0000),
        float2(  0.3536, -0.3536),
        float2( -0.0000,  0.3750),
        float2( -0.1768, -0.1768),
        float2(  0.1250,  0.0000)
      };*/
      //float radius = texel_size.x;
      half shadow = 0;
      rotationMatrix *= radius*(interleavedGradientNoiseFramed(screenpos+1.1, frame*1.13)*0.25+0.75);
      //uint indexOffset = 0;//uint(interleavedGradientNoiseFramed(screenpos+1.1, frame) * 7.9)*NUM_SAMPLES;
      UNROLL
      for (int i = 0; i < NUM_SAMPLES; ++i)
      {
        float2 sampleOffset = mul(offsets[i], rotationMatrix);
        //sampleOffset = rotationMatrix[0]*((i+frame/8.0+1)/NUM_SAMPLES);
        shadow += dynamic_shadow_sample(pos.xy+sampleOffset, z);
      }
      return shadow*(1./NUM_SAMPLES);
    }

    #include <octahedral.hlsl>
    half2 getOmniShadowTc(float4 shadowTcToAtlas , float3 lightToPos)
    {
      float2 octahedralTc = octEncode(lightToPos.xzy)*0.5+0.5;
      return shadowTcToAtlas.xy + octahedralTc * shadowTcToAtlas.zw;
    }

    float getOmniShadow(float4 shadowTcToAtlas, float4 posRadius, float3 worldPos, float NoL, float2 screenpos)
    {
      float3 lightToPos = worldPos - posRadius.xyz;
      #if OMNI_SHADOWS
        BRANCH
        if (shadowTcToAtlas.z < 0.0001)
          return 1.0;
        half2 tc = getOmniShadowTc(shadowTcToAtlas, lightToPos);
        float2 zn_zfar = get_light_shadow_zn_zf(posRadius.w);
        float3 absLightToPos = abs(lightToPos);
        float linearZ = max(absLightToPos.x, max(absLightToPos.y, absLightToPos.z));
        float3 shadowViewDir = sign(lightToPos) * (absLightToPos < float3(linearZ, linearZ, linearZ) ? float3(0, 0, 0) : float3(1, 1, 1));

        float zbias = shadowZBias + shadowSlopeZBias / (abs(NoL)+0.1);

        float lightToPosDist = length(lightToPos);
        float invLightToPosDist = rcp(lightToPosDist);
        float biasedLinearZ = linearZ - dot(shadowViewDir, lightToPos) * (1 + invLightToPosDist) * zbias;

        float biasedDistance = biasedLinearZ * lightToPosDist * rcp(linearZ);

        float biasedRawDistance = (zn_zfar.y*rcp(biasedDistance) - 1) * zn_zfar.x * rcp(zn_zfar.y - zn_zfar.x);
        #ifdef SIMPLE_PCF_SHADOW
          return 1-dynamic_shadow_sample(tc, biasedRawDistance);
        #else
          #ifndef shadow_frame
          float shadow_frame = 0;
          #endif
          return 1-dynamic_shadow_sample_8tap(screenpos, tc, biasedRawDistance, 1.5*shadowAtlasTexel.x*(0.75+saturate(0.3*lightToPosDist)), shadow_frame);
        #endif
      #else
        return 1;
      #endif
    }
  }
endmacro

macro INIT_AND_USE_LIGHT_SHADOWS(code)
  INIT_LIGHT_SHADOWS(code)
  USE_LIGHT_SHADOWS(code)
endmacro

macro INIT_COMMON_LIGHTS_SHADOWS_CB(code)
  (code) {
    common_lights_shadows@cbuf = common_lights_shadows hlsl {
      cbuffer common_lights_shadows@cbuf
      {
        float4 spotCnt_omniCnt_firstOmni;
        float4 common_light_shadows[MAX_SPOT_LIGHTS*4 + MAX_OMNI_LIGHTS];
      };
    }
  }
endmacro

macro USE_COMMON_LIGHTS_SHADOWS_CB(code)
  hlsl(code) {
    float4x4 getSpotLightTm(uint index)
    {
      index *= 4;
      return float4x4(
        common_light_shadows[index + 0],
        common_light_shadows[index + 1],
        common_light_shadows[index + 2],
        common_light_shadows[index + 3]
      );
    }
    float4 getOmniLightShadowData(uint index)
    {
      uint baseIndex = spotCnt_omniCnt_firstOmni.z;
      return common_light_shadows[baseIndex + index];
    }
  }
endmacro

macro INIT_AND_USE_COMMON_LIGHTS_SHADOWS_CB(code)
  INIT_COMMON_LIGHTS_SHADOWS_CB(code)
  USE_COMMON_LIGHTS_SHADOWS_CB(code)
endmacro

macro INIT_SPOT_LIGHTS_CB(code)
  (code) {
    Lights2@cbuf = spot_lights hlsl {
      #include <renderLights.hlsli>
      cbuffer Lights2@cbuf {
        uint4 spot_lights_count;
        RenderSpotLight spot_lights_cb[MAX_SPOT_LIGHTS];
      }
    }
  }
endmacro

buffer lights_full_grid always_referenced;

macro INIT_LIGHTS_CLUSTERED_CB(code)
  (code) {
    flatBitArray@buf = lights_full_grid hlsl{StructuredBuffer<uint> flatBitArray@buf;};
  }
endmacro

macro USE_LIGHTS_CLUSTERED_CB(code)
  hlsl(code) {
    #include <clustered_constants.hlsli>
    //helper macro to reduce divirgence
    #if WAVE_INTRINSICS//reduce divirgence, on SM6.0 and consoles
      #define MERGE_MASK(m) WaveReadFirstLane( WaveAllBitOr( (m) ) )
    #else
      #define MERGE_MASK(m) (m)
    #endif
    uint getSliceAtDepth( float depth, float sliceScale, float sliceBias)
    {
      return max(0, log2(depth) * sliceScale + sliceBias);
    }
    uint getClusterIndex(float2 tc, uint sliceId)
    {
      uint2 gridCoord = uint2(tc*float2(CLUSTERS_W, CLUSTERS_H));
      return gridCoord.x+gridCoord.y*CLUSTERS_W + sliceId*CLUSTERS_W*CLUSTERS_H;
    }
  }
endmacro

macro INIT_AND_USE_LIGHTS_CLUSTERED_CB(code)
  INIT_LIGHTS_CLUSTERED_CB(code)
  USE_LIGHTS_CLUSTERED_CB(code)
endmacro