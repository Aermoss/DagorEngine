include "dagi_scene_voxels_common.dshl"

macro GET_REFLECTIONS_FROM_GI(code)
  hlsl(code) {
    //#define FIXED_LOOP_COUNT 1//we can't use fixed loop count as we try to skip meters from ssr
    #define SSR_CONE_TRACE 1
    #ifndef SSR_GI_CASCADE
      #define SSR_GI_CASCADE 0
    #endif

    #ifndef SSR_CONE_TRACE
      #define SSR_CONE_TRACE 1
    #endif
    #if SSR_CONE_TRACE
      #ifndef CASCADE_0_DIST
        #define CASCADE_0_DIST 4.0
      #endif
      #ifndef CASCADE_1_DIST
        #define CASCADE_1_DIST 16.0
      #endif
      #ifndef SSR_MAX_LOOP_ITER
        #define SSR_MAX_LOOP_ITER 32.0
      #endif
    #else
      #define SSR_MAX_LOOP_ITER 64
    #endif
  }

  RAY_CAST_VOXELS_CASCADE(code)
  hlsl(code) {
    // raycast with cone sampling by default

    #ifndef SSR_CONE_SAMPLING
      #define SSR_CONE_SAMPLING 1
    #endif

    //hierarchial tracing, can be both sampling and fixed hit with define of CONE_SAMPLING
    //still slower than just cone tracing
    //this implementation can be sped up, if sceneWorldPosToCoordF & sceneCoordFToWorldPos will become just two madds as they should be.
    //this one is actually working, but needs maxDist  (currently always samples 64 iterations)
    void raycast_voxel_loop_coord_cascade_h(inout half4 result, inout float3 worldPos, float3 wdir)
    {
      float3 wPos = worldPos;
      uint minCascade = 0;
      uint maxCascade = 2;
      float2 dd = get_box_intersect_cascade(minCascade, worldPos, wdir);
      if (dd.x > 0 || dd.y < 0)//either we are in outside cascade or not intersect it
        return;
      uint cascade = minCascade;
      float cStep = getSceneVoxelStep(minCascade);
      float3 wDirMul = wdir*cStep;

      float3 coordF = sceneWorldPosToCoordF(worldPos, cascade);
      float3 coordStepF = sceneWorldPosToCoordMoveF(wDirMul, cascade);


      uint skipped = 0;
      float threshold = 0.1;
      for (uint i = 0; i < 64; ++i)
      {
        if (any(abs(coordF-VOXEL_RESOLUTION*0.5) >= VOXEL_RESOLUTION*0.5))
        {
          if (cascade==maxCascade)
            break;
          coordF = sceneWorldPosToCoordF(sceneCoordFToWorldPos(coordF, cascade), cascade+1);
          cascade++;
          minCascade++;
          continue;
        }
        #if SSR_CONE_SAMPLING
          float3 wrappedTc = sceneVoxelsCoordToTc(coordF, cascade);
          half alpha = sampleVoxelsAlpha(wrappedTc, 0);
        #else
          uint3 wrapCoord = wrapSceneVoxelCoord(int3(coordF), cascade);
          half alpha = getVoxelsAlpha(wrapCoord, cascade);
        #endif
        BRANCH
        if (alpha>0)
        {
          if (cascade == minCascade)
          {
            #if SSR_CONE_SAMPLING
              half3 voxelColor = sampleVoxelsColor(wrappedTc, 0);
            #else
              half3 voxelColor = getVoxelsColor(wrapCoord, cascade);
            #endif

            result.rgb += result.a*voxelColor;//voxelColor is already premultiplied by it's alpha
            result.a *= 1-alpha;
            if (result.a<threshold)
            {
              //re-apply same voxel
              #if SSR_CONE_SAMPLING
                result.rgb += result.a*voxelColor;
                result.a *= 1-alpha;
              #endif
              break;
            }
          } else
          {

            coordF -= coordStepF;
            coordF = sceneWorldPosToCoordF(sceneCoordFToWorldPos(coordF, cascade), cascade-1);
            cascade--;
          }
          skipped = 0;
        } else
        {
          skipped = skipped+1;
          if (skipped == 3 && cascade < maxCascade)
          {
            coordF = sceneWorldPosToCoordF(sceneCoordFToWorldPos(coordF, cascade), cascade+1);
            cascade++;
            skipped = 0;
          }
        }
        coordF += coordStepF;
      }
    }

    bool raycast_cascades(float3 wpos, float3 wdir, float3 normal, out float4 result, float skipped)
    {
      result = half4(0,0,0,1);

      uint minCascade;
      #if SSR_CONE_TRACE
        minCascade = SSR_GI_CASCADE;
      #else
        minCascade = 0;
      #endif
      float minCascadeSize = getSceneVoxelSize(minCascade).x;
      float3 worldPos = wpos + normal*minCascadeSize + max(2*minCascadeSize - 0.9*skipped, 0)*wdir;//skip 3 voxels + step out 1 voxel from normal

      #ifdef SSR_GI_CASCADE
        float len = skipped;
        #if SSR_CONE_SAMPLING
          result = raycast_cone_sample_base(minCascade, worldPos, wdir, skipped, SSR_MAX_LOOP_ITER);
        #else
          result = raycast_cone_base(SSR_GI_CASCADE, worldPos, wdir, skipped, SSR_MAX_LOOP_ITER);
        #endif
        return result.a<1;
      #else
        raycast_voxel_loop_coord_cascade_h(result, worldPos, wdir, maxDist);
        return result.a<1;
        #if 0
        /*
        //There are numerous mistakes in code
        float3 bmin0, bmin1, bmin2, bmax0, bmax1, bmax2;

        getSceneVoxelBox(0, bmin0, bmax0);
        getSceneVoxelBox(1, bmin1, bmax1);
        getSceneVoxelBox(2, bmin2, bmax2);

        // choose minimum cascade detail
        if (all(wpos.xzy > bmin0.xzy && wpos.xzy < bmax0.xzy))
          minCascade = 0;
        else if (all(wpos.xzy > bmin1.xzy && wpos.xzy < bmax1.xzy))
          minCascade = 1;
        else if (all(wpos.xzy > bmin2.xzy && wpos.xzy < bmax2.xzy))
          minCascade = 2;
        else return false;

        float minCascadeSize = getSceneVoxelSize(minCascade).x;

        // if traced in ssr distance is small, move start trace point in normal direction to avoid
        // self-reflection in voxels

        float3 worldPos = wpos + normal*minCascadeSize + (3*minCascadeSize)*wdir;//skip 3 voxels + step out 1 voxel from normal

        // start coordinates for cascades
        float3 sCoord[3];
        sCoord[0] = sceneWorldPosToCoordF(worldPos, 0);
        sCoord[1] = sceneWorldPosToCoordF(worldPos, 1);
        sCoord[2] = sceneWorldPosToCoordF(worldPos, 2);

        // randomize dir a little and scale
        float3 coordDir = wdir.xzy/getSceneVoxelSize0();

        float3 coord;
        float dist = 0;

        // step multipliers for different cascades
        float stepMult[3];
        stepMult[0] = getSceneVoxelSizeScale(0);
        stepMult[1] = getSceneVoxelSizeScale(1);
        stepMult[2] = getSceneVoxelSizeScale(2);

        // maximum distance in cascades
        float maxDist[3];
        maxDist[0] = get_box_intersect_cascade(0, worldPos, wdir).y;
        maxDist[1] = get_box_intersect_cascade(1, worldPos, wdir).y;
        maxDist[2] = get_box_intersect_cascade(2, worldPos, wdir).y;

        uint curCascade = minCascade;

        int lastTracesEmpty = 0;

        int n = SSR_MAX_LOOP_ITER;

        LOOP
        for (;n;n--)
        {
          coord = sCoord[curCascade] + coordDir * (dist/stepMult[curCascade]);
          if (dist > maxDist[curCascade])
          {
            curCascade += 1;
            minCascade = curCascade;
            if (curCascade>2)
            {
              return false;
            }
          }

          int3 wrapCoordI = wrapSceneVoxelCoord(int3(coord), curCascade);
          float alpha = getVoxelsAlpha(wrapCoordI, curCascade);

          if (alpha > 0)
          {
            lastTracesEmpty = 0;
            if (curCascade > minCascade)
            {
              // go one step back!
              dist -= stepMult[curCascade];
              curCascade -= 1;
              continue;
            }
            else
            {
              half3 voxelColor = getVoxelsColor(wrapCoordI, curCascade);
              result.rgb += result.a*voxelColor;
              result.a *= 1-alpha;
              if (result.a<0.01)
                return true;
            }
          }
          else
          {
            curCascade = min(2, curCascade + (lastTracesEmpty==2 ? 1 : 0));
            lastTracesEmpty = lastTracesEmpty==2 ? 0 : (lastTracesEmpty+1);
          }
          dist += stepMult[curCascade];
        }
        return false;
        */
        #endif
      #endif
    }

    half4 get_gi_reflection(float3 wpos, float3 raycast_dir, float3 normal, float skipped)
    {
      half4 color;
      raycast_cascades(wpos, raycast_dir, normal, color, skipped);
      color.a = 1 - color.a;
      return color;
    }
  }
endmacro

macro GET_REFLECTIONS_GI(code)
  GET_REFLECTIONS_FROM_GI(code)
endmacro