include "sky_shader_global.dshl"
include "viewVecVS.dshl"
include "frustum.dshl"
include "gbuffer.dshl"
include "dagi_quality.dshl"
include "dagi_raycast_voxels_25d.dshl"
//include "sample_voxels.dshl"

int ssgi_debug_rasterize_scene = 0;
interval ssgi_debug_rasterize_scene:raycast<1, exact_voxels<2, lit_voxels;

shader ssgi_debug_rasterize_voxels_25d
{
  z_test = false;
  cull_mode = none;
  blend_src = 1; blend_dst = isa;

  (ps) {
    envi_probe_specular@smpCube = envi_probe_specular;
    world_view_pos@f3 = world_view_pos;
  }
  RAY_CAST_VOXELS_25D(ps)
  USE_AND_INIT_VIEW_VEC_VS()
  INIT_ZNZFAR()
  ENABLE_ASSERT(ps)

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float2 tc : TEXCOORD0;
      float3 viewVect     : TEXCOORD1;
    };
  }

  DECL_POSTFX_TC_VS_RT()

  hlsl(vs) {
    VsOutput debug_rasterize_vs(uint vertexId : SV_VertexID)
    {
      VsOutput output;
      float2 pos =  float2((vertexId == 2) ? +3.0 : -1.0, (vertexId == 1) ? -3.0 : 1.0);
      output.pos = float4(pos.xy,0,1);
      output.tc = pos * float2(0.5, -0.5) + float2(0.50001, 0.50001);
      output.tc.xy = output.tc;
      output.viewVect = view_vecLT + output.tc.x*(view_vecRT-view_vecLT) + output.tc.y*(view_vecLB-view_vecLT);
      //output.viewVect = pos.y > 0 ? (pos.x < 0 ? view_vecLT : view_vecRT) : (pos.x < 0 ? view_vecLB : view_vecRB);

      return output;
    }
  }



  hlsl(ps) {
    float3 ray_box_intersect_normal(float3 wpos, float3 wdir, float3 bmin, float3 bmax)
    {
      float3 cb = (wdir >= 0.0f) ? bmin : bmax;

      float3 rzr = 1.0 / wdir;
      bool3 nonzero = (abs(wdir) > 1e-6);
      float3 startOfs = nonzero ? max(0, (cb - wpos) * rzr) : 0;
      float maxStart = max3(startOfs.x, startOfs.y, startOfs.z);
      return -(maxStart == startOfs.x ? float3(sign(wdir.x),0,0) : maxStart == startOfs.y ? float3(0, sign(wdir.y),0) : float3(0, 0, sign(wdir.z)));
    }

    struct WooRay2d{
      float2 p, wdir;
      int2 outCell, pt, endCell, stepCell;
      float2 startP, tMax, tDelta;
    };

    #define MAX_REAL 1e6

    struct WooRay3d{
      float3 p, wdir;
      int3 outCell, pt, endCell, stepCell;
      float3 startP, tMax, tDelta;
    };

    #define MAX_REAL 1e6

    WooRay3d initWoo3(float3 p, float3 wdir, float3 leafSize, int3 dimensions, int3 end_cell)
    {
      WooRay3d ray;
      ray.p = p;
      ray.wdir = wdir;
      ray.startP = float3(ray.p)/leafSize;
      ray.pt = int3(floor(ray.startP));
      ray.endCell = end_cell;

      ray.stepCell = (wdir >= 0.0f) ? int3(1,1,1) : int3(-1,-1,-1);
      float3 csp = ceil(ray.startP);
      float3 cb = (wdir >= 0.0f) ? leafSize*(csp+(ray.startP>=csp)) : leafSize*floor(ray.startP);

      float3 rzr = 1.0 / wdir;
      bool3 nonzero = (abs(wdir) > 1e-6);
      ray.tMax = nonzero ? (cb - p) * rzr : MAX_REAL;

      ray.tDelta = nonzero ? leafSize * (ray.stepCell>0 ? rzr:-rzr) : 0;
      ray.endCell = nonzero ? ray.endCell : ray.pt;

      ray.outCell = ray.stepCell>0 ? min(dimensions, ray.endCell+1) : max(-1, ray.endCell-1);
      return ray;
    }

    void nextCell3(inout WooRay3d ray, inout float t)
    {
      if (ray.tMax.x < ray.tMax.y) {
        if (ray.tMax.x < ray.tMax.z) {
          ray.pt.x += ray.stepCell.x;
          t = ray.tMax.x;
          ray.tMax.x += ray.tDelta.x;
        } else {
          ray.pt.z += ray.stepCell.z;
          t = ray.tMax.z;
          ray.tMax.z += ray.tDelta.z;
        }
      } else {
        if (ray.tMax.y < ray.tMax.z) {
          ray.pt.y += ray.stepCell.y;
          t = ray.tMax.y;
          ray.tMax.y += ray.tDelta.y;
        } else {
          ray.pt.z += ray.stepCell.z;
          t = ray.tMax.z;
          ray.tMax.z += ray.tDelta.z;
        }
      }
    }


    half3 lit_voxel(float3 normal, float t, float3 diffuse)
    {
      float3 light = normalize(float3(1,2,0.6));
      float3 backlight = -light.zyx;
      float sun=1;
      float backsun=sun*0.1;
      float amb=0.1;
      float fog = exp2(-t*0.025);
      return fog*(sun*saturate(dot(normal, light)) + backsun*saturate(dot(normal, backlight)) + amb*(normal.y*0.5+0.5))*diffuse;//saturate(dot(normal, light))//(-normal.xzy)
    }

    bool raycast_woo(float3 wpos, float3 wdir, float maxDist, out float4 result, out float t, out float coordY)
    {
      float2 bmin, bmax;
      getScene25dVoxelBox(bmin, bmax);

      float3 worldPos = wpos;
      float2 ofsPos = worldPos.xz - bmin;
      float3 bwd = getScene25dVoxelSize();
      float3 endPos = worldPos+wdir*maxDist;
      int SUBDIV = 2;//alpha resolution is twice det
      WooRay3d ray = initWoo3(float3(ofsPos, wpos.y), wdir.xzy, bwd.xzy/SUBDIV, VOXEL_25D_RESOLUTIONU, SUBDIV*float3(scene25dWorldPosToCoordF(endPos.xz), endPos.y/bwd.y));
      int3 diff = abs(ray.endCell - ray.pt);
      int n = 4*dot(diff, 1)+1;
      int3 endGrid = VOXEL_25D_RESOLUTIONU*SUBDIV;
      t = 0;
      float prevT = 0;
      int cnt = n;
      result = half4(0,0,0,1);
      uint alpha4 = 0;
      uint prevAddress = ~0u;
      LOOP
      for (;n;n--) {
        if (any(ray.pt.xy < 0 && ray.stepCell.xy < 0) || any(ray.pt.xy >= endGrid.xy && ray.stepCell.xy > 0))
          return false;
        uint2 wrapCoord = wrapSceneVoxel25dCoord(ray.pt.xy/2);
        float floorHt = getVoxel25dFloorCoord(wrapCoord);
        float3 cwpos = worldPos+wdir*(t+0.001);
        coordY = cwpos.y*getScene25dVoxelInvSizeY() - floorHt;
        if (coordY < 0)
        {
        ##if gi_quality != only_ao
          result = float4(ssgi_get_heightmap_2d_height_25d_diffuse(cwpos.xz), 0);
        ##else
          result = float4(0.5,0.5,0.5,0);
        ##endif
          return true;
        }
        uint3 coordPart = uint3(ray.pt.xy&1, uint(frac(coordY)*2)&1);
        uint bit = (1U<<(coordPart.x + (coordPart.y<<1) + (coordPart.z<<2)));
        uint3 sampleCoord = int3(wrapCoord, int(max(0, coordY)));
        BRANCH
        if (getRawVoxel25dBufDataAlpha4(getAlphaBlockAddress(sampleCoord))&(bit<<getAlphaShift(sampleCoord)))
        {
          half3 voxelColor = 1, emission = 0;
        ##if gi_quality != only_ao
          getVoxel25dColor(sampleCoord, voxelColor, emission);
        ##endif
          result.rgb += voxelColor;
          result.rgb += emission;
          result.a = 0;
          return true;
        }
        if (all(ray.pt == ray.endCell))
          return false;

        prevT = t;
        nextCell3(ray, t);

        if (t>maxDist)
          return false;//half4(0,1,0,1);
      }
      return false;
    }

    #include <ray_box_intersect.hlsl>
    half4 lit_raycast_woo(float3 wpos, float3 wdir)
    {
      half4 color;
      float t, coordY;
      if (raycast_woo(wpos, wdir, 100.f, color, t, coordY))
      {
        float3 worldPos = wpos+wdir*(t+0.001);
        float2 bbminXZ = floor(worldPos.xz/(getScene25dVoxelSizeXZ()*0.5))*0.5*getScene25dVoxelSizeXZ();
        float floorHt = ssgi_get_heightmap_2d_height_25d(scene25DCoordRoundedToWorldPos(scene25dWorldPosToCoordF(worldPos.xz)));
        float3 bbmin = float3(bbminXZ, floorHt + floor(coordY*2)*0.5*getScene25dVoxelSizeY()).xzy;
        float3 voxel_normal = ray_box_intersection_normal(wpos, wdir, bbmin, bbmin + getScene25dVoxelSize()*0.5);
        return half4(color.rgb*lerp(1, 0.5,pow2(pow3(1-abs(dot(voxel_normal, wdir))))), 1-color.a);
      }
      return half4(0,0,0,0);
      //float3 light = normalize(float3(1,2,0.6));
      //return half4(color.rgb*saturate(dot(voxel_normal, light) + 0.2), 1-color.a);
    }
    half4 raycast_loop2(float3 wpos, float3 wdir)
    {
      //half4 ret = raycast_voxel_loop_coord(cascade, wpos, wdir, MAX_DIST);
      float3 normal;
      float3 emission;
      half3 ret = raycast_25d_coord_base(wpos, normal, emission, wdir, 100);
      if (ret.b>0)
      {
        float3 light = normalize(float3(1,2,0.6));
        half3 diffuse = ret.rgb * (saturate(dot(normal,light))+0.2);
        return half4(diffuse + emission, 1);
      }
      return 0;
    }

    half4 debug_rasterize_ps(VsOutput IN) : SV_Target
    {
      float3 view = normalize(IN.viewVect);
      ##if ssgi_debug_rasterize_scene == raycast
      half4 result = raycast_loop2(world_view_pos, normalize(IN.viewVect));
      ##else
      half4 result = lit_raycast_woo(world_view_pos, normalize(IN.viewVect));
      ##endif
      clip(result.a-0.001);
      return result;
    }
  }
  compile("target_vs", "debug_rasterize_vs");
  compile("target_ps", "debug_rasterize_ps");
}
