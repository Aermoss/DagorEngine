include "shader_global.dshl"

float clouds_layer1_freq = 2;
float clouds_layer2_freq = 4;
float clouds_layer1_coverage = 0.5;
float clouds_layer2_coverage = 0.5;
float clouds_layer1_seed = 0;
float clouds_layer2_seed = 0;
float clouds_epicness = 0.5;
float clouds_rain_clouds_amount = 0.5;
float clouds_rain_clouds_seed = 0;
float clouds_weather_size = 65536;

shader gen_weather
{
  USE_POSTFX_VERTEX_POSITIONS()
  z_test = false;
  z_write = false;
  cull_mode = none;

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float2 texcoord     : TEXCOORD0;
    };
  }

  hlsl(vs) {
    VsOutput gen_weather_vs(uint vertex_id : SV_VertexID)
    {
      VsOutput output;
      float2 pos = getPostfxVertexPositionById(vertex_id);
      output.pos = float4(pos.xy, 1, 1);
      output.texcoord = pos*float2(0.5,-0.5) + float2(0.5, 0.5);
      return output;
    }
  }
  local float humidity1 = pow(2*min(clouds_layer1_coverage, 0.5), 0.5) - 1.0;
  local float gamma1 = 1.5*pow(2.718281828, (2*max(clouds_layer1_coverage, 0.5)-1)*-2.5);

  local float humidity2 = pow(2*min(clouds_layer2_coverage, 0.5), 0.5) - 1.0;
  local float gamma2 = 1.5*pow(2.718281828, (2*max(clouds_layer2_coverage, 0.5)-1)*-2);

  local float rain_clouds_humidity = pow(2*min(clouds_rain_clouds_amount, 0.5), 0.5) - 1.0;
  local float rain_clouds_gamma = 1.5*pow(2.718281828, (2*max(clouds_rain_clouds_amount, 0.5)-1)*-2.5);
  (ps) {
    clouds_layer1_freq_gamma_threshold@f4 = (clouds_layer1_freq, gamma1, humidity1, clouds_layer1_seed*0.1);
    clouds_layer2_freq_gamma_threshold@f4 = (clouds_layer2_freq, gamma2, humidity2, clouds_layer2_seed*0.1);
    clouds_epicness@f1 = (clouds_epicness);
    clouds_rain_clouds@f3 = (clouds_rain_clouds_seed, rain_clouds_humidity, rain_clouds_gamma, 0);
    weather_scale@f1 = ((clouds_weather_size/65536),0,0,0);
    //clouds_layers_gamma_freq@f4 = (clouds_layer1_gamma, clouds_layer2_gamma, clouds_layer1_freq, clouds_layer2_freq);
    //clouds_layers_humidity@f2 = (clouds_layer1_humidity,clouds_layer2_humidity,0,0);
  }

  hlsl(ps) {
    #include <noise_functions.hlsl>
    #include <common_functions.hlsl>
    #include <clouds_density_height_lut.hlsli>
    //#include <cloud_constants.hlsl>
    float set_range_smoother(float v, float min_range, float max_range, float pt)
    {
      float ret = set_range(v, min_range, max_range);//will clamp everything that is bigger than max_range to 1
      ret = v > max_range*pt ? lerp(set_range(max_range*pt, min_range, max_range), 1, (v - max_range*pt)/(1-pt)) : ret;
      return ret;
    }
    float get_perlin_5_octaves_freq(float3 uv, float uv_tile)
    {
      float tileFloored = floor(uv_tile);
      float v = get_perlin_5_octaves(uv, tileFloored, bool3(true, true, false));
      if (tileFloored != uv_tile)
        v = lerp(v, get_perlin_5_octaves(uv, tileFloored + 1, bool3(true, true, false)), uv_tile - tileFloored);
      return v;
    }
    float4 get_uv_tiled_scaled(float2 uv, float uvZ, float tile)
    {
      float tileScaled = tile*weather_scale;
      float tileScaledFloored = max(1., floor(tileScaled + 0.5));
      return float4(uv, uvZ/(tileScaledFloored/tile), tileScaledFloored);
    }
    float get_perlin_3_octaves_scaled(float2 uv, float uvZ, float tile, float tf=2.0, float af=0.5)
    {
      float4 uv_tile = get_uv_tiled_scaled(uv, uvZ, tile);
      return get_perlin_3_octaves(uv_tile.xyz, uv_tile.w, bool3(true, true, false), tf, af);
    }
    float get_perlin_5_octaves_scaled(float2 uv, float uvZ, float tile, float tf=2.0, float af=0.5)
    {
      float4 uv_tile = get_uv_tiled_scaled(uv, uvZ, tile);
      return get_perlin_5_octaves(uv_tile.xyz, uv_tile.w, bool3(true, true, false), tf, af);
    }
    float get_clouds_layer(float2 uv, float uv_tile, float gamma, float theshold, float noise_offset, out float originalSignal)
    {
      float4 uvTiled = float4(uv, noise_offset/weather_scale, uv_tile*weather_scale);
      //float4 uvTiled = get_uv_tiled_scaled(uv, noise_offset, uv_tile);
      originalSignal = get_perlin_5_octaves_freq(uvTiled.xyz, uvTiled.w);
      float signalLayer1 = set_range_smoother(originalSignal, -0.65, 0.65, 0.9);
      signalLayer1 = saturate(signalLayer1+theshold);
      signalLayer1 = pow(signalLayer1, gamma);
      return signalLayer1;
    }

    #include <smootherstep.hlsl>
    #include <cloud_settings.hlsli>
    float4 gen_weather(float2 uv)
    {

      float epicCircle = length(uv*2-1);
      float epicness = saturate(2*clouds_epicness*weather_scale*(1.5*epicCircle-0.75));
      epicness *= saturate(set_range(get_perlin_5_octaves_scaled(uv.xy,19,2), -0.65, 0.2));

      float originalSignal1,originalSignal2;
      float signalLayer1 = get_clouds_layer(uv, clouds_layer1_freq_gamma_threshold.x, clouds_layer1_freq_gamma_threshold.y, clouds_layer1_freq_gamma_threshold.z, clouds_layer1_freq_gamma_threshold.w, originalSignal1);
      float signalLayer2 = get_clouds_layer(frac(-uv.yx+1.5), clouds_layer2_freq_gamma_threshold.x, clouds_layer2_freq_gamma_threshold.y, clouds_layer2_freq_gamma_threshold.z, clouds_layer2_freq_gamma_threshold.w, originalSignal2);

      //cumuloNimbus signal
      float cumuloNimbusScale = clouds_rain_clouds.y;
      float cumulonimbusEpicnessThreshold = 0.75;
      float cumuloNimbusEpicness = saturate((clouds_epicness*(1./cumulonimbusEpicnessThreshold)-1)/(1./cumulonimbusEpicnessThreshold-1));//this is constant
      cumuloNimbusScale = lerp(clouds_rain_clouds.y, 1, saturate(saturate(pow(epicness,2)*0.5)*cumuloNimbusEpicness));
      float cumuloNimbusSignal = get_perlin_3_octaves_scaled(uv, clouds_rain_clouds.x, 3.0, 2.0, 0.4)*1.25;
      cumuloNimbusSignal = set_range_smoother(cumuloNimbusSignal, -0.85, 0.75, 0.9);
      cumuloNimbusSignal = saturate(cumuloNimbusSignal + cumuloNimbusScale);
      //cumuloNimbusSignal = smootherstep(cumuloNimbusSignal);//may be use smootherstep
      cumuloNimbusSignal = smoothstep(0,1,cumuloNimbusSignal);//may be use smootherstep, but it is too harsh
      cumuloNimbusSignal = pow(cumuloNimbusSignal, clouds_rain_clouds.z);

      float cloudTypeSignal = get_perlin_5_octaves_scaled(uv, 50.033, 3.0, 2, 0.4);
      cloudTypeSignal = saturate(set_range(cloudTypeSignal, -0.25, 0.25));
      float signal5 = get_perlin_3_octaves_scaled(uv, 13.1, 9.0);
      float signal6 = get_perlin_3_octaves_scaled(1-uv.yx, 17.3, 9.0);

      float perlin5Signal = pow(signal5*0.5+0.75,0.5);
      float perlin6Signal = pow(signal6*0.5+0.75,0.5);
      //cloudType =0;
      float perlin5 = lerp(perlin5Signal, 1, 1-pow2(1-cloudTypeSignal));
      float perlin6 = lerp(perlin6Signal, 1, 1-pow2(1-cloudTypeSignal));

      float densityLayer1 = signalLayer1*perlin5, densityLayer2 = signalLayer2*perlin6;
      //cumuloNimbusSignal = bigScale;

      float cloudType = cloudTypeSignal*((CLOUDS_TYPES_LUT_CN-1.f)/CLOUDS_TYPES_LUT);//all signals below 0.5 are stratus->cumulus. 0.5+is cumulonimbus

      //Epicness:
      //epicness is mount of cumulus clouds on horizon
      cloudType = lerp(cloudType, 0.5, epicness);//epicness
      densityLayer1 = lerp(densityLayer1, 0.5, epicness*perlin6);//epicness
      //add cumulonimbus signal. cumulonimbus is replacing layer1, but it's density is maximum of densityLayer1 and cumulonimbus
      //densityLayer1 = max(densityLayer1, 0.8*cumuloNimbusSignal + 0.1*signalLayer1 + 0.05*perlin5);
      densityLayer1 = lerp(densityLayer1, 0.8*cumuloNimbusSignal + 0.15*originalSignal1 + 0.05*perlin5, saturate(cumuloNimbusSignal*2));
      densityLayer2 = max(densityLayer2*saturate(1.25-1.75*cumuloNimbusSignal), pow(saturate(set_range(signal6, -0.5, 0.5)*(cumuloNimbusSignal*3-1.5)), 0.75));
      cloudType = lerp(cloudType, 1, saturate(cumuloNimbusSignal*2));
      return float4(densityLayer1, densityLayer2, cloudType, cumuloNimbusSignal);
    }

    float4 gen_weather_ps( VsOutput input):SV_Target0
    {
      return gen_weather(input.texcoord);
    }
  }
  compile("target_vs", "gen_weather_vs");
  compile("target_ps", "gen_weather_ps");
}
