include "cloudsBaseMSLighting.dshl"

float clouds_forward_eccentricity = 0.8;
float clouds_back_eccentricity = -0.5;//clouds_back_eccentricity = -0.5 if we use constant lerp param.
float clouds_forward_eccentricity_weight = 0.6;//frostbite uses 0.5 by default
float clouds_ms_eccentricity_attenuation = 0.6;

macro CLOUDS_MULTIPLE_SCATTERING(code)
  //Multiple scattering, see Oz the great and volumetric or Frostbite clouds
  //http://magnuswrenninge.com/wp-content/uploads/2010/03/Wrenninge-OzTheGreatAndVolumetric.pdf

  CLOUDS_MULTIPLE_SCATTERING_BASE()
  local float one_by_4pi = 1./(4);//our light is pre dividided by PI = 3.14159265
  local float4 clouds_ms_contribution4 = (clouds_ms_contribution4_base)*one_by_4pi;
  //local float contributionNorm = 1./(1+clouds_ms_contribution);
  local float4 clouds_ms_eccentricity_attenuation4 = (1, clouds_ms_eccentricity_attenuation, clouds_ms_eccentricity_attenuation*clouds_ms_eccentricity_attenuation, pow(clouds_ms_eccentricity_attenuation, 3));

  local float4 clouds_ms_back_eccentricity = clouds_ms_eccentricity_attenuation4*(clouds_back_eccentricity,clouds_back_eccentricity,clouds_back_eccentricity,clouds_back_eccentricity);
  local float4 clouds_ms_forw_eccentricity = clouds_ms_eccentricity_attenuation4*(clouds_forward_eccentricity,clouds_forward_eccentricity,clouds_forward_eccentricity,clouds_forward_eccentricity);
  local float clouds_back_eccentricity_weight = (1-clouds_forward_eccentricity_weight);
  local float4 one_plus_g2_ms_back            = (1,1,1,1) + clouds_ms_back_eccentricity*clouds_ms_back_eccentricity;
  local float4 neg_2g_ms_back                 = (-2,-2,-2,-2)*clouds_ms_back_eccentricity;
  local float4 one_minus_g2_by_4pi_ms_back    = ((1,1,1,1) - clouds_ms_back_eccentricity*clouds_ms_back_eccentricity)*clouds_ms_contribution4*clouds_back_eccentricity_weight;

  local float4 one_plus_g2_ms_forw            = (1,1,1,1) + clouds_ms_forw_eccentricity*clouds_ms_forw_eccentricity;
  local float4 neg_2g_ms_forw                 = (-2,-2,-2,-2)*clouds_ms_forw_eccentricity;
  local float4 one_minus_g2_by_4pi_ms_forw    = ((1,1,1,1) - clouds_ms_forw_eccentricity*clouds_ms_forw_eccentricity)*clouds_ms_contribution4*clouds_forward_eccentricity_weight;
  (code) {
    one_plus_g2_ms_back        @f4 = (one_plus_g2_ms_back);
    neg_2g_ms_back             @f4 = (neg_2g_ms_back);
    one_minus_g2_by_4pi_ms_back@f4 = (one_minus_g2_by_4pi_ms_back);

    one_plus_g2_ms_forw        @f4 = (one_plus_g2_ms_forw);
    neg_2g_ms_forw             @f4 = (neg_2g_ms_forw);
    one_minus_g2_by_4pi_ms_forw@f4 = (one_minus_g2_by_4pi_ms_forw);

    clouds_ms_contribution4    @f4 = (clouds_ms_contribution4);//this one needed only for ambient calculations
    //for three octaves
    clouds_ms_attenuation_param@f4 = (1/(clouds_ms_attenuation*clouds_ms_attenuation), 1/clouds_ms_attenuation, 0, ms_sigma.z);
    //for four octaves
    //clouds_ms_attenuation_param@f4 = (pow(clouds_ms_attenuation,-3), 1/(clouds_ms_attenuation*clouds_ms_attenuation), 1/clouds_ms_attenuation, ms_sigma.w);
  }
  hlsl(code) {
      //number of octaves used in shader = 3
      #if NUMBER_OF_MS_OCTAVES == 3
        #define float_octaves float3
        #define half_octaves half3
        #define octaves_attributes xyz
        #define other_octaves_attributes xy
        #define last_octaves_attribute z
      #elif NUMBER_OF_MS_OCTAVES == 4
        #define float_octaves float4
        #define half_octaves half4
        #define octaves_attributes xyzw
        #define other_octaves_attributes xyz
        #define last_octaves_attribute w
      #endif

      #define CLOUDS_LAST_OCTAVE_ATTENUATED_SIGMA (clouds_ms_attenuation_param.w)
      float_octaves henyey_greenstein_optimized_multiple_octaves(float_octaves one_plus_g2, float_octaves neg_2g, float_octaves one_minus_g2_by_4pi, float cos0)
      {
        float_octaves h = neg_2g*cos0 + one_plus_g2;
        return float_octaves(one_minus_g2_by_4pi*pow(h, -1.5));
        //return float_octaves(one_minus_g2_by_4pi/(h * h * rsqrt(h)));
      }
      float_octaves henyey_greenstein_optimized_multiple_scattering(float cos0)
      {
        return (henyey_greenstein_optimized_multiple_octaves(one_plus_g2_ms_back .octaves_attributes, neg_2g_ms_back .octaves_attributes, one_minus_g2_by_4pi_ms_back .octaves_attributes, cos0) +
                henyey_greenstein_optimized_multiple_octaves(one_plus_g2_ms_forw .octaves_attributes, neg_2g_ms_forw .octaves_attributes, one_minus_g2_by_4pi_ms_forw .octaves_attributes, cos0));
      }
      float_octaves getMSExtinction(float lastExtinction)
      {
        float_octaves ret;
        ret. last_octaves_attribute = lastExtinction;
        ret. other_octaves_attributes = pow(lastExtinction, clouds_ms_attenuation_param . other_octaves_attributes);
        return ret;
      }
    }
endmacro

include "cloudsDensity.dshl"

macro CLOUDS_LIGHTING_COMMON(code)
  CLOUDS_LIGHTING_COMMON_MATH(code)
  CLOUDS_MULTIPLE_SCATTERING(code)
  hlsl(code) {
    #ifndef CLOUDS_LIGHT_SAMPLES
      #define CLOUDS_LIGHT_SAMPLES 32//6..12 settings!
    #endif

    void baseLightExtinction(inout float light_sample_extinctionLast, float3 worldPos, float heightFraction, float shadowStepSize, float base_mip, float mip_add, float erosion_level, float msThreshold, float3 light_dir, uint steps, float expStep)
    {
      raymarchLightExtinction(light_sample_extinctionLast, worldPos, shadowStepSize, base_mip, mip_add, erosion_level, msThreshold,
                             light_dir, steps, expStep, shadowStepSize*CLOUDS_LAST_OCTAVE_ATTENUATED_SIGMA);
    }
  }
endmacro

