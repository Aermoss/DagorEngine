texture cache_tex0;
texture last_clip_tex;
float4 world_to_last_clip = (1/2048,1/2048, 0,0);

macro INIT_CLIPMAP_LAST_BASE(code)
  (code) {
    world_to_last_clip@f4 = world_to_last_clip;
    last_clip_tex@smp2d = last_clip_tex;
  }
endmacro

macro INIT_CLIPMAP_LAST()
  INIT_CLIPMAP_LAST_BASE(ps)
endmacro

macro USE_CLIPMAP_LAST_BASE(code)
  hlsl(code) {
    half3 sample_lastclip(float3 worldPos)
    { return (half3)tex2D(last_clip_tex, worldPos.xz*world_to_last_clip.xy+world_to_last_clip.zw); }
    half3 sample_lastclip_lod(float3 worldPos, float lod)
    { return (half3)tex2Dlod(last_clip_tex, float4(worldPos.xz*world_to_last_clip.xy+world_to_last_clip.zw,0,lod)); }
  }
endmacro
macro USE_CLIPMAP_LAST()
  USE_CLIPMAP_LAST_BASE(ps)
endmacro

float4 fallback_info0;
float4 fallback_info1;

macro INIT_CLIPMAP_FALLBACK(code)
  (code) {
    fallback_info0@f3 = fallback_info0;
    fallback_info1@f4 = fallback_info1;
  }
endmacro

macro INIT_CLIPMAP_FALLBACK_ALBEDO(code)
  INIT_CLIPMAP_LAST_BASE(code)
  INIT_CLIPMAP_FALLBACK(code)
  (code) {
    cache_tex0@smp2d = cache_tex0;
  }
endmacro

macro USE_CLIPMAP_FALLBACK_ALBEDO(code)
  USE_CLIPMAP_LAST_BASE(code)
  hlsl(code) {
    half3 sampleFallBackAlbdeoLod0(float3 worldPos)
    {
      float2 fallbackUV = worldPos.xz*fallback_info0.x + fallback_info0.yz;
      BRANCH
      if (all(abs(fallbackUV*2-1) < (255./256.)))// we assume 4 pages, and border is 2 pixels
      {
        float2 uv = fallbackUV*fallback_info1.xy;
        return tex2Dlod ( cache_tex0, float4(uv, 0,0)).xyz;
      } else
      {
        return sample_lastclip_lod(worldPos, 0);
      }
    }
  }
endmacro