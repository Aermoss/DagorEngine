
/* A lexical analyzer generated by Dolphin */

#include "dolphout.h"
#include "parser.h"
using namespace std;

const char *DolphinLexicalAnalyzer::dolphin_copyright_notice=
	"A lexical analyzer generated by Dolphin 0.2.3 (5 March, 2001).\n"
	"Dolphin is (C) Alexander Okhotin <whale@aha.ru>, 1999-2001.\n";

const int DolphinLexicalAnalyzer::alphabet_cardinality;
const int DolphinLexicalAnalyzer::number_of_symbol_classes;
const int DolphinLexicalAnalyzer::number_of_start_conditions;
const int DolphinLexicalAnalyzer::number_of_dfa_states;
const unsigned char DolphinLexicalAnalyzer::initial_dfa_state;
const int DolphinLexicalAnalyzer::size_of_table_of_lines;
const int DolphinLexicalAnalyzer::number_of_actions;

Whale::Terminal *DolphinLexicalAnalyzer::get_token()
{
	if(lexeme)
		clear_lexeme();
	
	unsigned char state=initial_dfa_state;
	int start_pos=0, accepting_pos=0, action_to_call=0;
	append=false;
	
	for(int pos=start_pos;; pos++)
	{
		bool eof_reached_right_now=false;
		
		int recognized_action=states[state].action_upon_accept[start_condition];
		
		if(buffer.size()==pos)
		{
			if(eof_reached)
				eof_reached_right_now=true;
			else
			{
				char c;
				input_stream.get(c);
				
				if(input_stream.eof())
				{
					eof_reached=true;
					eof_reached_right_now=true;
				}
				else
				{
					buffer.push_back(c);
				}
			}
		}
		
		if(eof_reached_right_now)
		{
			if(pos==start_pos)
			{
				if(lexeme==NULL)
				{
					number_of_characters_in_lexeme=0;
					lexeme=new char[1];
					lexeme[0]=0;
				}
				
				
	if(start_condition==CPP_CODE)
	{
		cout << "End of file encountered while reading code starting "
			<< "at line " << line() << " column " << column() << ".\n";
		set_start_condition(MAIN);
		return make_token<Whale::TerminalError>();
	}
	else
		return make_token<Whale::TerminalEOF>();

			}
		}
		else
		{
			unsigned int c=(unsigned int)buffer[pos];
			state=states[state].access_transition(symbol_to_symbol_class[c]);
		}
		
		if(recognized_action)
		{
			accepting_pos=pos;
			action_to_call=recognized_action;
		}
		
		if(!state || eof_reached_right_now)
		{
			if(action_to_call==0)	// if it is a lexical error,
				accepting_pos=start_pos+1; // then eat one character.
			
			if(lexeme)
				delete lexeme;
			number_of_characters_in_lexeme=accepting_pos;
			lexeme=new char[number_of_characters_in_lexeme+1];
			copy(buffer.begin(), buffer.begin()+number_of_characters_in_lexeme, lexeme);
			lexeme[number_of_characters_in_lexeme]=0;
			
			switch(action_to_call)
			{
			case 0:
				
	if(start_condition==CPP_CODE)
		cout << "Lexical error in code starting at line " << line()
			<< " column " << column() << ".\n";
	else
		cout << "Lexical error at line " << line()
			<< " column " << column() << ".\n";
	
	return make_token<Whale::TerminalError>();

				break;
			case 1:
				 
				break;
			case 4:
				return make_token<Whale::TerminalKwReturn>();
			case 5:
				return make_token<Whale::TerminalKwSkip>();
			case 6:
				return make_token<Whale::TerminalKwAppend>();
			case 7:
				return make_token<Whale::TerminalKwCondition>();
			case 8:
				return make_token<Whale::TerminalKwRange>();
			case 9:
				return make_token<Whale::TerminalKwContains>();
			case 10:
				return make_token<Whale::TerminalKwEof>();
			case 11:
				return make_token<Whale::TerminalKwError>();
			case 12:
				return make_token<Whale::TerminalKwIn>();
			case 13:
				return make_token<Whale::TerminalKwTrue>();
			case 14:
				return make_token<Whale::TerminalKwFalse>();
			case 15:
				return make_token<Whale::TerminalKwStartConditions>();
			case 16:
				return make_token<Whale::TerminalE>();
			case 17:
				return make_token<Whale::TerminalArrow>();
			case 18:
				return make_token<Whale::TerminalSemicolon>();
			case 19:
				return make_token<Whale::TerminalComma>();
			case 20:
				return make_token<Whale::TerminalOr>();
			case 21:
				return make_token<Whale::TerminalAnd>();
			case 22:
				return make_token<Whale::TerminalNot>();
			case 23:
				return make_token<Whale::TerminalSharpSign>();
			case 24:
				return make_token<Whale::TerminalCommercialAt>();
			case 25:
				return make_token<Whale::TerminalSlash>();
			case 26:
				return make_token<Whale::TerminalTwoDots>();
			case 27:
				return make_token<Whale::TerminalLess>();
			case 28:
				return make_token<Whale::TerminalGreater>();
			case 29:
				return make_token<Whale::TerminalLessOrEqual>();
			case 30:
				return make_token<Whale::TerminalGreaterOrEqual>();
			case 31:
				return make_token<Whale::TerminalEqual>();
			case 32:
				return make_token<Whale::TerminalNotEqual>();
			case 33:
				return make_token<Whale::TerminalLeftParenthesis>();
			case 34:
				return make_token<Whale::TerminalRightParenthesis>();
			case 35:
				return make_token<Whale::TerminalLeftBracket>();
			case 36:
				return make_token<Whale::TerminalRightBracket>();
			case 37:
				return make_token<Whale::TerminalLoneAsterisk>();
			case 38:
				return make_token<Whale::TerminalLonePlus>();
			case 39:
				return make_token<Whale::TerminalImplication>();
			case 40:
				return make_token<Whale::TerminalAssign>();
			case 41:
				return make_token<Whale::TerminalString>();
			case 42:
				
	cout << "Unterminated string at line " << line()
		<< " column " << column() << ".\n";
	
	return make_token<Whale::TerminalError>();

				break;
			case 43:
				return make_token<Whale::TerminalNumber>();
			case 44:
				return make_token<Whale::TerminalHexNumber>();
			case 45:
				return make_token<Whale::TerminalId>();
			case 46:
				return make_token<Whale::TerminalCode>();
			case 47:
				
	set_start_condition(CPP_CODE);
	brace_count=1;
	append=true;

				break;
			case 48:
				 brace_count++; append=true; 
				break;
			case 49:
				
	brace_count--;
	if(brace_count==0)
	{
		set_start_condition(MAIN);
		return make_token<Whale::TerminalCode>();
	}
	else
		append=true;

				break;
			case 50:
				 append=true; 
				break;
			}
			
			if(append)
				start_pos=number_of_characters_in_lexeme;
			else
			{
				clear_lexeme();
				start_pos=0;
			}
			
			pos=start_pos-1;
			state=initial_dfa_state;
			accepting_pos=0;
			action_to_call=0;
		}
	}
}

void DolphinLexicalAnalyzer::clear_lexeme()
{
	for(int i=0; i<number_of_characters_in_lexeme; i++)
		internal_position_counter(buffer[i]);
	
	buffer.erase(buffer.begin(), buffer.begin()+number_of_characters_in_lexeme);
	
	if(lexeme)
	{
		delete lexeme;
		lexeme=NULL;
	}
}

const unsigned char DolphinLexicalAnalyzer::table_of_lines[DolphinLexicalAnalyzer::size_of_table_of_lines]={
	  0,  57,  57,  57,  57,  50,  57,  57,  57, 128,  57,  57,
	 57,  57,  57,  56,  57, 158,  19,  19,  57,  57,  57,  57,
	 57,  57,  19,  19,  57,  57,  57,  19,  19,  19,  19,  19,
	 19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,
	 19,   0,  57,   0,  57,  57,   0,  57,  57,  57,  57,  50,
	 57,  57,  57, 128,  57,  57,  57,  57,  57,  57,  57, 158,
	 57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,
	 57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,
	 57,  57,  57,  57,  57,  57,  57,   0,  57,   0,  57,  57,
	  0, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	151, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138,   0, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 154, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 157, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	  0,  57,  57,  57,  57,  50,  57,  57,  57, 128,  57,  57,
	 57,  57,  57,  57,  57, 158,  60,  60,  57,  57,  57,  57,
	 57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,
	 57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,
	 55,   0,  57,   0,  57,  57,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,  50,  50,  57,  50,  50,  50,  50,  50,  50,
	 50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,
	 50, 125,  50,  50,  50, 146,  50,  50,  50,  50,  50,  50,
	 50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,
	 50,  50,  50,  50,  50,   0,   0,  52,  52,  52,  52,  52,
	 52,  52,  52,  52,  52,  52, 137,  52,  52,  52,  52,  52,
	 52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,
	 52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,
	 52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,
	  0,  53,  53,  53,  53, 133,  53,  53,  53, 135,  53,  53,
	 53,  53,  53,  53,  53, 129,  53,  53,  53,  53,  53,  53,
	 53, 139,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
	 53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
	 53, 152,  53, 152,  53,  53,   0,   0,   0, 128, 128, 128,
	128, 128, 128,  57, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 145, 128, 128, 128, 147,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,   0,
	  0, 131,  57, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131,   0, 132,  53, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 148, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	  0, 152, 152, 133, 133,  53, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 149, 133, 133, 133, 134, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 152,   0, 152, 152, 135, 135, 135,
	135, 135, 135,  53, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 150, 135, 135, 135, 136,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 152,
	  0, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 156, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152,   0,   2,   2,   2,   3,   4,
	  5,  57,   6,  59,   7,   8,   9,  10,  11, 141,  54,  12,
	 13,  60, 140,  14,  15,  16,  17,  18,  19,  19,  20,  57,
	 21,  19,  81, 103,  19,  22,  92,  19,  67,  19,  19,  19,
	 19,  19,  69,  84, 117,  19,  19,  23,  24,  25,  26,  57,
	  0,   2,   2,   2,  57,  50,  57,  57,  57, 128,  57,  57,
	 57,  57,  57,  57,  57,  51,  57,  57,  57,  57,  57,  57,
	 57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,
	 57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,
	 57,   0,  57,   0,  57,  57,   0,   0,   0,   4,   4,  28,
	  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,
	  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4, 126,
	  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,
	  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   0,
	  0,  57,  57,  57,  57,   0,  57,  57,  57,   0,  57,  57,
	 52,  57,  57,  57,  57, 130,  57,  57,  57,  57,  57,  57,
	 57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,
	 57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,
	 57,   0,  57,   0,  57,  57,   0,  57,  57,  57,  57,  50,
	 57,  57,  57, 128,  57,  57,  57,  57,  57,  57,  57, 158,
	 57,  57,  57,  57,  57,  32,  33,  57,  57,  57,  57,  57,
	 57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,
	 57,  57,  57,  57,  57,  57,  57,   0,  57,   0,  57,  57,
	  0,  57,  57,  57,  57,  50,  57,  57,  57, 128,  57,  57,
	 57,  57,  57,  56,  57, 158,  19,  19,  57,  57,  57,  57,
	 57,  57,  19,  19,  57,  57,  57,  19,  19,  19,  19,  19,
	 19,  19,  19,  19,  19,  19,  65,  89,  87,  19,  19,  19,
	 19,   0,  57,   0,  57,  57,   0,  57,  57,  57,  57,  50,
	 57,  57,  57, 128,  57,  57,  57,  57,  57,  57,  57, 158,
	 36,  36,  57,  57,  57,  57,  57,  57,  36,  57,  57,  57,
	 57,  57,  36,  36,  36,  36,  36,  57,  57,  57,  57,  57,
	 57,  57,  57,  57,  57,  57,  57,   0,  57,   0,  57,  57,
	  0,   0,   0,  59,  59,  59,  59,  59,  59,  28,  59,  59,
	 59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,
	 59,  59,  59,  59,  59, 127,  59,  59,  59,  59,  59,  59,
	 59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,
	 59,  59,  59,  59,  59,   0,   0,  57,  57,  57,  57,  50,
	 57,  57,  57, 128,  57,  57,  57,  57,  57,  56,  57, 158,
	 19,  19,  57,  57,  57,  57,  57,  57,  19,  19,  57,  57,
	 57,  19,  68,  19,  19, 119,  19,  19,  19,  19,  19,  19,
	 19,  19,  19,  19,  19,  19,  19,   0,  57,   0,  57,  57,
	  0,  57,  57,  57,  57,  50,  57,  57,  57, 128,  57,  57,
	 57,  57,  57,  56,  57, 158,  19,  19,  57,  57,  57,  57,
	 57,  57,  19,  19,  57,  57,  57,  19,  19,  19,  19,  19,
	 19,  19,  19,  83,  19,  19,  19,  19,  19,  19, 115,  19,
	 19,   0,  57,   0,  57,  57,   0,  57,  57,  57,  57,  50,
	 57,  57,  57, 128,  57,  57,  57,  57,  57,  56,  57, 158,
	 19,  19,  57,  57,  57,  57,  57,  57,  19,  19,  57,  57,
	 57,  19,  19,  19, 105,  19,  19,  19,  19,  19,  19,  19,
	 19,  19,  19,  19,  96,  19,  19,   0,  57,   0,  57,  57,
	  0,   0,   0,   4,   4,   4,   4,   4,   4,   4,   4,   4,
	  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,
	  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,
	  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,
	  4,   4,   4,   4,   4,   0,   0,   0,   0,  59,  59,  59,
	 59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,
	 59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,
	 59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,
	 59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,   0,
	  0,  53,  53,  53,  53, 152,  53,  53,  53, 152,  53,  53,
	155,  53,  53,  53,  53, 132,  53,  53,  53,  53,  53,  53,
	 53, 139,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
	 53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
	 53, 152,  53, 152,  53,  53,   0, 130,   2, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	  0, 152, 152, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 149, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 152,   0, 152, 152, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 150, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 152,
	  0,   0,   0,  50,  50,  50,  50,  50,  50,  50,  50,  50,
	 50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,
	 50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,
	 50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,
	 50,  50,  50,  50,  50,   0,   0,   0,   0, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,   0,
	  0,  57,  57,  57,  57,   0,  57,  57,  57,   0,  57,  57,
	138,  57,  57,  57,  57, 131,  57,  57,  57,  57,  57,  57,
	 57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,
	 57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,
	 57,   0,  57,   0,  57,  57
};

const DolphinLexicalAnalyzer::StateData DolphinLexicalAnalyzer::states[DolphinLexicalAnalyzer::number_of_dfa_states+1]={
	{ 0, 0, NULL, { 0, 0 } },
	{ -1, 0, table_of_lines+810, { 0, 0 } },
	{ -1, 0, table_of_lines+864, { 1, 50 } },
	{ 23, 27, table_of_lines+54, { 0, 50 } },
	{ -1, 0, table_of_lines+918, { 42, 0 } },
	{ -1, 0, table_of_lines+54, { 23, 50 } },
	{ -1, 0, table_of_lines+54, { 21, 50 } },
	{ -1, 0, table_of_lines+54, { 33, 50 } },
	{ -1, 0, table_of_lines+54, { 34, 50 } },
	{ -1, 0, table_of_lines+54, { 37, 50 } },
	{ -1, 0, table_of_lines+54, { 38, 50 } },
	{ -1, 0, table_of_lines+54, { 19, 50 } },
	{ -1, 0, table_of_lines+972, { 25, 0 } },
	{ -1, 0, table_of_lines+216, { 43, 50 } },
	{ -1, 0, table_of_lines+54, { 18, 50 } },
	{ 23, 31, table_of_lines+54, { 27, 50 } },
	{ -1, 0, table_of_lines+1026, { 40, 50 } },
	{ 23, 34, table_of_lines+54, { 28, 50 } },
	{ 25, 53, table_of_lines+54, { 24, 50 } },
	{ -1, 0, table_of_lines, { 45, 50 } },
	{ -1, 0, table_of_lines+54, { 35, 50 } },
	{ -1, 0, table_of_lines+54, { 36, 50 } },
	{ -1, 0, table_of_lines+1080, { 16, 50 } },
	{ -1, 0, table_of_lines+270, { 47, 48 } },
	{ -1, 0, table_of_lines+54, { 20, 50 } },
	{ -1, 0, table_of_lines+270, { 0, 49 } },
	{ -1, 0, table_of_lines+54, { 22, 50 } },
	{ -1, 0, table_of_lines+54, { 32, 50 } },
	{ -1, 0, table_of_lines+54, { 41, 50 } },
	{ -1, 0, table_of_lines+54, { 17, 50 } },
	{ -1, 0, table_of_lines+54, { 26, 50 } },
	{ -1, 0, table_of_lines+54, { 29, 50 } },
	{ 24, 33, table_of_lines+54, { 31, 50 } },
	{ -1, 0, table_of_lines+54, { 39, 50 } },
	{ -1, 0, table_of_lines+54, { 30, 50 } },
	{ -1, 0, table_of_lines, { 12, 50 } },
	{ -1, 0, table_of_lines+1134, { 44, 50 } },
	{ -1, 0, table_of_lines, { 10, 50 } },
	{ 25, 121, table_of_lines+54, { 46, 50 } },
	{ -1, 0, table_of_lines, { 5, 50 } },
	{ -1, 0, table_of_lines, { 13, 50 } },
	{ -1, 0, table_of_lines+324, { 46, 0 } },
	{ -1, 0, table_of_lines, { 11, 50 } },
	{ -1, 0, table_of_lines, { 14, 50 } },
	{ -1, 0, table_of_lines, { 8, 50 } },
	{ -1, 0, table_of_lines, { 6, 50 } },
	{ -1, 0, table_of_lines, { 4, 50 } },
	{ -1, 0, table_of_lines, { 9, 50 } },
	{ -1, 0, table_of_lines, { 7, 50 } },
	{ -1, 0, table_of_lines, { 15, 50 } },
	{ 25, 50, table_of_lines+324, { 0, 0 } },
	{ -1, 0, table_of_lines+972, { 0, 0 } },
	{ -1, 0, table_of_lines+378, { 0, 0 } },
	{ -1, 0, table_of_lines+432, { 0, 50 } },
	{ 16, 30, table_of_lines+54, { 0, 50 } },
	{ -1, 0, table_of_lines+1134, { 0, 50 } },
	{ -1, 0, table_of_lines, { 0, 50 } },
	{ -1, 0, table_of_lines+54, { 0, 50 } },
	{ 23, 29, table_of_lines+54, { 0, 50 } },
	{ -1, 0, table_of_lines+1188, { 42, 0 } },
	{ 48, 57, table_of_lines+216, { 43, 50 } },
	{ 34, 45, table_of_lines, { 45, 50 } },
	{ 35, 40, table_of_lines, { 45, 50 } },
	{ 35, 43, table_of_lines, { 45, 50 } },
	{ 35, 44, table_of_lines, { 45, 50 } },
	{ 36, 37, table_of_lines, { 45, 50 } },
	{ 37, 64, table_of_lines, { 45, 50 } },
	{ 41, 35, table_of_lines, { 45, 50 } },
	{ 41, 66, table_of_lines, { 45, 50 } },
	{ -1, 0, table_of_lines+1242, { 45, 50 } },
	{ 41, 61, table_of_lines, { 45, 50 } },
	{ 35, 70, table_of_lines, { 45, 50 } },
	{ 41, 46, table_of_lines, { 45, 50 } },
	{ 41, 120, table_of_lines, { 45, 50 } },
	{ 41, 48, table_of_lines, { 45, 50 } },
	{ 42, 73, table_of_lines, { 45, 50 } },
	{ 40, 75, table_of_lines, { 45, 50 } },
	{ 38, 76, table_of_lines, { 45, 50 } },
	{ 42, 74, table_of_lines, { 45, 50 } },
	{ 38, 78, table_of_lines, { 45, 50 } },
	{ 43, 71, table_of_lines, { 45, 50 } },
	{ 43, 80, table_of_lines, { 45, 50 } },
	{ 43, 39, table_of_lines, { 45, 50 } },
	{ 38, 82, table_of_lines, { 45, 50 } },
	{ -1, 0, table_of_lines+1296, { 45, 50 } },
	{ 44, 42, table_of_lines, { 45, 50 } },
	{ 42, 85, table_of_lines, { 45, 50 } },
	{ 44, 86, table_of_lines, { 45, 50 } },
	{ 44, 72, table_of_lines, { 45, 50 } },
	{ 45, 77, table_of_lines, { 45, 50 } },
	{ 45, 63, table_of_lines, { 45, 50 } },
	{ 40, 90, table_of_lines, { 45, 50 } },
	{ 32, 91, table_of_lines, { 45, 50 } },
	{ 45, 47, table_of_lines, { 45, 50 } },
	{ 41, 93, table_of_lines, { 45, 50 } },
	{ 38, 94, table_of_lines, { 45, 50 } },
	{ 32, 95, table_of_lines, { 45, 50 } },
	{ 45, 49, table_of_lines, { 45, 50 } },
	{ 41, 97, table_of_lines, { 45, 50 } },
	{ 42, 98, table_of_lines, { 45, 50 } },
	{ 38, 99, table_of_lines, { 45, 50 } },
	{ -1, 0, table_of_lines+1350, { 45, 50 } },
	{ 41, 101, table_of_lines, { 45, 50 } },
	{ 42, 102, table_of_lines, { 45, 50 } },
	{ 46, 79, table_of_lines, { 45, 50 } },
	{ 38, 104, table_of_lines, { 45, 50 } },
	{ 46, 100, table_of_lines, { 45, 50 } },
	{ 38, 106, table_of_lines, { 45, 50 } },
	{ 34, 107, table_of_lines, { 45, 50 } },
	{ 41, 108, table_of_lines, { 45, 50 } },
	{ 42, 109, table_of_lines, { 45, 50 } },
	{ 33, 110, table_of_lines, { 45, 50 } },
	{ 31, 111, table_of_lines, { 45, 50 } },
	{ 46, 112, table_of_lines, { 45, 50 } },
	{ 44, 113, table_of_lines, { 45, 50 } },
	{ 32, 114, table_of_lines, { 45, 50 } },
	{ 47, 62, table_of_lines, { 45, 50 } },
	{ 44, 116, table_of_lines, { 45, 50 } },
	{ 47, 88, table_of_lines, { 45, 50 } },
	{ 46, 118, table_of_lines, { 45, 50 } },
	{ -1, 0, table_of_lines, { 16, 50 } },
	{ -1, 0, table_of_lines+54, { 46, 50 } },
	{ 25, 143, table_of_lines+108, { 46, 0 } },
	{ 25, 144, table_of_lines+270, { 46, 0 } },
	{ -1, 0, table_of_lines+486, { 46, 0 } },
	{ 25, 50, table_of_lines+324, { 46, 0 } },
	{ -1, 0, table_of_lines+1404, { 0, 0 } },
	{ -1, 0, table_of_lines+1458, { 0, 0 } },
	{ 25, 128, table_of_lines+486, { 0, 0 } },
	{ -1, 0, table_of_lines+1512, { 0, 0 } },
	{ -1, 0, table_of_lines+1566, { 0, 0 } },
	{ -1, 0, table_of_lines+540, { 0, 0 } },
	{ -1, 0, table_of_lines+594, { 0, 0 } },
	{ -1, 0, table_of_lines+648, { 0, 0 } },
	{ -1, 0, table_of_lines+1620, { 0, 0 } },
	{ -1, 0, table_of_lines+702, { 0, 0 } },
	{ -1, 0, table_of_lines+1674, { 0, 0 } },
	{ 17, 2, table_of_lines+378, { 0, 0 } },
	{ -1, 0, table_of_lines+108, { 0, 0 } },
	{ 25, 38, table_of_lines+432, { 0, 50 } },
	{ 20, 58, table_of_lines+54, { 0, 50 } },
	{ 24, 29, table_of_lines+54, { 0, 50 } },
	{ 25, 153, table_of_lines+540, { 46, 0 } },
	{ -1, 0, table_of_lines+108, { 46, 0 } },
	{ -1, 0, table_of_lines+270, { 46, 0 } },
	{ 25, 128, table_of_lines+486, { 46, 0 } },
	{ -1, 0, table_of_lines+1728, { 0, 0 } },
	{ -1, 0, table_of_lines+1782, { 0, 0 } },
	{ 25, 142, table_of_lines+594, { 0, 0 } },
	{ 25, 41, table_of_lines+648, { 0, 0 } },
	{ 25, 124, table_of_lines+702, { 0, 0 } },
	{ 17, 57, table_of_lines+108, { 0, 0 } },
	{ -1, 0, table_of_lines+756, { 0, 0 } },
	{ -1, 0, table_of_lines+540, { 46, 0 } },
	{ 17, 53, table_of_lines+162, { 0, 0 } },
	{ -1, 0, table_of_lines+162, { 0, 0 } },
	{ 25, 123, table_of_lines+756, { 0, 0 } },
	{ 25, 122, table_of_lines+162, { 0, 0 } },
	{ -1, 0, table_of_lines+1836, { 0, 0 } }
};

const int DolphinLexicalAnalyzer::symbol_to_symbol_class[DolphinLexicalAnalyzer::alphabet_cardinality]={
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   0,
	  0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   3,   4,   5,   6,
	  7,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,
	 18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  21,
	 22,  23,  24,   7,  25,  26,  26,  26,  26,  26,  26,  27,
	 27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,
	 27,  27,  27,  27,  27,  27,  27,  28,  29,  30,   7,  31,
	  7,  32,  26,  33,  34,  35,  36,  37,  27,  38,  27,  39,
	 40,  27,  41,  42,  43,  27,  44,  45,  46,  47,  27,  27,
	 48,  27,  27,  49,  50,  51,  52,   7,  53,  53,  53,  53,
	 53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
	 53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
	 53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
	 53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
	 53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
	 53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
	 53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
	 53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
	 53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
	 53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
	 53,  53,  53,  53
};
