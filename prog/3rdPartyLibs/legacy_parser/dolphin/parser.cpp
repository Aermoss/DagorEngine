
/* An SLR(1) parser generated by Whale */

#include "parser.h"
using namespace std;
using namespace Whale;

const char *Whale::Parser::whale_copyright_notice=
	"An SLR(1) parser generated by Whale 0.2.2 (26 February, 2001).\n"
	"(C) Alexander Okhotin <whale@aha.ru>, 1999-2001.\n"
	"(C) Vladimir Prus <ghost@cs.msu.su>, 2000-2001.\n";

NonterminalS *Whale::Parser::parse()
{
	for(;;)
	{
		int state=state_stack.back();
		LRAction lr_action=access_action_table(state, input_symbol->number());
		if(lr_action.is_shift() && input_symbol->number()!=error_terminal_number)
		{
			int new_state=lr_action.shift_state();
			symbol_stack.push_back(input_symbol);
			state_stack.push_back(new_state);
			input_symbol=lexical_analyzer.get_token();
		}
		else if(lr_action.is_reduce())
		{
			int rule_number=lr_action.reduce_rule();
			int rule_length=rules[rule_number].length;
			int rule_start=symbol_stack.size()-rule_length;
			Nonterminal *new_symbol;
			
			switch(rule_number)
			{
			case 1: {	// S -> S-IteratorI
				NonterminalS *n=new NonterminalS;
				
				NonterminalS::IteratorI *it_i=(NonterminalS::IteratorI *)symbol_stack[rule_start];
				for(int i=0; i<it_i->body.size(); i++)
				{
					n->statements.push_back(it_i->body[i]->statements);
				}
				
				new_symbol=n;
				} break;
			case 2: {	// rule-statement -> id "->" expression ";"
				NonterminalRuleStatement *n=new NonterminalRuleStatement;
				
				n->left=(TerminalId *)symbol_stack[rule_start];
				n->arrow=(TerminalArrow *)symbol_stack[rule_start+1];
				n->right=(NonterminalExpression *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				
				new_symbol=n;
				} break;
			case 3: {	// action-statement -> pair-of-expressions "==>" action
				NonterminalActionStatement *n=new NonterminalActionStatement;
				
				n->expr=(Symbol *)symbol_stack[rule_start];
				n->arrow=(TerminalImplication *)symbol_stack[rule_start+1];
				n->action=(NonterminalAction *)symbol_stack[rule_start+2];
				
				n->a4=NULL;
				n->start_conditions=NULL;
				n->a6=NULL;
				new_symbol=n;
				} break;
			case 4: {	// action-statement -> pair-of-expressions "<" start-conditions-expression ">" "==>" action
				NonterminalActionStatement *n=new NonterminalActionStatement;
				
				n->expr=(Symbol *)symbol_stack[rule_start];
				n->a4=(TerminalLess *)symbol_stack[rule_start+1];
				n->start_conditions=(NonterminalStartConditionsExpression *)symbol_stack[rule_start+2];
				n->a6=(TerminalGreater *)symbol_stack[rule_start+3];
				n->arrow=(TerminalImplication *)symbol_stack[rule_start+4];
				n->action=(NonterminalAction *)symbol_stack[rule_start+5];
				
				new_symbol=n;
				} break;
			case 5: {	// action-statement -> "eof" "==>" action
				NonterminalActionStatement *n=new NonterminalActionStatement;
				
				n->expr=(Symbol *)symbol_stack[rule_start];
				n->arrow=(TerminalImplication *)symbol_stack[rule_start+1];
				n->action=(NonterminalAction *)symbol_stack[rule_start+2];
				
				n->a4=NULL;
				n->start_conditions=NULL;
				n->a6=NULL;
				new_symbol=n;
				} break;
			case 6: {	// action-statement -> "eof" "<" start-conditions-expression ">" "==>" action
				NonterminalActionStatement *n=new NonterminalActionStatement;
				
				n->expr=(Symbol *)symbol_stack[rule_start];
				n->a4=(TerminalLess *)symbol_stack[rule_start+1];
				n->start_conditions=(NonterminalStartConditionsExpression *)symbol_stack[rule_start+2];
				n->a6=(TerminalGreater *)symbol_stack[rule_start+3];
				n->arrow=(TerminalImplication *)symbol_stack[rule_start+4];
				n->action=(NonterminalAction *)symbol_stack[rule_start+5];
				
				new_symbol=n;
				} break;
			case 7: {	// action-statement -> "error" "==>" action
				NonterminalActionStatement *n=new NonterminalActionStatement;
				
				n->expr=(Symbol *)symbol_stack[rule_start];
				n->arrow=(TerminalImplication *)symbol_stack[rule_start+1];
				n->action=(NonterminalAction *)symbol_stack[rule_start+2];
				
				n->a4=NULL;
				n->start_conditions=NULL;
				n->a6=NULL;
				new_symbol=n;
				} break;
			case 8: {	// action-statement -> "error" "<" start-conditions-expression ">" "==>" action
				NonterminalActionStatement *n=new NonterminalActionStatement;
				
				n->expr=(Symbol *)symbol_stack[rule_start];
				n->a4=(TerminalLess *)symbol_stack[rule_start+1];
				n->start_conditions=(NonterminalStartConditionsExpression *)symbol_stack[rule_start+2];
				n->a6=(TerminalGreater *)symbol_stack[rule_start+3];
				n->arrow=(TerminalImplication *)symbol_stack[rule_start+4];
				n->action=(NonterminalAction *)symbol_stack[rule_start+5];
				
				new_symbol=n;
				} break;
			case 9: {	// start-conditions-statement -> "start_conditions" start-conditions-statement-IteratorI ";"
				NonterminalStartConditionsStatement *n=new NonterminalStartConditionsStatement;
				
				n->a1=(TerminalKwStartConditions *)symbol_stack[rule_start];
				NonterminalStartConditionsStatement::IteratorI *it2_i=(NonterminalStartConditionsStatement::IteratorI *)symbol_stack[rule_start+1];
				for(int i=0; i<it2_i->body_a.size(); i++)
				{
					n->names.push_back(it2_i->body_a[i]->names);
					if(i==it2_i->body_b.size()) break;
				}
				n->a4=(TerminalSemicolon *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 10: {	// option-statement -> id "=" option-statement-IteratorI ";"
				NonterminalOptionStatement *n=new NonterminalOptionStatement;
				
				n->left=(TerminalId *)symbol_stack[rule_start];
				n->a2=(TerminalAssign *)symbol_stack[rule_start+1];
				NonterminalOptionStatement::IteratorI *it2_i=(NonterminalOptionStatement::IteratorI *)symbol_stack[rule_start+2];
				for(int i=0; i<it2_i->body_a.size(); i++)
				{
					n->right.push_back(it2_i->body_a[i]->right);
					if(i==it2_i->body_b.size()) break;
					n->a10.push_back(it2_i->body_b[i]->a10);
				}
				n->a11=(TerminalSemicolon *)symbol_stack[rule_start+3];
				
				new_symbol=n;
				} break;
			case 11: {	// invalid-statement -> error ";"
				NonterminalInvalidStatement *n=new NonterminalInvalidStatement;
				
				n->a1=(TerminalError *)symbol_stack[rule_start];
				n->a2=(TerminalSemicolon *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 12: {	// expression -> expression expression
				NonterminalExpressionConcatenation *n=new NonterminalExpressionConcatenation;
				
				n->expr1=(NonterminalExpression *)symbol_stack[rule_start];
				n->expr2=(NonterminalExpression *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 13: {	// expression -> expression "|" expression
				NonterminalExpressionDisjunction *n=new NonterminalExpressionDisjunction;
				
				n->expr1=(NonterminalExpression *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->expr2=(NonterminalExpression *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 14: {	// expression -> expression "&" expression
				NonterminalExpressionConjunction *n=new NonterminalExpressionConjunction;
				
				n->expr1=(NonterminalExpression *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->expr2=(NonterminalExpression *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 15: {	// expression -> expression "*"
				NonterminalExpressionIteration *n=new NonterminalExpressionIteration;
				
				n->expr=(NonterminalExpression *)symbol_stack[rule_start];
				n->sign=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 16: {	// expression -> expression "+"
				NonterminalExpressionIteration *n=new NonterminalExpressionIteration;
				
				n->expr=(NonterminalExpression *)symbol_stack[rule_start];
				n->sign=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 17: {	// expression -> expression-s
				NonterminalExpressionSymbol *n=new NonterminalExpressionSymbol;
				
				n->expr=(NonterminalExpressionS *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 18: {	// expression -> expression-s ".." expression-s
				NonterminalExpressionRange *n=new NonterminalExpressionRange;
				
				n->first_expr=(NonterminalExpressionS *)symbol_stack[rule_start];
				n->range_kw=(Terminal *)symbol_stack[rule_start+1];
				n->last_expr=(NonterminalExpressionS *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 19: {	// expression -> "~" expression
				NonterminalExpressionComplement *n=new NonterminalExpressionComplement;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->expr=(NonterminalExpression *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 20: {	// expression -> "(" expression ")"
				NonterminalExpressionInParentheses *n=new NonterminalExpressionInParentheses;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->expr=(NonterminalExpression *)symbol_stack[rule_start+1];
				garbage.push_back(symbol_stack[rule_start+2]);
				
				new_symbol=n;
				} break;
			case 21: {	// expression -> "[" expression "]"
				NonterminalExpressionOmittable *n=new NonterminalExpressionOmittable;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->expr=(NonterminalExpression *)symbol_stack[rule_start+1];
				garbage.push_back(symbol_stack[rule_start+2]);
				
				new_symbol=n;
				} break;
			case 22: {	// expression -> "#"
				NonterminalExpressionSharpSign *n=new NonterminalExpressionSharpSign;
				
				n->op=(TerminalSharpSign *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 23: {	// expression -> "e"
				NonterminalExpressionEpsilon *n=new NonterminalExpressionEpsilon;
				
				garbage.push_back(symbol_stack[rule_start]);
				
				new_symbol=n;
				} break;
			case 24: {	// expression -> "condition" "(" expression-c ")"
				NonterminalExpressionCondition *n=new NonterminalExpressionCondition;
				
				garbage.push_back(symbol_stack[rule_start]);
				garbage.push_back(symbol_stack[rule_start+1]);
				n->condition=(NonterminalExpressionC *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				
				new_symbol=n;
				} break;
			case 25: {	// expression -> "range" "(" expression-s "," expression-s ")"
				NonterminalExpressionRange *n=new NonterminalExpressionRange;
				
				n->range_kw=(Terminal *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->first_expr=(NonterminalExpressionS *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				n->last_expr=(NonterminalExpressionS *)symbol_stack[rule_start+4];
				garbage.push_back(symbol_stack[rule_start+5]);
				
				new_symbol=n;
				} break;
			case 26: {	// expression -> "contains" "(" expression ")"
				NonterminalExpressionContains *n=new NonterminalExpressionContains;
				
				n->a1=(TerminalKwContains *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->expr=(NonterminalExpression *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				
				new_symbol=n;
				} break;
			case 27: {	// expression-s -> id
				NonterminalExpressionS *n=new NonterminalExpressionS;
				
				n->symbol=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 28: {	// expression-s -> str
				NonterminalExpressionS *n=new NonterminalExpressionS;
				
				n->symbol=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 29: {	// expression-s -> num
				NonterminalExpressionS *n=new NonterminalExpressionS;
				
				n->symbol=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 30: {	// expression-s -> hexnum
				NonterminalExpressionS *n=new NonterminalExpressionS;
				
				n->symbol=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 31: {	// expression-c -> expression-s "<" expression-s
				NonterminalExpressionC_Comparison *n=new NonterminalExpressionC_Comparison;
				
				n->left=(NonterminalExpressionS *)symbol_stack[rule_start];
				n->comparison_operator=(Terminal *)symbol_stack[rule_start+1];
				n->right=(NonterminalExpressionS *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 32: {	// expression-c -> expression-s ">" expression-s
				NonterminalExpressionC_Comparison *n=new NonterminalExpressionC_Comparison;
				
				n->left=(NonterminalExpressionS *)symbol_stack[rule_start];
				n->comparison_operator=(Terminal *)symbol_stack[rule_start+1];
				n->right=(NonterminalExpressionS *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 33: {	// expression-c -> expression-s "<=" expression-s
				NonterminalExpressionC_Comparison *n=new NonterminalExpressionC_Comparison;
				
				n->left=(NonterminalExpressionS *)symbol_stack[rule_start];
				n->comparison_operator=(Terminal *)symbol_stack[rule_start+1];
				n->right=(NonterminalExpressionS *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 34: {	// expression-c -> expression-s ">=" expression-s
				NonterminalExpressionC_Comparison *n=new NonterminalExpressionC_Comparison;
				
				n->left=(NonterminalExpressionS *)symbol_stack[rule_start];
				n->comparison_operator=(Terminal *)symbol_stack[rule_start+1];
				n->right=(NonterminalExpressionS *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 35: {	// expression-c -> expression-s "==" expression-s
				NonterminalExpressionC_Comparison *n=new NonterminalExpressionC_Comparison;
				
				n->left=(NonterminalExpressionS *)symbol_stack[rule_start];
				n->comparison_operator=(Terminal *)symbol_stack[rule_start+1];
				n->right=(NonterminalExpressionS *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 36: {	// expression-c -> expression-s "!=" expression-s
				NonterminalExpressionC_Comparison *n=new NonterminalExpressionC_Comparison;
				
				n->left=(NonterminalExpressionS *)symbol_stack[rule_start];
				n->comparison_operator=(Terminal *)symbol_stack[rule_start+1];
				n->right=(NonterminalExpressionS *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 37: {	// expression-c -> expression-s "in" id
				NonterminalExpressionC_In *n=new NonterminalExpressionC_In;
				
				n->c=(NonterminalExpressionS *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->symbol=(TerminalId *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 38: {	// expression-c -> expression-c "|" expression-c
				NonterminalExpressionC_Disjunction *n=new NonterminalExpressionC_Disjunction;
				
				n->expr1=(NonterminalExpressionC *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->expr2=(NonterminalExpressionC *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 39: {	// expression-c -> expression-c "&" expression-c
				NonterminalExpressionC_Conjunction *n=new NonterminalExpressionC_Conjunction;
				
				n->expr1=(NonterminalExpressionC *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->expr2=(NonterminalExpressionC *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 40: {	// expression-c -> "~" expression-c
				NonterminalExpressionC_Complement *n=new NonterminalExpressionC_Complement;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->expr=(NonterminalExpressionC *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 41: {	// expression-c -> "(" expression-c ")"
				NonterminalExpressionC_InParentheses *n=new NonterminalExpressionC_InParentheses;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->expr=(NonterminalExpressionC *)symbol_stack[rule_start+1];
				garbage.push_back(symbol_stack[rule_start+2]);
				
				new_symbol=n;
				} break;
			case 42: {	// expression-c -> "true"
				NonterminalExpressionC_Constant *n=new NonterminalExpressionC_Constant;
				
				n->true_or_false=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 43: {	// expression-c -> "false"
				NonterminalExpressionC_Constant *n=new NonterminalExpressionC_Constant;
				
				n->true_or_false=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 44: {	// pair-of-expressions -> expression
				NonterminalPairOfExpressions *n=new NonterminalPairOfExpressions;
				
				n->expr=(NonterminalExpression *)symbol_stack[rule_start];
				
				n->lookahead=NULL;
				n->not_eof=NULL;
				n->eof=NULL;
				new_symbol=n;
				} break;
			case 45: {	// pair-of-expressions -> expression "/" expression
				NonterminalPairOfExpressions *n=new NonterminalPairOfExpressions;
				
				n->expr=(NonterminalExpression *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->lookahead=(NonterminalExpression *)symbol_stack[rule_start+2];
				
				n->not_eof=NULL;
				n->eof=NULL;
				new_symbol=n;
				} break;
			case 46: {	// pair-of-expressions -> expression "/" expression "~" "eof"
				NonterminalPairOfExpressions *n=new NonterminalPairOfExpressions;
				
				n->expr=(NonterminalExpression *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->lookahead=(NonterminalExpression *)symbol_stack[rule_start+2];
				n->not_eof=(TerminalNot *)symbol_stack[rule_start+3];
				n->eof=(TerminalKwEof *)symbol_stack[rule_start+4];
				
				new_symbol=n;
				} break;
			case 47: {	// pair-of-expressions -> expression "/" expression "eof"
				NonterminalPairOfExpressions *n=new NonterminalPairOfExpressions;
				
				n->expr=(NonterminalExpression *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->lookahead=(NonterminalExpression *)symbol_stack[rule_start+2];
				n->eof=(TerminalKwEof *)symbol_stack[rule_start+3];
				
				n->not_eof=NULL;
				new_symbol=n;
				} break;
			case 48: {	// pair-of-expressions -> expression "/" "~" "eof"
				NonterminalPairOfExpressions *n=new NonterminalPairOfExpressions;
				
				n->expr=(NonterminalExpression *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->not_eof=(TerminalNot *)symbol_stack[rule_start+2];
				n->eof=(TerminalKwEof *)symbol_stack[rule_start+3];
				
				n->lookahead=NULL;
				new_symbol=n;
				} break;
			case 49: {	// pair-of-expressions -> expression "/" "eof"
				NonterminalPairOfExpressions *n=new NonterminalPairOfExpressions;
				
				n->expr=(NonterminalExpression *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->eof=(TerminalKwEof *)symbol_stack[rule_start+2];
				
				n->lookahead=NULL;
				n->not_eof=NULL;
				new_symbol=n;
				} break;
			case 50: {	// start-conditions-expression -> start-conditions-expression-IteratorI
				NonterminalStartConditionsExpressionList *n=new NonterminalStartConditionsExpressionList;
				
				NonterminalStartConditionsExpression::IteratorI *it2_i=(NonterminalStartConditionsExpression::IteratorI *)symbol_stack[rule_start];
				for(int i=0; i<it2_i->body_a.size(); i++)
				{
					n->names.push_back(it2_i->body_a[i]->names);
					if(i==it2_i->body_b.size()) break;
				}
				
				new_symbol=n;
				} break;
			case 51: {	// start-conditions-expression -> "*"
				NonterminalStartConditionsExpressionAsterisk *n=new NonterminalStartConditionsExpressionAsterisk;
				
				n->a1=(TerminalLoneAsterisk *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 52: {	// action -> id ";"
				NonterminalActionReturn *n=new NonterminalActionReturn;
				
				n->return_value=(Terminal *)symbol_stack[rule_start];
				n->a6=(TerminalSemicolon *)symbol_stack[rule_start+1];
				
				n->kw=NULL;
				new_symbol=n;
				} break;
			case 53: {	// action -> str ";"
				NonterminalActionReturn *n=new NonterminalActionReturn;
				
				n->return_value=(Terminal *)symbol_stack[rule_start];
				n->a6=(TerminalSemicolon *)symbol_stack[rule_start+1];
				
				n->kw=NULL;
				new_symbol=n;
				} break;
			case 54: {	// action -> num ";"
				NonterminalActionReturn *n=new NonterminalActionReturn;
				
				n->return_value=(Terminal *)symbol_stack[rule_start];
				n->a6=(TerminalSemicolon *)symbol_stack[rule_start+1];
				
				n->kw=NULL;
				new_symbol=n;
				} break;
			case 55: {	// action -> hexnum ";"
				NonterminalActionReturn *n=new NonterminalActionReturn;
				
				n->return_value=(Terminal *)symbol_stack[rule_start];
				n->a6=(TerminalSemicolon *)symbol_stack[rule_start+1];
				
				n->kw=NULL;
				new_symbol=n;
				} break;
			case 56: {	// action -> cpp-code
				NonterminalActionCodeII *n=new NonterminalActionCodeII;
				
				n->code=(TerminalCode *)symbol_stack[rule_start];
				
				n->semicolon=NULL;
				new_symbol=n;
				} break;
			case 57: {	// action -> cpp-code ";"
				NonterminalActionCodeII *n=new NonterminalActionCodeII;
				
				n->code=(TerminalCode *)symbol_stack[rule_start];
				n->semicolon=(TerminalSemicolon *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 58: {	// action -> "return" id ";"
				NonterminalActionReturn *n=new NonterminalActionReturn;
				
				n->kw=(TerminalKwReturn *)symbol_stack[rule_start];
				n->return_value=(Terminal *)symbol_stack[rule_start+1];
				n->a6=(TerminalSemicolon *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 59: {	// action -> "return" str ";"
				NonterminalActionReturn *n=new NonterminalActionReturn;
				
				n->kw=(TerminalKwReturn *)symbol_stack[rule_start];
				n->return_value=(Terminal *)symbol_stack[rule_start+1];
				n->a6=(TerminalSemicolon *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 60: {	// action -> "return" num ";"
				NonterminalActionReturn *n=new NonterminalActionReturn;
				
				n->kw=(TerminalKwReturn *)symbol_stack[rule_start];
				n->return_value=(Terminal *)symbol_stack[rule_start+1];
				n->a6=(TerminalSemicolon *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 61: {	// action -> "return" hexnum ";"
				NonterminalActionReturn *n=new NonterminalActionReturn;
				
				n->kw=(TerminalKwReturn *)symbol_stack[rule_start];
				n->return_value=(Terminal *)symbol_stack[rule_start+1];
				n->a6=(TerminalSemicolon *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 62: {	// action -> "skip" ";"
				NonterminalActionSkip *n=new NonterminalActionSkip;
				
				n->kw=(TerminalKwSkip *)symbol_stack[rule_start];
				n->a2=(TerminalSemicolon *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 63: {	// S-BodyI -> rule-statement
				NonterminalS::BodyI *body_n=new NonterminalS::BodyI;
				
				body_n->statements=(Nonterminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 64: {	// S-BodyI -> action-statement
				NonterminalS::BodyI *body_n=new NonterminalS::BodyI;
				
				body_n->statements=(Nonterminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 65: {	// S-BodyI -> start-conditions-statement
				NonterminalS::BodyI *body_n=new NonterminalS::BodyI;
				
				body_n->statements=(Nonterminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 66: {	// S-BodyI -> option-statement
				NonterminalS::BodyI *body_n=new NonterminalS::BodyI;
				
				body_n->statements=(Nonterminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 67: {	// S-BodyI -> invalid-statement
				NonterminalS::BodyI *body_n=new NonterminalS::BodyI;
				
				body_n->statements=(Nonterminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 68: {	// S-IteratorI -> S-BodyI
				NonterminalS::IteratorI *it=new NonterminalS::IteratorI;
				it->body.push_back((NonterminalS::BodyI *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 69: {	// S-IteratorI -> S-IteratorI S-BodyI
				NonterminalS::IteratorI *it=(NonterminalS::IteratorI *)symbol_stack[rule_start];
				it->body.push_back((NonterminalS::BodyI *)symbol_stack[rule_start+1]);
				new_symbol=it;
				} break;
			case 70: {	// start-conditions-statement-BodyIa -> id
				NonterminalStartConditionsStatement::BodyIa *body_n=new NonterminalStartConditionsStatement::BodyIa;
				
				body_n->names=(TerminalId *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 71: {	// start-conditions-statement-BodyIb -> ","
				NonterminalStartConditionsStatement::BodyIb *body_n=new NonterminalStartConditionsStatement::BodyIb;
				
				garbage.push_back(symbol_stack[rule_start]);
				
				new_symbol=body_n;
				} break;
			case 72: {	// start-conditions-statement-IteratorI -> start-conditions-statement-BodyIa
				NonterminalStartConditionsStatement::IteratorI *it=new NonterminalStartConditionsStatement::IteratorI;
				it->body_a.push_back((NonterminalStartConditionsStatement::BodyIa *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 73: {	// start-conditions-statement-IteratorI -> start-conditions-statement-IteratorI start-conditions-statement-BodyIb start-conditions-statement-BodyIa
				NonterminalStartConditionsStatement::IteratorI *it=(NonterminalStartConditionsStatement::IteratorI *)symbol_stack[rule_start];
				it->body_b.push_back((NonterminalStartConditionsStatement::BodyIb *)symbol_stack[rule_start+1]);
				it->body_a.push_back((NonterminalStartConditionsStatement::BodyIa *)symbol_stack[rule_start+2]);
				new_symbol=it;
				} break;
			case 74: {	// option-statement-BodyIa -> id
				NonterminalOptionStatement::BodyIa *body_n=new NonterminalOptionStatement::BodyIa;
				
				body_n->right=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 75: {	// option-statement-BodyIa -> str
				NonterminalOptionStatement::BodyIa *body_n=new NonterminalOptionStatement::BodyIa;
				
				body_n->right=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 76: {	// option-statement-BodyIa -> num
				NonterminalOptionStatement::BodyIa *body_n=new NonterminalOptionStatement::BodyIa;
				
				body_n->right=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 77: {	// option-statement-BodyIa -> hexnum
				NonterminalOptionStatement::BodyIa *body_n=new NonterminalOptionStatement::BodyIa;
				
				body_n->right=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 78: {	// option-statement-BodyIa -> cpp-code
				NonterminalOptionStatement::BodyIa *body_n=new NonterminalOptionStatement::BodyIa;
				
				body_n->right=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 79: {	// option-statement-BodyIa -> "true"
				NonterminalOptionStatement::BodyIa *body_n=new NonterminalOptionStatement::BodyIa;
				
				body_n->right=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 80: {	// option-statement-BodyIa -> "false"
				NonterminalOptionStatement::BodyIa *body_n=new NonterminalOptionStatement::BodyIa;
				
				body_n->right=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 81: {	// option-statement-BodyIb -> ","
				NonterminalOptionStatement::BodyIb *body_n=new NonterminalOptionStatement::BodyIb;
				
				body_n->a10=(TerminalComma *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 82: {	// option-statement-IteratorI -> option-statement-BodyIa
				NonterminalOptionStatement::IteratorI *it=new NonterminalOptionStatement::IteratorI;
				it->body_a.push_back((NonterminalOptionStatement::BodyIa *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 83: {	// option-statement-IteratorI -> option-statement-IteratorI option-statement-BodyIb option-statement-BodyIa
				NonterminalOptionStatement::IteratorI *it=(NonterminalOptionStatement::IteratorI *)symbol_stack[rule_start];
				it->body_b.push_back((NonterminalOptionStatement::BodyIb *)symbol_stack[rule_start+1]);
				it->body_a.push_back((NonterminalOptionStatement::BodyIa *)symbol_stack[rule_start+2]);
				new_symbol=it;
				} break;
			case 84: {	// start-conditions-expression-BodyIa -> id
				NonterminalStartConditionsExpression::BodyIa *body_n=new NonterminalStartConditionsExpression::BodyIa;
				
				body_n->names=(TerminalId *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 85: {	// start-conditions-expression-BodyIb -> ","
				NonterminalStartConditionsExpression::BodyIb *body_n=new NonterminalStartConditionsExpression::BodyIb;
				
				garbage.push_back(symbol_stack[rule_start]);
				
				new_symbol=body_n;
				} break;
			case 86: {	// start-conditions-expression-IteratorI -> start-conditions-expression-BodyIa
				NonterminalStartConditionsExpression::IteratorI *it=new NonterminalStartConditionsExpression::IteratorI;
				it->body_a.push_back((NonterminalStartConditionsExpression::BodyIa *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 87: {	// start-conditions-expression-IteratorI -> start-conditions-expression-IteratorI start-conditions-expression-BodyIb start-conditions-expression-BodyIa
				NonterminalStartConditionsExpression::IteratorI *it=(NonterminalStartConditionsExpression::IteratorI *)symbol_stack[rule_start];
				it->body_b.push_back((NonterminalStartConditionsExpression::BodyIb *)symbol_stack[rule_start+1]);
				it->body_a.push_back((NonterminalStartConditionsExpression::BodyIa *)symbol_stack[rule_start+2]);
				new_symbol=it;
				} break;
			}
			
			for(int i=0; i<rule_length; i++)
			{
				symbol_stack.pop_back();
				state_stack.pop_back();
			}
			int nn=rules[rule_number].nn;
			symbol_stack.push_back(new_symbol);
			state_stack.push_back(access_goto_table(state_stack.back(), nn));
		}
		else if(lr_action.is_accept())
		{
			return dynamic_cast<NonterminalS *>(symbol_stack.back());
		}
		else
		{
			if(typeid(*input_symbol)!=typeid(TerminalError))
				report_error(cout, input_symbol);
			if(!recover_from_error())
				return NULL;
		}
	}
}

void Whale::Parser::initialize()
{
	state_stack.push_back(0);
	input_symbol=lexical_analyzer.get_token();
}

void Whale::Parser::report_error(std::ostream &os, const Terminal *t) const
{
	os << "Syntax error at ";
	t->print_location(os);
	os << ".\n";
}

bool Whale::Parser::recover_from_error()
{
	int stack_pos;
	int new_state=-1;
	int number_of_symbols_discarded=0;
	for(stack_pos=state_stack.size()-1; stack_pos>=0; stack_pos--)
	{
		int state=state_stack[stack_pos];
		LRAction lr_action=access_action_table(state, error_terminal_number);
		if(lr_action.is_shift())
		{
			new_state=lr_action.shift_state();
			break;
		}
		number_of_symbols_discarded++;
	}
	if(new_state==-1) return false;
	
	TerminalError *error_token=new TerminalError;
	error_token->line=input_symbol->line;
	error_token->column=input_symbol->column;
	
	for(unsigned int stack_pos_ii=stack_pos; stack_pos_ii<symbol_stack.size(); stack_pos_ii++)
		error_token->garbage.push_back(symbol_stack[stack_pos_ii]);
	error_token->error_position=error_token->garbage.size();
	
	for(int j=0; j<number_of_symbols_discarded; j++)
	{
		state_stack.pop_back();
		symbol_stack.pop_back();
	}
	
	// shifting error token.
	symbol_stack.push_back(error_token);
	state_stack.push_back(new_state);
	
	for(;;)
	{
		int state=state_stack.back();
		LRAction lr_action(access_action_table(state, input_symbol->number()));
		if(!lr_action.is_error()) return true;
		
		error_token->garbage.push_back(input_symbol);
		if(input_symbol->number()==eof_terminal_number) return false;
		input_symbol=lexical_analyzer.get_token();
	}
	
}

void Whale::Parser::print_stack(ostream &os) const
{
	for(int i=0; i<state_stack.size(); i++)
	{
		os << "[" << state_stack[i] << "]";
		if(i==symbol_stack.size()) break;
		os << " " << typeid(*symbol_stack[i]).name() << " ";
	}
	os << "\n";
}

ostream &Whale::print_terminal_location(ostream &os, const Terminal *t)
{
	return os << "line " << t->line << " column " << t->column;
}

const Whale::Parser::StateData Whale::Parser::states[Whale::Parser::number_of_lr_states]={
	{ false, -1, 0, -1 },
	{ true, 1, 2, 0 },
	{ true, 64, 4, 0 },
	{ true, 65, 4, 0 },
	{ true, 66, 4, 0 },
	{ true, 67, 4, 0 },
	{ true, 68, 4, 0 },
	{ false, 43, 6, 7 },
	{ false, 81, 8, 0 },
	{ false, 114, 10, 0 },
	{ true, 69, 4, 0 },
	{ false, 141, 4, 14 },
	{ true, -40, 12, 0 },
	{ false, 185, 14, 0 },
	{ true, 29, 16, 0 },
	{ true, 30, 16, 0 },
	{ true, 31, 16, 0 },
	{ false, 225, 18, 21 },
	{ false, 225, 18, 23 },
	{ false, 225, 18, 25 },
	{ true, 23, 20, 0 },
	{ true, 24, 20, 0 },
	{ true, -46, 22, 0 },
	{ true, -47, 22, 0 },
	{ true, -48, 22, 0 },
	{ false, 256, 10, 0 },
	{ false, 274, 10, 0 },
	{ true, -55, 24, 19 },
	{ false, 299, 20, 7 },
	{ true, 28, 16, 0 },
	{ false, 339, 26, 30 },
	{ false, 225, 18, 32 },
	{ false, 225, 18, 34 },
	{ true, 16, 20, 0 },
	{ true, 17, 20, 0 },
	{ false, 43, 28, 35 },
	{ false, 379, 30, 32 },
	{ false, 411, 32, 34 },
	{ true, 70, 4, 0 },
	{ true, 12, 4, 0 },
	{ false, 225, 18, 51 },
	{ false, 430, 34, 42 },
	{ false, 473, 20, 7 },
	{ false, 513, 36, 7 },
	{ false, 551, 38, 7 },
	{ false, 589, 40, 55 },
	{ false, 43, 28, 57 },
	{ false, 225, 18, 59 },
	{ false, 379, 30, 56 },
	{ false, 411, 32, 58 },
	{ false, 379, 30, 70 },
	{ false, 411, 32, 72 },
	{ true, 73, 42, 0 },
	{ false, 626, 42, 80 },
	{ true, 71, 42, 0 },
	{ false, 636, 44, 7 },
	{ false, 676, 26, 21 },
	{ true, 50, 10, 0 },
	{ false, 716, 20, 7 },
	{ false, 756, 20, 7 },
	{ true, 19, 20, 0 },
	{ true, 4, 4, 0 },
	{ true, -105, 12, 0 },
	{ true, -106, 12, 0 },
	{ true, -107, 12, 0 },
	{ true, -108, 12, 0 },
	{ false, 798, 46, 0 },
	{ false, 842, 28, 0 },
	{ true, -114, 12, 0 },
	{ true, -115, 48, 0 },
	{ true, 87, 50, 0 },
	{ false, 837, 50, 75 },
	{ true, 85, 50, 0 },
	{ true, 52, 48, 0 },
	{ false, 863, 52, 7 },
	{ true, 83, 42, 0 },
	{ false, 895, 42, 79 },
	{ true, 75, 42, 0 },
	{ true, 76, 42, 0 },
	{ true, 77, 42, 0 },
	{ true, 78, 42, 0 },
	{ true, 79, 42, 0 },
	{ true, 80, 42, 0 },
	{ true, 81, 42, 0 },
	{ true, 21, 20, 0 },
	{ true, 22, 20, 0 },
	{ false, 881, 54, 0 },
	{ false, 909, 56, 0 },
	{ false, 589, 40, 91 },
	{ false, 589, 40, 93 },
	{ true, 43, 56, 0 },
	{ true, 44, 56, 0 },
	{ true, -134, 58, 0 },
	{ false, 925, 36, 7 },
	{ true, 6, 4, 0 },
	{ true, -136, 48, 0 },
	{ true, 8, 4, 0 },
	{ true, -137, 48, 0 },
	{ true, -55, 24, 88 },
	{ true, 10, 4, 0 },
	{ true, 72, 24, 0 },
	{ false, 963, 26, 21 },
	{ true, 48, 10, 0 },
	{ true, 49, 10, 0 },
	{ true, 53, 4, 0 },
	{ true, 54, 4, 0 },
	{ true, 55, 4, 0 },
	{ true, 56, 4, 0 },
	{ true, 58, 4, 0 },
	{ true, -140, 12, 0 },
	{ true, -141, 12, 0 },
	{ true, -142, 12, 0 },
	{ true, -143, 12, 0 },
	{ true, 63, 4, 0 },
	{ true, -144, 60, 0 },
	{ true, -73, 24, 83 },
	{ true, 86, 24, 0 },
	{ true, 3, 4, 0 },
	{ false, 430, 34, 87 },
	{ true, 11, 4, 0 },
	{ true, 82, 34, 0 },
	{ false, 43, 28, 98 },
	{ false, 43, 28, 99 },
	{ false, 43, 28, 100 },
	{ false, 43, 28, 101 },
	{ false, 43, 28, 102 },
	{ false, 43, 28, 103 },
	{ true, -153, 24, 0 },
	{ false, 589, 40, 104 },
	{ false, 589, 40, 106 },
	{ true, 25, 20, 0 },
	{ true, 41, 56, 0 },
	{ false, 992, 56, 0 },
	{ false, 43, 28, 108 },
	{ true, 27, 20, 0 },
	{ true, -158, 60, 0 },
	{ true, -159, 60, 0 },
	{ true, 74, 42, 0 },
	{ true, 47, 10, 0 },
	{ true, 59, 4, 0 },
	{ true, 60, 4, 0 },
	{ true, 61, 4, 0 },
	{ true, 62, 4, 0 },
	{ false, 379, 30, 105 },
	{ true, 88, 50, 0 },
	{ true, 84, 42, 0 },
	{ true, 32, 56, 0 },
	{ true, 33, 56, 0 },
	{ true, 34, 56, 0 },
	{ true, 35, 56, 0 },
	{ true, 36, 56, 0 },
	{ true, 37, 56, 0 },
	{ true, 38, 56, 0 },
	{ false, 997, 56, 0 },
	{ true, 40, 56, 0 },
	{ true, 42, 56, 0 },
	{ true, -161, 62, 0 },
	{ false, 379, 30, 106 },
	{ false, 379, 30, 107 },
	{ true, 5, 4, 0 },
	{ true, 26, 20, 0 },
	{ true, 7, 4, 0 },
	{ true, 9, 4, 0 }
};

const Whale::Parser::RuleData Whale::Parser::rules[Whale::Parser::number_of_rules]={
	{ 0, 1 },	{ 1, 1 },	{ 2, 4 },	{ 3, 3 },
	{ 3, 6 },	{ 3, 3 },	{ 3, 6 },	{ 3, 3 },
	{ 3, 6 },	{ 4, 3 },	{ 5, 4 },	{ 6, 2 },
	{ 7, 2 },	{ 7, 3 },	{ 7, 3 },	{ 7, 2 },
	{ 7, 2 },	{ 7, 1 },	{ 7, 3 },	{ 7, 2 },
	{ 7, 3 },	{ 7, 3 },	{ 7, 1 },	{ 7, 1 },
	{ 7, 4 },	{ 7, 6 },	{ 7, 4 },	{ 8, 1 },
	{ 8, 1 },	{ 8, 1 },	{ 8, 1 },	{ 9, 3 },
	{ 9, 3 },	{ 9, 3 },	{ 9, 3 },	{ 9, 3 },
	{ 9, 3 },	{ 9, 3 },	{ 9, 3 },	{ 9, 3 },
	{ 9, 2 },	{ 9, 3 },	{ 9, 1 },	{ 9, 1 },
	{ 10, 1 },	{ 10, 3 },	{ 10, 5 },	{ 10, 4 },
	{ 10, 4 },	{ 10, 3 },	{ 11, 1 },	{ 11, 1 },
	{ 12, 2 },	{ 12, 2 },	{ 12, 2 },	{ 12, 2 },
	{ 12, 1 },	{ 12, 2 },	{ 12, 3 },	{ 12, 3 },
	{ 12, 3 },	{ 12, 3 },	{ 12, 2 },	{ 13, 1 },
	{ 13, 1 },	{ 13, 1 },	{ 13, 1 },	{ 13, 1 },
	{ 14, 1 },	{ 14, 2 },	{ 15, 1 },	{ 16, 1 },
	{ 17, 1 },	{ 17, 3 },	{ 18, 1 },	{ 18, 1 },
	{ 18, 1 },	{ 18, 1 },	{ 18, 1 },	{ 18, 1 },
	{ 18, 1 },	{ 19, 1 },	{ 20, 1 },	{ 20, 3 },
	{ 21, 1 },	{ 22, 1 },	{ 23, 1 },	{ 23, 3 }
};


const int Whale::Parser::compressed_action_table[Whale::Parser::compressed_action_table_size]={
	-13, -14, -15, -16, -17,   0,   0,   0,   0,   0,   0,   0,
	  0,   0, -18, -19,   0, -20,   0,   0,   0, -21,   0,   0,
	-22,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	-23, -24, -25,   0, -26, -27,   0,   0, -28, -30, -15, -16,
	-17,   0,   0,   0,  45,   0,   0, -31, -32, -33, -18, -19,
	  0, -20,   0, -34, -35, -21,   0,   0, -22,  45,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0, -23, -24, -25,  18,
	 18,  18,  18,   0,   0,  18,  18,   0,   0,  18,  18,  18,
	 18,  18,  18,  18,  18,  18,  18,  18,   0, -36,  18,  18,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,  18,
	 18,   0,  18, -37,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0, -38,   2, -13, -14,
	-15, -16, -17,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	-18, -19,   0, -20,   0,   0,   0, -21,   0,   0, -22,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, -23, -24,
	-25,   0, -26, -27,   0,   0, -28,  28,  28,  28,  28,   0,
	-41,  28,  28, -42,  28,  28,  28,  28,  28,  28,  28,  28,
	 28,  28,  28,  28,   0,  28,  28,  28,  28,  28,  28,  28,
	 28,   0,   0,   0,   0,   0,  28,  28,  28,  28,  28, -30,
	-15, -16, -17,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	-18, -19,   0, -20,   0,   0,   0, -21,   0,   0, -22,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, -23, -24,
	-25, -49,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0, -50, -51,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	-52,  13,  13,  13,  13,   0,   0,  13,  13,   0,   0,  13,
	 13,  13,  13,  13,  13,  13,  13, -34, -35,  13,   0,   0,
	 13,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	 13,  13,  13,   0,  13, -30, -15, -16, -17,   0,   0,   0,
	  0,   0,   0,   0,   0,   0, -57, -19,   0, -20,   0,   0,
	  0, -21,   0,   0, -22,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0, -23, -24, -25,   0, -58, -63, -64, -65,
	-66, -67,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0, -68, -69, -73,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, -74,
	-78, -79, -80, -81, -82,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0, -83, -84,  20,  20,  20,  20,   0,
	  0,  20,  20,   0,   0,  20,  20,  20,  20,  20,  20,  20,
	 20, -34, -35,  20,   0,   0,  20,  20,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,  20,  20,  20,   0,  20, -30,
	-15, -16, -17,   0,   0,   0,   0,   0,   0,   0, -32, -33,
	-18, -19, -85, -20,   0, -34, -35, -21,   0,   0, -22,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, -23, -24,
	-25, -30, -15, -16, -17,   0,   0,   0,   0,   0,   0,   0,
	-32, -33, -18, -19,   0, -20, -86, -34, -35, -21,   0,   0,
	-22,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	-23, -24, -25, -30, -15, -16, -17,   0,   0,   0,   0,   0,
	  0,   0,   0,   0, -89, -90,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0, -91, -92, -100,   0,
	  0, -101, -30, -15, -16, -17,   0,   0,   0,  46,   0,   0,
	  0, -32, -33, -102, -19,   0, -20,   0, -34, -35, -21,   0,
	  0, -22,  46,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0, -23, -24, -25,   0, -103, -30, -15, -16, -17,   0,   0,
	  0,   0,   0,   0,   0,   0,   0, -18, -19,   0, -20,   0,
	  0,   0, -21,   0,   0, -22,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0, -23, -24, -25,   0, -104, -30, -15,
	-16, -17,   0,   0,  14,  14,   0,   0,  14,  14, -33, -18,
	-19,  14, -20,  14, -34, -35, -21,   0,   0, -22,  14,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0, -23, -24, -25,
	  0,  14, -30, -15, -16, -17,   0,   0,  15,  15,   0,   0,
	 15,  15,  15, -18, -19,  15, -20,  15, -34, -35, -21,   0,
	  0, -22,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0, -23, -24, -25,   0,  15,  57,  57,  57,  57,  57,  57,
	  0,   0, -109,   0,   0,   0,   0,   0,   0,  57,  57,   0,
	 57,   0,   0,   0,  57,   0,   0,  57,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,  57,  57,  57,   0,  57,
	 57,   0,   0,  57, -110, -111, -112, -113, -117,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	 51, -30, -15, -16, -17,   0,   0, -118,   0,   0,   0,   0,
	-32, -33, -18, -19,   0, -20,   0, -34, -35, -21,   0,   0,
	-22,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	-23, -24, -25, -120,   0,   0, -121, -122, -123, -124, -125, -126,
	-127,   0,   0,   0,   0,   0,   0,   0,   0, -128, -129, -130,
	  0,   0, -131, -30, -15, -16, -17,   0,   0,   0,   0,   0,
	  0,   0, -32, -33, -18, -19, -135, -20,   0, -34, -35, -21,
	  0,   0, -22,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0, -23, -24, -25, -30, -15, -16, -17,   0,   0,   0,
	  0,   0,   0,   0,   0,   0, -18, -19,   0, -20,   0,   0,
	  0, -21,   0,   0, -22,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0, -23, -24, -25,   0, -139, -129, -130,   0,
	  0, -156,  39, -130,   0,   0,  39
};

const unsigned int Whale::Parser::compressed_action_error_map[Whale::Parser::compressed_action_error_map_size]={
	0x0245803e, 0x000026e0, 0x00000001, 0x00000000, 0x0245803f, 0x000026e0,
	0x0675f23c, 0x000000e0, 0x077ff33c, 0x000002e0, 0x04000200, 0x00000000,
	0x00000100, 0x00000000, 0xff7fffbc, 0x000003e0, 0xff7ffb3c, 0x000003e0,
	0x0245803c, 0x000000e0, 0x067ff33c, 0x000002e0, 0x00010000, 0x00000000,
	0x00000004, 0x00000000, 0x0245803c, 0x000002e0, 0x0000003c, 0x00000000,
	0x0000007c, 0x00000003, 0x00100004, 0x00000000, 0x0000007c, 0x00001800,
	0x0277e03c, 0x000000e0, 0x027de03c, 0x000000e0, 0x0001803c, 0x00001800,
	0x00000900, 0x00000000, 0x0675e23c, 0x000002e0, 0x0245813f, 0x000026e0,
	0x08000000, 0x00000000, 0x08000800, 0x00000000, 0x0275e13c, 0x000000e0,
	0xfc000000, 0x00000100, 0x00026000, 0x00000000, 0x00000800, 0x00000000,
	0x00000200, 0x00000000, 0x00020000, 0x00000000
};

const int Whale::Parser::compressed_goto_table[Whale::Parser::compressed_goto_table_size]={
	  1,   2,   3,   4,   5,   6,   7,   8,  -1,   9,  -1,  -1,
	 10,  11,  28,   8,   2,   3,   4,   5,   6,   7,   8,  -1,
	  9,  -1,  -1,  38,  42,   8,  43,   8,  44,   8,  52,  -1,
	 53,  55,   8,  58,   8,  59,   8,  60,  61,  69,  -1,  -1,
	 -1,  -1,  -1,  -1,  -1,  -1,  -1,  70,  -1,  71,  74,   8,
	 75,  -1,  76,  86,  87,  92,  93,   8,  94,  95,  -1,  -1,
	 -1,  -1,  -1,  -1,  -1,  -1,  -1,  70,  -1,  71,  96,  97,
	 -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  70,  -1,  71,
	 98, 115, 118,  86, 131,  86, 132, 137, 144, 145, 146, 147,
	148, 149, 150, 151,  86, 153,  86, 154, 156, 159, 161, 162
};
