
/* An SLR(1) parser generated by Whale */

#include "parser.h"
using namespace std;
using namespace Whale;

const char *Whale::Parser::whale_copyright_notice=
	"An SLR(1) parser generated by Whale 0.2.3 (7 March, 2001).\n"
	"(C) Alexander Okhotin <whale@aha.ru>, 1999-2001.\n"
	"(C) Vladimir Prus <ghost@cs.msu.su>, 2000-2001.\n";

NonterminalS *Whale::Parser::parse()
{
	for(;;)
	{
		int state=state_stack.back();
		LRAction lr_action=access_action_table(state, input_symbol->number());
		if(lr_action.is_shift() && input_symbol->number()!=error_terminal_number)
		{
			int new_state=lr_action.shift_state();
			symbol_stack.push_back(input_symbol);
			state_stack.push_back(new_state);
			input_symbol=lexical_analyzer.get_token();
		}
		else if(lr_action.is_reduce())
		{
			int rule_number=lr_action.reduce_rule();
			int rule_length=rules[rule_number].length;
			int rule_start=symbol_stack.size()-rule_length;
			Nonterminal *new_symbol;
			
			switch(rule_number)
			{
			case 1: {	// S -> S-IteratorI
				NonterminalS *n=new NonterminalS;
				
				NonterminalS::IteratorI *it_i=(NonterminalS::IteratorI *)symbol_stack[rule_start];
				for(int i=0; i<it_i->body.size(); i++)
				{
					n->statements.push_back(it_i->body[i]->statements);
				}
				
				new_symbol=n;
				} break;
			case 2: {	// terminal-statement -> "terminal" terminal-statement-IteratorI ";"
				NonterminalTerminalStatement *n=new NonterminalTerminalStatement;
				
				garbage.push_back(symbol_stack[rule_start]);
				NonterminalTerminalStatement::IteratorI *it2_i=(NonterminalTerminalStatement::IteratorI *)symbol_stack[rule_start+1];
				for(int i=0; i<it2_i->body_a.size(); i++)
				{
					n->names.push_back(it2_i->body_a[i]->names);
					n->types.push_back(it2_i->body_a[i]->types);
					n->external_types.push_back(it2_i->body_a[i]->external_types);
					if(i==it2_i->body_b.size()) break;
				}
				garbage.push_back(symbol_stack[rule_start+2]);
				
				new_symbol=n;
				} break;
			case 3: {	// nonterminal-statement -> "nonterminal" nonterminal-statement-IteratorI ";"
				NonterminalNonterminalStatement *n=new NonterminalNonterminalStatement;
				
				n->kw=(Terminal *)symbol_stack[rule_start];
				NonterminalNonterminalStatement::IteratorI *it2_i=(NonterminalNonterminalStatement::IteratorI *)symbol_stack[rule_start+1];
				for(int i=0; i<it2_i->body_a.size(); i++)
				{
					n->names.push_back(it2_i->body_a[i]->names);
					n->internal_types.push_back(it2_i->body_a[i]->internal_types);
					n->external_types.push_back(it2_i->body_a[i]->external_types);
					if(i==it2_i->body_b.size()) break;
				}
				garbage.push_back(symbol_stack[rule_start+2]);
				
				new_symbol=n;
				} break;
			case 4: {	// nonterminal-statement -> "external" nonterminal-statement-IteratorII ";"
				NonterminalNonterminalStatement *n=new NonterminalNonterminalStatement;
				
				n->kw=(Terminal *)symbol_stack[rule_start];
				NonterminalNonterminalStatement::IteratorII *it2_ii=(NonterminalNonterminalStatement::IteratorII *)symbol_stack[rule_start+1];
				for(int i=0; i<it2_ii->body_a.size(); i++)
				{
					n->names.push_back(it2_ii->body_a[i]->names);
					n->external_types.push_back(it2_ii->body_a[i]->external_types);
					if(i==it2_ii->body_b.size()) break;
				}
				garbage.push_back(symbol_stack[rule_start+2]);
				
				new_symbol=n;
				} break;
			case 5: {	// class-statement -> "class" type-expression ";"
				NonterminalClassStatement *n=new NonterminalClassStatement;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->expr=(NonterminalTypeExpression *)symbol_stack[rule_start+1];
				garbage.push_back(symbol_stack[rule_start+2]);
				
				new_symbol=n;
				} break;
			case 6: {	// rule-statement -> id "->" expression ";"
				NonterminalRuleStatement *n=new NonterminalRuleStatement;
				
				n->left=(TerminalId *)symbol_stack[rule_start];
				n->arrow=(TerminalArrow *)symbol_stack[rule_start+1];
				n->right=(NonterminalExpression *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				
				n->type=NULL;
				new_symbol=n;
				} break;
			case 7: {	// rule-statement -> id "(" type-expression ")" "->" expression ";"
				NonterminalRuleStatement *n=new NonterminalRuleStatement;
				
				n->left=(TerminalId *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->type=(NonterminalTypeExpression *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				n->arrow=(TerminalArrow *)symbol_stack[rule_start+4];
				n->right=(NonterminalExpression *)symbol_stack[rule_start+5];
				garbage.push_back(symbol_stack[rule_start+6]);
				
				new_symbol=n;
				} break;
			case 8: {	// precedence-statement -> "precedence" precedence-statement-IteratorI ";"
				NonterminalPrecedenceStatement *n=new NonterminalPrecedenceStatement;
				
				garbage.push_back(symbol_stack[rule_start]);
				NonterminalPrecedenceStatement::IteratorI *it2_i=(NonterminalPrecedenceStatement::IteratorI *)symbol_stack[rule_start+1];
				for(int i=0; i<it2_i->body_a.size(); i++)
				{
					n->expr.push_back(it2_i->body_a[i]->expr);
					if(i==it2_i->body_b.size()) break;
				}
				garbage.push_back(symbol_stack[rule_start+2]);
				
				new_symbol=n;
				} break;
			case 9: {	// option-statement -> id "=" option-statement-IteratorII ";"
				NonterminalOptionStatement *n=new NonterminalOptionStatement;
				
				n->left=(TerminalId *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				NonterminalOptionStatement::IteratorII *it2_ii=(NonterminalOptionStatement::IteratorII *)symbol_stack[rule_start+2];
				for(int i=0; i<it2_ii->body_a.size(); i++)
				{
					n->right.push_back(it2_ii->body_a[i]->right);
					if(i==it2_ii->body_b.size()) break;
				}
				garbage.push_back(symbol_stack[rule_start+3]);
				
				new_symbol=n;
				} break;
			case 10: {	// option-statement -> id "[" option-statement-IteratorI "]" "=" option-statement-IteratorII ";"
				NonterminalOptionStatement *n=new NonterminalOptionStatement;
				
				n->left=(TerminalId *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				NonterminalOptionStatement::IteratorI *it2_i=(NonterminalOptionStatement::IteratorI *)symbol_stack[rule_start+2];
				for(int i=0; i<it2_i->body_a.size(); i++)
				{
					n->middle.push_back(it2_i->body_a[i]->middle);
					if(i==it2_i->body_b.size()) break;
				}
				garbage.push_back(symbol_stack[rule_start+3]);
				garbage.push_back(symbol_stack[rule_start+4]);
				NonterminalOptionStatement::IteratorII *it2_ii=(NonterminalOptionStatement::IteratorII *)symbol_stack[rule_start+5];
				for(int i=0; i<it2_ii->body_a.size(); i++)
				{
					n->right.push_back(it2_ii->body_a[i]->right);
					if(i==it2_ii->body_b.size()) break;
				}
				garbage.push_back(symbol_stack[rule_start+6]);
				
				new_symbol=n;
				} break;
			case 11: {	// invalid-statement -> error ";"
				NonterminalInvalidStatement *n=new NonterminalInvalidStatement;
				
				garbage.push_back(symbol_stack[rule_start]);
				garbage.push_back(symbol_stack[rule_start+1]);
				
				new_symbol=n;
				} break;
			case 12: {	// type-expression -> id
				NonterminalTypeExpression *n=new NonterminalTypeExpression;
				
				n->name=(TerminalId *)symbol_stack[rule_start];
				
				n->base_name=NULL;
				new_symbol=n;
				} break;
			case 13: {	// type-expression -> id ":" id
				NonterminalTypeExpression *n=new NonterminalTypeExpression;
				
				n->name=(TerminalId *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->base_name=(TerminalId *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 14: {	// external-type-expression -> id exttype-expr-1
				NonterminalExternalTypeExpression *n=new NonterminalExternalTypeExpression;
				
				n->id=(TerminalId *)symbol_stack[rule_start];
				n->expr1=(NonterminalExternalTypeExpressionOne *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 15: {	// external-type-expression -> id "<" external-type-expression-IteratorI ">" exttype-expr-1
				NonterminalExternalTypeExpression *n=new NonterminalExternalTypeExpression;
				
				n->id=(TerminalId *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				NonterminalExternalTypeExpression::IteratorI *it2_i=(NonterminalExternalTypeExpression::IteratorI *)symbol_stack[rule_start+2];
				for(int i=0; i<it2_i->body_a.size(); i++)
				{
					n->template_arguments.push_back(it2_i->body_a[i]->template_arguments);
					if(i==it2_i->body_b.size()) break;
				}
				garbage.push_back(symbol_stack[rule_start+3]);
				n->expr1=(NonterminalExternalTypeExpressionOne *)symbol_stack[rule_start+4];
				
				new_symbol=n;
				} break;
			case 16: {	// exttype-expr-1 -> e
				NonterminalExternalTypeExpressionOneI *n=new NonterminalExternalTypeExpressionOneI;
				n->ampersand=NULL;
				new_symbol=n;
				} break;
			case 17: {	// exttype-expr-1 -> exttype-expr-1-IteratorI
				NonterminalExternalTypeExpressionOneI *n=new NonterminalExternalTypeExpressionOneI;
				
				NonterminalExternalTypeExpressionOne::IteratorI *it_i=(NonterminalExternalTypeExpressionOne::IteratorI *)symbol_stack[rule_start];
				for(int i=0; i<it_i->body.size(); i++)
				{
					n->asterisks.push_back(it_i->body[i]->asterisks);
				}
				
				n->ampersand=NULL;
				new_symbol=n;
				} break;
			case 18: {	// exttype-expr-1 -> exttype-expr-1-IteratorI "&"
				NonterminalExternalTypeExpressionOneI *n=new NonterminalExternalTypeExpressionOneI;
				
				NonterminalExternalTypeExpressionOne::IteratorI *it_i=(NonterminalExternalTypeExpressionOne::IteratorI *)symbol_stack[rule_start];
				for(int i=0; i<it_i->body.size(); i++)
				{
					n->asterisks.push_back(it_i->body[i]->asterisks);
				}
				n->ampersand=(TerminalAnd *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 19: {	// exttype-expr-1 -> "::" external-type-expression
				NonterminalExternalTypeExpressionOneII *n=new NonterminalExternalTypeExpressionOneII;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->expr=(NonterminalExternalTypeExpression *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 20: {	// exttype-expr-1 -> "&"
				NonterminalExternalTypeExpressionOneI *n=new NonterminalExternalTypeExpressionOneI;
				
				n->ampersand=(TerminalAnd *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 21: {	// member-expression -> id
				NonterminalMemberExpressionInternal *n=new NonterminalMemberExpressionInternal;
				
				n->name=(TerminalId *)symbol_stack[rule_start];
				
				n->scope=NULL;
				new_symbol=n;
				} break;
			case 22: {	// member-expression -> id "::" id
				NonterminalMemberExpressionInternal *n=new NonterminalMemberExpressionInternal;
				
				n->scope=(TerminalId *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->name=(TerminalId *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 23: {	// member-expression -> "(" external-type-expression id "::" id ")"
				NonterminalMemberExpressionExternal *n=new NonterminalMemberExpressionExternal;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->type=(NonterminalExternalTypeExpression *)symbol_stack[rule_start+1];
				n->scope=(TerminalId *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				n->name=(TerminalId *)symbol_stack[rule_start+4];
				garbage.push_back(symbol_stack[rule_start+5]);
				
				new_symbol=n;
				} break;
			case 24: {	// member-expression -> "(" external-type-expression id ")"
				NonterminalMemberExpressionExternal *n=new NonterminalMemberExpressionExternal;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->type=(NonterminalExternalTypeExpression *)symbol_stack[rule_start+1];
				n->name=(TerminalId *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				
				n->scope=NULL;
				new_symbol=n;
				} break;
			case 25: {	// member-expression -> "(" id "::" id "," external-type-expression id "::" id ")"
				NonterminalMemberExpressionBoth *n=new NonterminalMemberExpressionBoth;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->scope1=(TerminalId *)symbol_stack[rule_start+1];
				garbage.push_back(symbol_stack[rule_start+2]);
				n->name1=(TerminalId *)symbol_stack[rule_start+3];
				garbage.push_back(symbol_stack[rule_start+4]);
				n->type2=(NonterminalExternalTypeExpression *)symbol_stack[rule_start+5];
				n->scope2=(TerminalId *)symbol_stack[rule_start+6];
				garbage.push_back(symbol_stack[rule_start+7]);
				n->name2=(TerminalId *)symbol_stack[rule_start+8];
				garbage.push_back(symbol_stack[rule_start+9]);
				
				new_symbol=n;
				} break;
			case 26: {	// member-expression -> "(" id "::" id "," external-type-expression id ")"
				NonterminalMemberExpressionBoth *n=new NonterminalMemberExpressionBoth;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->scope1=(TerminalId *)symbol_stack[rule_start+1];
				garbage.push_back(symbol_stack[rule_start+2]);
				n->name1=(TerminalId *)symbol_stack[rule_start+3];
				garbage.push_back(symbol_stack[rule_start+4]);
				n->type2=(NonterminalExternalTypeExpression *)symbol_stack[rule_start+5];
				n->name2=(TerminalId *)symbol_stack[rule_start+6];
				garbage.push_back(symbol_stack[rule_start+7]);
				
				n->scope2=NULL;
				new_symbol=n;
				} break;
			case 27: {	// member-expression -> "(" id "," external-type-expression id "::" id ")"
				NonterminalMemberExpressionBoth *n=new NonterminalMemberExpressionBoth;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->name1=(TerminalId *)symbol_stack[rule_start+1];
				garbage.push_back(symbol_stack[rule_start+2]);
				n->type2=(NonterminalExternalTypeExpression *)symbol_stack[rule_start+3];
				n->scope2=(TerminalId *)symbol_stack[rule_start+4];
				garbage.push_back(symbol_stack[rule_start+5]);
				n->name2=(TerminalId *)symbol_stack[rule_start+6];
				garbage.push_back(symbol_stack[rule_start+7]);
				
				n->scope1=NULL;
				new_symbol=n;
				} break;
			case 28: {	// member-expression -> "(" id "," external-type-expression id ")"
				NonterminalMemberExpressionBoth *n=new NonterminalMemberExpressionBoth;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->name1=(TerminalId *)symbol_stack[rule_start+1];
				garbage.push_back(symbol_stack[rule_start+2]);
				n->type2=(NonterminalExternalTypeExpression *)symbol_stack[rule_start+3];
				n->name2=(TerminalId *)symbol_stack[rule_start+4];
				garbage.push_back(symbol_stack[rule_start+5]);
				
				n->scope1=NULL;
				n->scope2=NULL;
				new_symbol=n;
				} break;
			case 29: {	// member-expression -> "nothing"
				NonterminalMemberExpressionNothing *n=new NonterminalMemberExpressionNothing;
				
				n->kw=(TerminalKwNothing *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 30: {	// precedence-expression -> precedence-expression-IteratorI
				NonterminalPrecedenceExpression *n=new NonterminalPrecedenceExpression;
				
				NonterminalPrecedenceExpression::IteratorI *it2_i=(NonterminalPrecedenceExpression::IteratorI *)symbol_stack[rule_start];
				for(int i=0; i<it2_i->body_a.size(); i++)
				{
					n->operands.push_back(it2_i->body_a[i]->operands);
					n->associativity.push_back(it2_i->body_a[i]->associativity);
					if(i==it2_i->body_b.size()) break;
					n->comparison_operators.push_back(it2_i->body_b[i]->comparison_operators);
				}
				
				new_symbol=n;
				} break;
			case 31: {	// expression -> expression expression
				NonterminalExpressionConcatenation *n=new NonterminalExpressionConcatenation;
				
				n->expr1=(NonterminalExpression *)symbol_stack[rule_start];
				n->expr2=(NonterminalExpression *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 32: {	// expression -> expression "=" member-expression
				NonterminalExpressionMemberName *n=new NonterminalExpressionMemberName;
				
				n->expr=(NonterminalExpression *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->expr_m=(NonterminalMemberExpression *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 33: {	// expression -> expression "|" expression
				NonterminalExpressionDisjunction *n=new NonterminalExpressionDisjunction;
				
				n->expr1=(NonterminalExpression *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->expr2=(NonterminalExpression *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 34: {	// expression -> expression "&" expression
				NonterminalExpressionConjunction *n=new NonterminalExpressionConjunction;
				
				n->expr1=(NonterminalExpression *)symbol_stack[rule_start];
				n->op=(TerminalAnd *)symbol_stack[rule_start+1];
				n->expr2=(NonterminalExpression *)symbol_stack[rule_start+2];
				
				new_symbol=n;
				} break;
			case 35: {	// expression -> expression "*"
				NonterminalExpressionIteration *n=new NonterminalExpressionIteration;
				
				n->expr=(NonterminalExpression *)symbol_stack[rule_start];
				n->sign=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 36: {	// expression -> expression "+"
				NonterminalExpressionIteration *n=new NonterminalExpressionIteration;
				
				n->expr=(NonterminalExpression *)symbol_stack[rule_start];
				n->sign=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 37: {	// expression -> id
				NonterminalExpressionSymbol *n=new NonterminalExpressionSymbol;
				
				n->symbol=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 38: {	// expression -> string
				NonterminalExpressionSymbol *n=new NonterminalExpressionSymbol;
				
				n->symbol=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 39: {	// expression -> code
				NonterminalExpressionCode *n=new NonterminalExpressionCode;
				
				n->code=(TerminalCode *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 40: {	// expression -> "~" expression
				NonterminalExpressionComplement *n=new NonterminalExpressionComplement;
				
				n->op=(TerminalNot *)symbol_stack[rule_start];
				n->expr=(NonterminalExpression *)symbol_stack[rule_start+1];
				
				new_symbol=n;
				} break;
			case 41: {	// expression -> "(" expression "/" expression ")"
				NonterminalExpressionIterationPair *n=new NonterminalExpressionIterationPair;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->expr1=(NonterminalExpression *)symbol_stack[rule_start+1];
				n->kw=(Terminal *)symbol_stack[rule_start+2];
				n->expr2=(NonterminalExpression *)symbol_stack[rule_start+3];
				garbage.push_back(symbol_stack[rule_start+4]);
				
				new_symbol=n;
				} break;
			case 42: {	// expression -> "(" expression ")"
				NonterminalExpressionInParentheses *n=new NonterminalExpressionInParentheses;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->expr=(NonterminalExpression *)symbol_stack[rule_start+1];
				garbage.push_back(symbol_stack[rule_start+2]);
				
				new_symbol=n;
				} break;
			case 43: {	// expression -> "[" expression "]"
				NonterminalExpressionOmittable *n=new NonterminalExpressionOmittable;
				
				garbage.push_back(symbol_stack[rule_start]);
				n->expr=(NonterminalExpression *)symbol_stack[rule_start+1];
				garbage.push_back(symbol_stack[rule_start+2]);
				
				new_symbol=n;
				} break;
			case 44: {	// expression -> "e"
				NonterminalExpressionEpsilon *n=new NonterminalExpressionEpsilon;
				
				garbage.push_back(symbol_stack[rule_start]);
				
				new_symbol=n;
				} break;
			case 45: {	// expression -> "iteration_pair" "(" expression "," expression ")"
				NonterminalExpressionIterationPair *n=new NonterminalExpressionIterationPair;
				
				n->kw=(Terminal *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				n->expr1=(NonterminalExpression *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				n->expr2=(NonterminalExpression *)symbol_stack[rule_start+4];
				garbage.push_back(symbol_stack[rule_start+5]);
				
				new_symbol=n;
				} break;
			case 46: {	// expression -> "create"
				NonterminalExpressionCreate *n=new NonterminalExpressionCreate;
				
				n->kw=(TerminalKwCreate *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 47: {	// expression -> "update"
				NonterminalExpressionUpdate *n=new NonterminalExpressionUpdate;
				
				n->kw=(TerminalKwUpdate *)symbol_stack[rule_start];
				
				new_symbol=n;
				} break;
			case 48: {	// expression -> "connect_up"
				NonterminalExpressionConnectUp *n=new NonterminalExpressionConnectUp;
				
				n->kw=(TerminalKwConnectUp *)symbol_stack[rule_start];
				
				new_symbol=n;
				 WhaleData::data.variables.connect_up_operators_are_used=true; 
				} break;
			case 49: {	// expression -> "precedence" "(" expression-IteratorI ")"
				NonterminalExpressionPrecedence *n=new NonterminalExpressionPrecedence;
				
				n->kw=(TerminalKwPrecedence *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				NonterminalExpression::IteratorI *it2_i=(NonterminalExpression::IteratorI *)symbol_stack[rule_start+2];
				for(int i=0; i<it2_i->body_a.size(); i++)
				{
					n->comparison_operators.push_back(it2_i->body_a[i]->comparison_operators);
					n->operands.push_back(it2_i->body_a[i]->operands);
					if(i==it2_i->body_b.size()) break;
				}
				garbage.push_back(symbol_stack[rule_start+3]);
				
				new_symbol=n;
				} break;
			case 50: {	// S-BodyI -> terminal-statement
				NonterminalS::BodyI *body_n=new NonterminalS::BodyI;
				
				body_n->statements=(Nonterminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 51: {	// S-BodyI -> nonterminal-statement
				NonterminalS::BodyI *body_n=new NonterminalS::BodyI;
				
				body_n->statements=(Nonterminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 52: {	// S-BodyI -> class-statement
				NonterminalS::BodyI *body_n=new NonterminalS::BodyI;
				
				body_n->statements=(Nonterminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 53: {	// S-BodyI -> rule-statement
				NonterminalS::BodyI *body_n=new NonterminalS::BodyI;
				
				body_n->statements=(Nonterminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 54: {	// S-BodyI -> precedence-statement
				NonterminalS::BodyI *body_n=new NonterminalS::BodyI;
				
				body_n->statements=(Nonterminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 55: {	// S-BodyI -> option-statement
				NonterminalS::BodyI *body_n=new NonterminalS::BodyI;
				
				body_n->statements=(Nonterminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 56: {	// S-BodyI -> invalid-statement
				NonterminalS::BodyI *body_n=new NonterminalS::BodyI;
				
				body_n->statements=(Nonterminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 57: {	// S-IteratorI -> S-BodyI
				NonterminalS::IteratorI *it=new NonterminalS::IteratorI;
				it->body.push_back((NonterminalS::BodyI *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 58: {	// S-IteratorI -> S-IteratorI S-BodyI
				NonterminalS::IteratorI *it=(NonterminalS::IteratorI *)symbol_stack[rule_start];
				it->body.push_back((NonterminalS::BodyI *)symbol_stack[rule_start+1]);
				new_symbol=it;
				} break;
			case 59: {	// terminal-statement-BodyIa -> id
				NonterminalTerminalStatement::BodyIa *body_n=new NonterminalTerminalStatement::BodyIa;
				
				body_n->names=(Terminal *)symbol_stack[rule_start];
				
				body_n->types=NULL;
				body_n->external_types=NULL;
				new_symbol=body_n;
				} break;
			case 60: {	// terminal-statement-BodyIa -> id "(" type-expression "," external-type-expression ")"
				NonterminalTerminalStatement::BodyIa *body_n=new NonterminalTerminalStatement::BodyIa;
				
				body_n->names=(Terminal *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				body_n->types=(NonterminalTypeExpression *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				body_n->external_types=(NonterminalExternalTypeExpression *)symbol_stack[rule_start+4];
				garbage.push_back(symbol_stack[rule_start+5]);
				
				new_symbol=body_n;
				} break;
			case 61: {	// terminal-statement-BodyIa -> id "(" type-expression ")"
				NonterminalTerminalStatement::BodyIa *body_n=new NonterminalTerminalStatement::BodyIa;
				
				body_n->names=(Terminal *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				body_n->types=(NonterminalTypeExpression *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				
				body_n->external_types=NULL;
				new_symbol=body_n;
				} break;
			case 62: {	// terminal-statement-BodyIa -> string
				NonterminalTerminalStatement::BodyIa *body_n=new NonterminalTerminalStatement::BodyIa;
				
				body_n->names=(Terminal *)symbol_stack[rule_start];
				
				body_n->types=NULL;
				body_n->external_types=NULL;
				new_symbol=body_n;
				} break;
			case 63: {	// terminal-statement-BodyIa -> string "(" type-expression "," external-type-expression ")"
				NonterminalTerminalStatement::BodyIa *body_n=new NonterminalTerminalStatement::BodyIa;
				
				body_n->names=(Terminal *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				body_n->types=(NonterminalTypeExpression *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				body_n->external_types=(NonterminalExternalTypeExpression *)symbol_stack[rule_start+4];
				garbage.push_back(symbol_stack[rule_start+5]);
				
				new_symbol=body_n;
				} break;
			case 64: {	// terminal-statement-BodyIa -> string "(" type-expression ")"
				NonterminalTerminalStatement::BodyIa *body_n=new NonterminalTerminalStatement::BodyIa;
				
				body_n->names=(Terminal *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				body_n->types=(NonterminalTypeExpression *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				
				body_n->external_types=NULL;
				new_symbol=body_n;
				} break;
			case 65: {	// terminal-statement-BodyIb -> ","
				NonterminalTerminalStatement::BodyIb *body_n=new NonterminalTerminalStatement::BodyIb;
				
				garbage.push_back(symbol_stack[rule_start]);
				
				new_symbol=body_n;
				} break;
			case 66: {	// terminal-statement-IteratorI -> terminal-statement-BodyIa
				NonterminalTerminalStatement::IteratorI *it=new NonterminalTerminalStatement::IteratorI;
				it->body_a.push_back((NonterminalTerminalStatement::BodyIa *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 67: {	// terminal-statement-IteratorI -> terminal-statement-IteratorI terminal-statement-BodyIb terminal-statement-BodyIa
				NonterminalTerminalStatement::IteratorI *it=(NonterminalTerminalStatement::IteratorI *)symbol_stack[rule_start];
				it->body_b.push_back((NonterminalTerminalStatement::BodyIb *)symbol_stack[rule_start+1]);
				it->body_a.push_back((NonterminalTerminalStatement::BodyIa *)symbol_stack[rule_start+2]);
				new_symbol=it;
				} break;
			case 68: {	// nonterminal-statement-BodyIa -> id
				NonterminalNonterminalStatement::BodyIa *body_n=new NonterminalNonterminalStatement::BodyIa;
				
				body_n->names=(TerminalId *)symbol_stack[rule_start];
				
				body_n->internal_types=NULL;
				body_n->external_types=NULL;
				new_symbol=body_n;
				} break;
			case 69: {	// nonterminal-statement-BodyIa -> id "(" type-expression "," external-type-expression ")"
				NonterminalNonterminalStatement::BodyIa *body_n=new NonterminalNonterminalStatement::BodyIa;
				
				body_n->names=(TerminalId *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				body_n->internal_types=(NonterminalTypeExpression *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				body_n->external_types=(NonterminalExternalTypeExpression *)symbol_stack[rule_start+4];
				garbage.push_back(symbol_stack[rule_start+5]);
				
				new_symbol=body_n;
				} break;
			case 70: {	// nonterminal-statement-BodyIa -> id "(" type-expression ")"
				NonterminalNonterminalStatement::BodyIa *body_n=new NonterminalNonterminalStatement::BodyIa;
				
				body_n->names=(TerminalId *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				body_n->internal_types=(NonterminalTypeExpression *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				
				body_n->external_types=NULL;
				new_symbol=body_n;
				} break;
			case 71: {	// nonterminal-statement-BodyIb -> ","
				NonterminalNonterminalStatement::BodyIb *body_n=new NonterminalNonterminalStatement::BodyIb;
				
				garbage.push_back(symbol_stack[rule_start]);
				
				new_symbol=body_n;
				} break;
			case 72: {	// nonterminal-statement-IteratorI -> nonterminal-statement-BodyIa
				NonterminalNonterminalStatement::IteratorI *it=new NonterminalNonterminalStatement::IteratorI;
				it->body_a.push_back((NonterminalNonterminalStatement::BodyIa *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 73: {	// nonterminal-statement-IteratorI -> nonterminal-statement-IteratorI nonterminal-statement-BodyIb nonterminal-statement-BodyIa
				NonterminalNonterminalStatement::IteratorI *it=(NonterminalNonterminalStatement::IteratorI *)symbol_stack[rule_start];
				it->body_b.push_back((NonterminalNonterminalStatement::BodyIb *)symbol_stack[rule_start+1]);
				it->body_a.push_back((NonterminalNonterminalStatement::BodyIa *)symbol_stack[rule_start+2]);
				new_symbol=it;
				} break;
			case 74: {	// nonterminal-statement-BodyIIa -> id
				NonterminalNonterminalStatement::BodyIIa *body_n=new NonterminalNonterminalStatement::BodyIIa;
				
				body_n->names=(TerminalId *)symbol_stack[rule_start];
				
				body_n->external_types=NULL;
				new_symbol=body_n;
				} break;
			case 75: {	// nonterminal-statement-BodyIIa -> id "(" external-type-expression ")"
				NonterminalNonterminalStatement::BodyIIa *body_n=new NonterminalNonterminalStatement::BodyIIa;
				
				body_n->names=(TerminalId *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				body_n->external_types=(NonterminalExternalTypeExpression *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				
				new_symbol=body_n;
				} break;
			case 76: {	// nonterminal-statement-BodyIIb -> ","
				NonterminalNonterminalStatement::BodyIIb *body_n=new NonterminalNonterminalStatement::BodyIIb;
				
				garbage.push_back(symbol_stack[rule_start]);
				
				new_symbol=body_n;
				} break;
			case 77: {	// nonterminal-statement-IteratorII -> nonterminal-statement-BodyIIa
				NonterminalNonterminalStatement::IteratorII *it=new NonterminalNonterminalStatement::IteratorII;
				it->body_a.push_back((NonterminalNonterminalStatement::BodyIIa *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 78: {	// nonterminal-statement-IteratorII -> nonterminal-statement-IteratorII nonterminal-statement-BodyIIb nonterminal-statement-BodyIIa
				NonterminalNonterminalStatement::IteratorII *it=(NonterminalNonterminalStatement::IteratorII *)symbol_stack[rule_start];
				it->body_b.push_back((NonterminalNonterminalStatement::BodyIIb *)symbol_stack[rule_start+1]);
				it->body_a.push_back((NonterminalNonterminalStatement::BodyIIa *)symbol_stack[rule_start+2]);
				new_symbol=it;
				} break;
			case 79: {	// precedence-statement-BodyIa -> precedence-expression
				NonterminalPrecedenceStatement::BodyIa *body_n=new NonterminalPrecedenceStatement::BodyIa;
				
				body_n->expr=(NonterminalPrecedenceExpression *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 80: {	// precedence-statement-BodyIb -> ","
				NonterminalPrecedenceStatement::BodyIb *body_n=new NonterminalPrecedenceStatement::BodyIb;
				
				garbage.push_back(symbol_stack[rule_start]);
				
				new_symbol=body_n;
				} break;
			case 81: {	// precedence-statement-IteratorI -> precedence-statement-BodyIa
				NonterminalPrecedenceStatement::IteratorI *it=new NonterminalPrecedenceStatement::IteratorI;
				it->body_a.push_back((NonterminalPrecedenceStatement::BodyIa *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 82: {	// precedence-statement-IteratorI -> precedence-statement-IteratorI precedence-statement-BodyIb precedence-statement-BodyIa
				NonterminalPrecedenceStatement::IteratorI *it=(NonterminalPrecedenceStatement::IteratorI *)symbol_stack[rule_start];
				it->body_b.push_back((NonterminalPrecedenceStatement::BodyIb *)symbol_stack[rule_start+1]);
				it->body_a.push_back((NonterminalPrecedenceStatement::BodyIa *)symbol_stack[rule_start+2]);
				new_symbol=it;
				} break;
			case 83: {	// option-statement-BodyIa -> id
				NonterminalOptionStatement::BodyIa *body_n=new NonterminalOptionStatement::BodyIa;
				
				body_n->middle=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 84: {	// option-statement-BodyIa -> string
				NonterminalOptionStatement::BodyIa *body_n=new NonterminalOptionStatement::BodyIa;
				
				body_n->middle=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 85: {	// option-statement-BodyIb -> ","
				NonterminalOptionStatement::BodyIb *body_n=new NonterminalOptionStatement::BodyIb;
				
				garbage.push_back(symbol_stack[rule_start]);
				
				new_symbol=body_n;
				} break;
			case 86: {	// option-statement-IteratorI -> option-statement-BodyIa
				NonterminalOptionStatement::IteratorI *it=new NonterminalOptionStatement::IteratorI;
				it->body_a.push_back((NonterminalOptionStatement::BodyIa *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 87: {	// option-statement-IteratorI -> option-statement-IteratorI option-statement-BodyIb option-statement-BodyIa
				NonterminalOptionStatement::IteratorI *it=(NonterminalOptionStatement::IteratorI *)symbol_stack[rule_start];
				it->body_b.push_back((NonterminalOptionStatement::BodyIb *)symbol_stack[rule_start+1]);
				it->body_a.push_back((NonterminalOptionStatement::BodyIa *)symbol_stack[rule_start+2]);
				new_symbol=it;
				} break;
			case 88: {	// option-statement-BodyIIa -> id
				NonterminalOptionStatement::BodyIIa *body_n=new NonterminalOptionStatement::BodyIIa;
				
				body_n->right=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 89: {	// option-statement-BodyIIa -> string
				NonterminalOptionStatement::BodyIIa *body_n=new NonterminalOptionStatement::BodyIIa;
				
				body_n->right=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 90: {	// option-statement-BodyIIa -> number
				NonterminalOptionStatement::BodyIIa *body_n=new NonterminalOptionStatement::BodyIIa;
				
				body_n->right=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 91: {	// option-statement-BodyIIa -> hexnum
				NonterminalOptionStatement::BodyIIa *body_n=new NonterminalOptionStatement::BodyIIa;
				
				body_n->right=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 92: {	// option-statement-BodyIIa -> code
				NonterminalOptionStatement::BodyIIa *body_n=new NonterminalOptionStatement::BodyIIa;
				
				body_n->right=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 93: {	// option-statement-BodyIIa -> "true"
				NonterminalOptionStatement::BodyIIa *body_n=new NonterminalOptionStatement::BodyIIa;
				
				body_n->right=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 94: {	// option-statement-BodyIIa -> "false"
				NonterminalOptionStatement::BodyIIa *body_n=new NonterminalOptionStatement::BodyIIa;
				
				body_n->right=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 95: {	// option-statement-BodyIIb -> ","
				NonterminalOptionStatement::BodyIIb *body_n=new NonterminalOptionStatement::BodyIIb;
				
				garbage.push_back(symbol_stack[rule_start]);
				
				new_symbol=body_n;
				} break;
			case 96: {	// option-statement-IteratorII -> option-statement-BodyIIa
				NonterminalOptionStatement::IteratorII *it=new NonterminalOptionStatement::IteratorII;
				it->body_a.push_back((NonterminalOptionStatement::BodyIIa *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 97: {	// option-statement-IteratorII -> option-statement-IteratorII option-statement-BodyIIb option-statement-BodyIIa
				NonterminalOptionStatement::IteratorII *it=(NonterminalOptionStatement::IteratorII *)symbol_stack[rule_start];
				it->body_b.push_back((NonterminalOptionStatement::BodyIIb *)symbol_stack[rule_start+1]);
				it->body_a.push_back((NonterminalOptionStatement::BodyIIa *)symbol_stack[rule_start+2]);
				new_symbol=it;
				} break;
			case 98: {	// external-type-expression-BodyIa -> external-type-expression
				NonterminalExternalTypeExpression::BodyIa *body_n=new NonterminalExternalTypeExpression::BodyIa;
				
				body_n->template_arguments=(NonterminalExternalTypeExpression *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 99: {	// external-type-expression-BodyIb -> ","
				NonterminalExternalTypeExpression::BodyIb *body_n=new NonterminalExternalTypeExpression::BodyIb;
				
				garbage.push_back(symbol_stack[rule_start]);
				
				new_symbol=body_n;
				} break;
			case 100: {	// external-type-expression-IteratorI -> external-type-expression-BodyIa
				NonterminalExternalTypeExpression::IteratorI *it=new NonterminalExternalTypeExpression::IteratorI;
				it->body_a.push_back((NonterminalExternalTypeExpression::BodyIa *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 101: {	// external-type-expression-IteratorI -> external-type-expression-IteratorI external-type-expression-BodyIb external-type-expression-BodyIa
				NonterminalExternalTypeExpression::IteratorI *it=(NonterminalExternalTypeExpression::IteratorI *)symbol_stack[rule_start];
				it->body_b.push_back((NonterminalExternalTypeExpression::BodyIb *)symbol_stack[rule_start+1]);
				it->body_a.push_back((NonterminalExternalTypeExpression::BodyIa *)symbol_stack[rule_start+2]);
				new_symbol=it;
				} break;
			case 102: {	// exttype-expr-1-BodyI -> "*"
				NonterminalExternalTypeExpressionOne::BodyI *body_n=new NonterminalExternalTypeExpressionOne::BodyI;
				
				body_n->asterisks=(TerminalAsterisk *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 103: {	// exttype-expr-1-IteratorI -> exttype-expr-1-BodyI
				NonterminalExternalTypeExpressionOne::IteratorI *it=new NonterminalExternalTypeExpressionOne::IteratorI;
				it->body.push_back((NonterminalExternalTypeExpressionOne::BodyI *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 104: {	// exttype-expr-1-IteratorI -> exttype-expr-1-IteratorI exttype-expr-1-BodyI
				NonterminalExternalTypeExpressionOne::IteratorI *it=(NonterminalExternalTypeExpressionOne::IteratorI *)symbol_stack[rule_start];
				it->body.push_back((NonterminalExternalTypeExpressionOne::BodyI *)symbol_stack[rule_start+1]);
				new_symbol=it;
				} break;
			case 105: {	// precedence-expression-BodyIa -> id
				NonterminalPrecedenceExpression::BodyIa *body_n=new NonterminalPrecedenceExpression::BodyIa;
				
				body_n->operands=(Terminal *)symbol_stack[rule_start];
				
				body_n->associativity=NULL;
				new_symbol=body_n;
				} break;
			case 106: {	// precedence-expression-BodyIa -> id "(" id ")"
				NonterminalPrecedenceExpression::BodyIa *body_n=new NonterminalPrecedenceExpression::BodyIa;
				
				body_n->operands=(Terminal *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				body_n->associativity=(TerminalId *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				
				new_symbol=body_n;
				} break;
			case 107: {	// precedence-expression-BodyIa -> string
				NonterminalPrecedenceExpression::BodyIa *body_n=new NonterminalPrecedenceExpression::BodyIa;
				
				body_n->operands=(Terminal *)symbol_stack[rule_start];
				
				body_n->associativity=NULL;
				new_symbol=body_n;
				} break;
			case 108: {	// precedence-expression-BodyIa -> string "(" id ")"
				NonterminalPrecedenceExpression::BodyIa *body_n=new NonterminalPrecedenceExpression::BodyIa;
				
				body_n->operands=(Terminal *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				body_n->associativity=(TerminalId *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				
				new_symbol=body_n;
				} break;
			case 109: {	// precedence-expression-BodyIa -> "*"
				NonterminalPrecedenceExpression::BodyIa *body_n=new NonterminalPrecedenceExpression::BodyIa;
				
				body_n->operands=(Terminal *)symbol_stack[rule_start];
				
				body_n->associativity=NULL;
				new_symbol=body_n;
				} break;
			case 110: {	// precedence-expression-BodyIa -> "*" "(" id ")"
				NonterminalPrecedenceExpression::BodyIa *body_n=new NonterminalPrecedenceExpression::BodyIa;
				
				body_n->operands=(Terminal *)symbol_stack[rule_start];
				garbage.push_back(symbol_stack[rule_start+1]);
				body_n->associativity=(TerminalId *)symbol_stack[rule_start+2];
				garbage.push_back(symbol_stack[rule_start+3]);
				
				new_symbol=body_n;
				} break;
			case 111: {	// precedence-expression-BodyIb -> "="
				NonterminalPrecedenceExpression::BodyIb *body_n=new NonterminalPrecedenceExpression::BodyIb;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 112: {	// precedence-expression-BodyIb -> "<"
				NonterminalPrecedenceExpression::BodyIb *body_n=new NonterminalPrecedenceExpression::BodyIb;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 113: {	// precedence-expression-BodyIb -> ">"
				NonterminalPrecedenceExpression::BodyIb *body_n=new NonterminalPrecedenceExpression::BodyIb;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 114: {	// precedence-expression-BodyIb -> "=="
				NonterminalPrecedenceExpression::BodyIb *body_n=new NonterminalPrecedenceExpression::BodyIb;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				
				new_symbol=body_n;
				} break;
			case 115: {	// precedence-expression-IteratorI -> precedence-expression-BodyIa
				NonterminalPrecedenceExpression::IteratorI *it=new NonterminalPrecedenceExpression::IteratorI;
				it->body_a.push_back((NonterminalPrecedenceExpression::BodyIa *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 116: {	// precedence-expression-IteratorI -> precedence-expression-IteratorI precedence-expression-BodyIb precedence-expression-BodyIa
				NonterminalPrecedenceExpression::IteratorI *it=(NonterminalPrecedenceExpression::IteratorI *)symbol_stack[rule_start];
				it->body_b.push_back((NonterminalPrecedenceExpression::BodyIb *)symbol_stack[rule_start+1]);
				it->body_a.push_back((NonterminalPrecedenceExpression::BodyIa *)symbol_stack[rule_start+2]);
				new_symbol=it;
				} break;
			case 117: {	// expression-BodyIa -> id
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->operands=(Terminal *)symbol_stack[rule_start];
				
				body_n->comparison_operators=NULL;
				new_symbol=body_n;
				} break;
			case 118: {	// expression-BodyIa -> string
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->operands=(Terminal *)symbol_stack[rule_start];
				
				body_n->comparison_operators=NULL;
				new_symbol=body_n;
				} break;
			case 119: {	// expression-BodyIa -> "=" id
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 120: {	// expression-BodyIa -> "=" string
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 121: {	// expression-BodyIa -> "=" "*"
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 122: {	// expression-BodyIa -> "*"
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->operands=(Terminal *)symbol_stack[rule_start];
				
				body_n->comparison_operators=NULL;
				new_symbol=body_n;
				} break;
			case 123: {	// expression-BodyIa -> "<" id
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 124: {	// expression-BodyIa -> "<" string
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 125: {	// expression-BodyIa -> "<" "*"
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 126: {	// expression-BodyIa -> ">" id
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 127: {	// expression-BodyIa -> ">" string
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 128: {	// expression-BodyIa -> ">" "*"
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 129: {	// expression-BodyIa -> "<=" id
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 130: {	// expression-BodyIa -> "<=" string
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 131: {	// expression-BodyIa -> "<=" "*"
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 132: {	// expression-BodyIa -> ">=" id
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 133: {	// expression-BodyIa -> ">=" string
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 134: {	// expression-BodyIa -> ">=" "*"
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 135: {	// expression-BodyIa -> "==" id
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 136: {	// expression-BodyIa -> "==" string
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 137: {	// expression-BodyIa -> "==" "*"
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 138: {	// expression-BodyIa -> "!=" id
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 139: {	// expression-BodyIa -> "!=" string
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 140: {	// expression-BodyIa -> "!=" "*"
				NonterminalExpression::BodyIa *body_n=new NonterminalExpression::BodyIa;
				
				body_n->comparison_operators=(Terminal *)symbol_stack[rule_start];
				body_n->operands=(Terminal *)symbol_stack[rule_start+1];
				
				new_symbol=body_n;
				} break;
			case 141: {	// expression-BodyIb -> ","
				NonterminalExpression::BodyIb *body_n=new NonterminalExpression::BodyIb;
				
				garbage.push_back(symbol_stack[rule_start]);
				
				new_symbol=body_n;
				} break;
			case 142: {	// expression-IteratorI -> expression-BodyIa
				NonterminalExpression::IteratorI *it=new NonterminalExpression::IteratorI;
				it->body_a.push_back((NonterminalExpression::BodyIa *)symbol_stack[rule_start]);
				new_symbol=it;
				} break;
			case 143: {	// expression-IteratorI -> expression-IteratorI expression-BodyIb expression-BodyIa
				NonterminalExpression::IteratorI *it=(NonterminalExpression::IteratorI *)symbol_stack[rule_start];
				it->body_b.push_back((NonterminalExpression::BodyIb *)symbol_stack[rule_start+1]);
				it->body_a.push_back((NonterminalExpression::BodyIa *)symbol_stack[rule_start+2]);
				new_symbol=it;
				} break;
			}
			
			for(int i=0; i<rule_length; i++)
			{
				symbol_stack.pop_back();
				state_stack.pop_back();
			}
			int nn=rules[rule_number].nn;
			symbol_stack.push_back(new_symbol);
			state_stack.push_back(access_goto_table(state_stack.back(), nn));
		}
		else if(lr_action.is_accept())
		{
			return dynamic_cast<NonterminalS *>(symbol_stack.back());
		}
		else
		{
			if(typeid(*input_symbol)!=typeid(TerminalError))
				report_error(cout, input_symbol);
			if(!recover_from_error())
				return NULL;
		}
	}
}

void Whale::Parser::initialize()
{
	state_stack.push_back(0);
	input_symbol=lexical_analyzer.get_token();
}

void Whale::Parser::report_error(std::ostream &os, const Terminal *t) const
{
	os << "Syntax error at ";
	t->print_location(os);
	os << ".\n";
}

bool Whale::Parser::recover_from_error()
{
	int stack_pos;
	int new_state=-1;
	int number_of_symbols_discarded=0;
	for(stack_pos=state_stack.size()-1; stack_pos>=0; stack_pos--)
	{
		int state=state_stack[stack_pos];
		LRAction lr_action=access_action_table(state, error_terminal_number);
		if(lr_action.is_shift())
		{
			new_state=lr_action.shift_state();
			break;
		}
		number_of_symbols_discarded++;
	}
	if(new_state==-1) return false;
	
	TerminalError *error_token=new TerminalError;
	error_token->line=input_symbol->line;
	error_token->column=input_symbol->column;
	
	for(unsigned int stack_pos_ii=stack_pos; stack_pos_ii<symbol_stack.size(); stack_pos_ii++)
		error_token->garbage.push_back(symbol_stack[stack_pos_ii]);
	error_token->error_position=error_token->garbage.size();
	
	for(int j=0; j<number_of_symbols_discarded; j++)
	{
		state_stack.pop_back();
		symbol_stack.pop_back();
	}
	
	// shifting error token.
	symbol_stack.push_back(error_token);
	state_stack.push_back(new_state);
	
	for(;;)
	{
		int state=state_stack.back();
		LRAction lr_action(access_action_table(state, input_symbol->number()));
		if(!lr_action.is_error()) return true;
		
		error_token->garbage.push_back(input_symbol);
		if(input_symbol->number()==eof_terminal_number) return false;
		input_symbol=lexical_analyzer.get_token();
	}
	
}

void Whale::Parser::print_stack(ostream &os) const
{
	for(int i=0; i<state_stack.size(); i++)
	{
		os << "[" << state_stack[i] << "]";
		if(i==symbol_stack.size()) break;
		os << " " << typeid(*symbol_stack[i]).name() << " ";
	}
	os << "\n";
}

ostream &Whale::print_terminal_location(ostream &os, const Terminal *t)
{
	return os << "line " << t->line << " column " << t->column;
}

const Whale::Parser::StateData Whale::Parser::states[Whale::Parser::number_of_lr_states]={
	{ false, -1, 0, -1 },
	{ true, 1, 2, 0 },
	{ true, 51, 4, 0 },
	{ true, 52, 4, 0 },
	{ true, 53, 4, 0 },
	{ true, 54, 4, 0 },
	{ true, 55, 4, 0 },
	{ true, 56, 4, 0 },
	{ true, 57, 4, 0 },
	{ true, 58, 4, 0 },
	{ false, 41, 4, 14 },
	{ true, -20, 6, 0 },
	{ false, 76, 8, 0 },
	{ false, 94, 10, 13 },
	{ true, -31, 12, 13 },
	{ true, -34, 12, 13 },
	{ true, -36, 12, 30 },
	{ false, 96, 14, 27 },
	{ true, 59, 4, 0 },
	{ true, 12, 4, 0 },
	{ false, 116, 16, 56 },
	{ false, 156, 18, 39 },
	{ true, -36, 12, 65 },
	{ false, 191, 10, 46 },
	{ true, 67, 20, 0 },
	{ false, 187, 20, 60 },
	{ false, 191, 22, 0 },
	{ false, 201, 22, 0 },
	{ true, 73, 20, 0 },
	{ false, 211, 20, 58 },
	{ false, 215, 22, 0 },
	{ true, 78, 20, 0 },
	{ false, 225, 20, 56 },
	{ false, 229, 22, 0 },
	{ true, -85, 6, 0 },
	{ false, 239, 24, 0 },
	{ true, 80, 20, 0 },
	{ true, 82, 20, 0 },
	{ false, 250, 20, 54 },
	{ true, 116, 26, 0 },
	{ false, 254, 26, 41 },
	{ false, 275, 28, 0 },
	{ false, 296, 28, 0 },
	{ false, 317, 28, 0 },
	{ false, 344, 30, 69 },
	{ true, 38, 32, 0 },
	{ true, 39, 32, 0 },
	{ true, 40, 32, 0 },
	{ false, 116, 16, 70 },
	{ false, 116, 16, 71 },
	{ false, 116, 16, 72 },
	{ true, 45, 32, 0 },
	{ true, -108, 34, 0 },
	{ true, 47, 32, 0 },
	{ true, 48, 32, 0 },
	{ true, 49, 32, 0 },
	{ true, -109, 34, 0 },
	{ true, 97, 20, 0 },
	{ false, 378, 20, 54 },
	{ true, 89, 20, 0 },
	{ true, 90, 20, 0 },
	{ true, 91, 20, 0 },
	{ true, 92, 20, 0 },
	{ true, 93, 20, 0 },
	{ true, 94, 20, 0 },
	{ true, 95, 20, 0 },
	{ true, -113, 36, 0 },
	{ true, 87, 38, 0 },
	{ false, 379, 38, 58 },
	{ true, 84, 38, 0 },
	{ true, 85, 38, 0 },
	{ false, 94, 10, 72 },
	{ true, 3, 4, 0 },
	{ true, 66, 10, 0 },
	{ true, -36, 12, 81 },
	{ true, -36, 12, 82 },
	{ true, -31, 12, 72 },
	{ true, 4, 4, 0 },
	{ true, 72, 12, 0 },
	{ true, -36, 12, 84 },
	{ true, -34, 12, 71 },
	{ true, 5, 4, 0 },
	{ true, 77, 12, 0 },
	{ true, -124, 12, 85 },
	{ true, 6, 4, 0 },
	{ true, -125, 12, 0 },
	{ false, 96, 14, 83 },
	{ true, 9, 4, 0 },
	{ true, 81, 14, 0 },
	{ false, 96, 14, 86 },
	{ true, 112, 14, 0 },
	{ true, 113, 14, 0 },
	{ true, 114, 14, 0 },
	{ true, 115, 14, 0 },
	{ true, -128, 12, 0 },
	{ true, -129, 12, 0 },
	{ true, -130, 12, 0 },
	{ false, 398, 32, 69 },
	{ true, 7, 4, 0 },
	{ false, 438, 40, 115 },
	{ false, 116, 16, 114 },
	{ false, 116, 16, 115 },
	{ true, 36, 32, 0 },
	{ true, 37, 32, 0 },
	{ false, 471, 32, 69 },
	{ false, 511, 42, 69 },
	{ false, 551, 44, 69 },
	{ false, 116, 16, 116 },
	{ false, 591, 46, 88 },
	{ false, 156, 18, 102 },
	{ true, 10, 4, 0 },
	{ true, 96, 18, 0 },
	{ true, -154, 48, 0 },
	{ false, 191, 10, 106 },
	{ true, 86, 10, 0 },
	{ true, -156, 50, 0 },
	{ true, 68, 20, 0 },
	{ false, 610, 52, 0 },
	{ false, 618, 52, 0 },
	{ true, 74, 20, 0 },
	{ false, 626, 52, 0 },
	{ true, 79, 20, 0 },
	{ true, -163, 36, 0 },
	{ false, 643, 54, 125 },
	{ true, 14, 56, 0 },
	{ true, 83, 20, 0 },
	{ true, 117, 26, 0 },
	{ true, -171, 36, 0 },
	{ true, -172, 36, 0 },
	{ true, -173, 36, 0 },
	{ true, 33, 32, 0 },
	{ false, 667, 58, 0 },
	{ true, -176, 12, 155 },
	{ true, 30, 32, 0 },
	{ false, 707, 32, 69 },
	{ false, 747, 32, 69 },
	{ false, 116, 16, 152 },
	{ true, 43, 32, 0 },
	{ true, 44, 32, 0 },
	{ false, 787, 60, 69 },
	{ true, 143, 52, 0 },
	{ false, 818, 52, 123 },
	{ true, 118, 52, 0 },
	{ true, 119, 52, 0 },
	{ false, 835, 14, 0 },
	{ true, 123, 52, 0 },
	{ false, 855, 14, 0 },
	{ false, 875, 14, 0 },
	{ false, 895, 14, 0 },
	{ false, 915, 14, 0 },
	{ false, 935, 14, 0 },
	{ false, 955, 14, 0 },
	{ true, 98, 20, 0 },
	{ false, 116, 16, 154 },
	{ true, 88, 38, 0 },
	{ false, 156, 18, 137 },
	{ true, -124, 12, 162 },
	{ true, 62, 20, 0 },
	{ true, -124, 12, 163 },
	{ true, 65, 20, 0 },
	{ true, -124, 12, 164 },
	{ true, 71, 20, 0 },
	{ true, 76, 20, 0 },
	{ true, 15, 62, 0 },
	{ true, 104, 64, 0 },
	{ false, 975, 64, 137 },
	{ true, -124, 12, 166 },
	{ true, 21, 62, 0 },
	{ true, 103, 64, 0 },
	{ true, -124, 12, 167 },
	{ true, 107, 26, 0 },
	{ true, 109, 26, 0 },
	{ true, 111, 26, 0 },
	{ true, -214, 12, 0 },
	{ true, -215, 12, 0 },
	{ false, 999, 54, 125 },
	{ false, 1023, 66, 69 },
	{ false, 116, 16, 191 },
	{ false, 591, 46, 163 },
	{ true, 142, 46, 0 },
	{ true, 50, 32, 0 },
	{ true, 120, 52, 0 },
	{ true, 121, 52, 0 },
	{ true, 122, 52, 0 },
	{ true, 124, 52, 0 },
	{ true, 125, 52, 0 },
	{ true, 126, 52, 0 },
	{ true, 127, 52, 0 },
	{ true, 128, 52, 0 },
	{ true, 129, 52, 0 },
	{ true, 130, 52, 0 },
	{ true, 131, 52, 0 },
	{ true, 132, 52, 0 },
	{ true, 133, 52, 0 },
	{ true, 134, 52, 0 },
	{ true, 135, 52, 0 },
	{ true, 136, 52, 0 },
	{ true, 137, 52, 0 },
	{ true, 138, 52, 0 },
	{ true, 139, 52, 0 },
	{ true, 140, 52, 0 },
	{ true, 141, 52, 0 },
	{ false, 1063, 30, 69 },
	{ false, 1097, 20, 54 },
	{ true, -223, 36, 0 },
	{ true, -224, 36, 0 },
	{ true, -225, 36, 0 },
	{ true, 105, 64, 0 },
	{ true, 19, 62, 0 },
	{ true, 20, 62, 0 },
	{ true, 99, 68, 0 },
	{ true, 101, 68, 0 },
	{ false, 1098, 68, 171 },
	{ true, 23, 32, 0 },
	{ false, 1115, 70, 0 },
	{ true, -231, 12, 166 },
	{ true, -124, 12, 198 },
	{ true, 42, 32, 0 },
	{ false, 1132, 66, 69 },
	{ true, 144, 52, 0 },
	{ true, 8, 4, 0 },
	{ true, 11, 4, 0 },
	{ true, 61, 20, 0 },
	{ true, 64, 20, 0 },
	{ true, 70, 20, 0 },
	{ true, -124, 12, 199 },
	{ true, 100, 12, 0 },
	{ false, 1172, 72, 224 },
	{ true, -236, 12, 0 },
	{ true, 25, 32, 0 },
	{ false, 643, 54, 125 },
	{ true, -238, 12, 0 },
	{ true, 46, 32, 0 },
	{ true, 102, 68, 0 },
	{ true, 16, 62, 0 },
	{ true, -239, 36, 0 },
	{ true, -124, 12, 254 },
	{ false, 1189, 70, 0 },
	{ true, 24, 32, 0 },
	{ true, -243, 12, 0 },
	{ true, -244, 12, 0 },
	{ true, 29, 32, 0 },
	{ false, 1199, 70, 0 },
	{ true, -247, 36, 0 },
	{ true, -248, 12, 0 },
	{ true, 27, 32, 0 },
	{ true, 28, 32, 0 },
	{ true, -249, 36, 0 },
	{ true, 26, 32, 0 }
};

const Whale::Parser::RuleData Whale::Parser::rules[Whale::Parser::number_of_rules]={
	{ 0, 1 },	{ 1, 1 },	{ 2, 3 },	{ 3, 3 },
	{ 3, 3 },	{ 4, 3 },	{ 5, 4 },	{ 5, 7 },
	{ 6, 3 },	{ 7, 4 },	{ 7, 7 },	{ 8, 2 },
	{ 9, 1 },	{ 9, 3 },	{ 10, 2 },	{ 10, 5 },
	{ 11, 0 },	{ 11, 1 },	{ 11, 2 },	{ 11, 2 },
	{ 11, 1 },	{ 12, 1 },	{ 12, 3 },	{ 12, 6 },
	{ 12, 4 },	{ 12, 10 },	{ 12, 8 },	{ 12, 8 },
	{ 12, 6 },	{ 12, 1 },	{ 13, 1 },	{ 14, 2 },
	{ 14, 3 },	{ 14, 3 },	{ 14, 3 },	{ 14, 2 },
	{ 14, 2 },	{ 14, 1 },	{ 14, 1 },	{ 14, 1 },
	{ 14, 2 },	{ 14, 5 },	{ 14, 3 },	{ 14, 3 },
	{ 14, 1 },	{ 14, 6 },	{ 14, 1 },	{ 14, 1 },
	{ 14, 1 },	{ 14, 4 },	{ 15, 1 },	{ 15, 1 },
	{ 15, 1 },	{ 15, 1 },	{ 15, 1 },	{ 15, 1 },
	{ 15, 1 },	{ 16, 1 },	{ 16, 2 },	{ 17, 1 },
	{ 17, 6 },	{ 17, 4 },	{ 17, 1 },	{ 17, 6 },
	{ 17, 4 },	{ 18, 1 },	{ 19, 1 },	{ 19, 3 },
	{ 20, 1 },	{ 20, 6 },	{ 20, 4 },	{ 21, 1 },
	{ 22, 1 },	{ 22, 3 },	{ 23, 1 },	{ 23, 4 },
	{ 24, 1 },	{ 25, 1 },	{ 25, 3 },	{ 26, 1 },
	{ 27, 1 },	{ 28, 1 },	{ 28, 3 },	{ 29, 1 },
	{ 29, 1 },	{ 30, 1 },	{ 31, 1 },	{ 31, 3 },
	{ 32, 1 },	{ 32, 1 },	{ 32, 1 },	{ 32, 1 },
	{ 32, 1 },	{ 32, 1 },	{ 32, 1 },	{ 33, 1 },
	{ 34, 1 },	{ 34, 3 },	{ 35, 1 },	{ 36, 1 },
	{ 37, 1 },	{ 37, 3 },	{ 38, 1 },	{ 39, 1 },
	{ 39, 2 },	{ 40, 1 },	{ 40, 4 },	{ 40, 1 },
	{ 40, 4 },	{ 40, 1 },	{ 40, 4 },	{ 41, 1 },
	{ 41, 1 },	{ 41, 1 },	{ 41, 1 },	{ 42, 1 },
	{ 42, 3 },	{ 43, 1 },	{ 43, 1 },	{ 43, 2 },
	{ 43, 2 },	{ 43, 2 },	{ 43, 1 },	{ 43, 2 },
	{ 43, 2 },	{ 43, 2 },	{ 43, 2 },	{ 43, 2 },
	{ 43, 2 },	{ 43, 2 },	{ 43, 2 },	{ 43, 2 },
	{ 43, 2 },	{ 43, 2 },	{ 43, 2 },	{ 43, 2 },
	{ 43, 2 },	{ 43, 2 },	{ 43, 2 },	{ 43, 2 },
	{ 43, 2 },	{ 44, 1 },	{ 45, 1 },	{ 45, 3 }
};


const int Whale::Parser::compressed_action_table[Whale::Parser::compressed_action_table_size]={
	-12, -13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0, -14, -15, -16, -17,   0,   0,   0,
	  0,   0,   0,   0, -18,   2, -12, -13,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, -14,
	-15, -16, -17,   0,   0,   0,   0,   0,   0,   0, -18, -21,
	  0,   0, -22,   0,   0,   0,   0,   0,   0, -23,   0, -24,
	-27, -28, -42, -43,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0, -44, -46, -47,
	  0,   0, -48,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	-49, -50,   0, -51,   0,   0,   0, -52,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0, -53, -54, -55,
	-56, -57, -60, -61, -62, -63, -64,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, -65,
	-66, -70, -71, -73,   0,   0, -74,  60,   0,   0,  60,   0,
	  0,   0,   0,   0, -75,  63,   0,   0,  63,   0,   0,   0,
	  0,   0, -76, -78,   0,   0, -79,  69,   0,   0,  69,   0,
	  0,   0,   0,   0, -80, -82,   0,   0, -83,  75,   0,   0,
	 75,   0,   0,   0,   0,   0, -84,  13,   0,   0,  13,   0,
	-86,   0,   0,   0,   0,  13, -88,   0,   0, -89,  31,   0,
	-91,  31,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0, -92, -93,   0,   0, -94, 106,   0, 106, 106,   0,
	  0,   0,   0,   0, -95,   0,   0,   0,   0,   0,   0, 106,
	106,   0,   0, 106, 108,   0, 108, 108,   0,   0,   0,   0,
	  0, -96,   0,   0,   0,   0,   0,   0, 108, 108,   0,   0,
	108, 110,   0, 110, 110,   0,   0,   0,   0,   0, -97,   0,
	  0,   0,   0,   0,   0, 110, 110,   0,   0, 110, -46, -47,
	  0,   0, -48,   0, -99,   0, -100,   0,   0,   0, -101, -102,
	-49, -50,   0, -51,   0, -103, -104, -52,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0, -53, -54, -55,
	-56, -57, -111,   0,   0, -112, -115,   0,   0,   0,   0,   0,
	  0,   0,   0, -116,  32,  32,   0,   0,  32,   0,  32,   0,
	-100,  32,  32,   0,  32,  32, -49,  32,  32,  32,  32, -103,
	-104,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,  32,  32,  32,  32,  32, -132,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, -133,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0, -134,  41,  41,   0,   0,  41,   0,  41,
	  0, -100,  41,  41,   0,  41,  41,  41,  41,  41,  41,  41,
	-103, -104,  41,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,  41,  41,  41,  41,  41, -46, -47,   0,
	  0, -48,   0,   0,   0, -100,   0, -137,   0, -101, -102, -49,
	-50, -138, -51,   0, -103, -104, -52,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0, -53, -54, -55, -56,
	-57, -46, -47,   0,   0, -48,   0,   0,   0, -100,   0,   0,
	  0, -101, -102, -49, -50,   0, -51, -139, -103, -104, -52,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	-53, -54, -55, -56, -57, -143, -144,   0,   0,   0,   0,   0,
	  0, -145,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	-146,   0,   0, -147, -148, -149, -150, -151, -152, -157,   0,   0,
	  0,   0,   0,   0, -158, -159,   0,   0,   0,   0,   0,   0,
	-160, -161,   0,   0,   0,   0,   0,   0, -162,  17,   0,   0,
	  0,   0,   0,   0, -167,   0,  17,   0,   0,   0, -168,   0,
	  0,  17,   0,   0, -169,   0,   0, -170,  17,  22,  22,   0,
	  0,  22,   0,  22, -174,  22,  22,  22,   0,  22,  22,  22,
	 22,  22,  22,  22,  22,  22,  22,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,  22,  22,  22,  22,
	 22, -46, -47,   0,   0, -48,   0,  34,   0, -100,  34,  34,
	  0,  34, -102, -49, -50,  34, -51,  34, -103, -104, -52,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	-53, -54, -55, -56, -57, -46, -47,   0,   0, -48,   0,  35,
	  0, -100,  35,  35,   0,  35,  35, -49, -50,  35, -51,  35,
	-103, -104, -52,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0, -53, -54, -55, -56, -57, -46, -47,   0,
	  0, -48,   0,   0,   0, -100, -178,   0,   0, -101, -102, -49,
	-50,   0, -51,   0, -103, -104, -52,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0, -53, -54, -55, -56,
	-57, -180,   0,   0,   0,   0,   0,   0, -181, -182, -183,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0, -184, -185, -186,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	-187, -188, -189,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0, -190, -191, -192,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0, -193, -194, -195,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	-196, -197, -198,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0, -199, -200, -201,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0, -202,  18,   0,   0,   0,   0,   0,   0,
	  0,   0,  18,   0,   0,   0, -209,   0,   0,  18,   0,   0,
	-169,   0,   0,   0,  18,  17,   0,   0,   0,   0,   0,   0,
	-216,   0,  17,   0,   0,   0, -168,   0,   0,  17,   0,   0,
	-169,   0,   0, -170,  17, -46, -47,   0,   0, -48,   0,   0,
	  0, -100,   0,   0,   0, -101, -102, -49, -50, -218, -51,   0,
	-103, -104, -52,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0, -53, -54, -55, -56, -57, -46, -47,   0,
	  0, -48,   0, -221,   0, -100,   0,   0,   0, -101, -102, -49,
	-50,   0, -51,   0, -103, -104, -52,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0, -53, -54, -55, -56,
	-57, -222,   0,   0, -112, -227,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0, -228, -229,   0,   0,   0,
	  0,   0,   0,   0,   0, -230, -46, -47,   0,   0, -48,   0,
	  0,   0, -100,   0,   0,   0, -101, -102, -49, -50, -233, -51,
	  0, -103, -104, -52,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0, -53, -54, -55, -56, -57,  17,   0,
	  0,   0,   0,   0,   0, -167,   0,  17,   0,   0,   0, -168,
	  0,   0,  17,   0,   0, -169,   0,   0,   0,  17, -241,   0,
	  0,   0,   0,   0,   0,   0,   0, -242, -245,   0,   0,   0,
	  0,   0,   0,   0,   0, -246
};

const unsigned int Whale::Parser::compressed_action_error_map[Whale::Parser::compressed_action_error_map_size]={
	0xc0000006, 0x00000203, 0x00000001, 0x00000000, 0xc0000007, 0x00000203,
	0x00000100, 0x00000000, 0x000a0480, 0x00000000, 0x0000000c, 0x00000000,
	0x00000004, 0x00000000, 0x0020000c, 0x00000000, 0x008b004c, 0x000003e0,
	0x0000007c, 0x00000018, 0x00000900, 0x00000000, 0x00020900, 0x00000000,
	0x00042900, 0x00000000, 0x13000d00, 0x00000000, 0x13020d00, 0x00000000,
	0x00ebc54c, 0x000003e0, 0x00ffdd4c, 0x000003e0, 0x00020000, 0x00000000,
	0x00040000, 0x00000000, 0x00100800, 0x00000000, 0x00020004, 0x00000004,
	0x00efd44c, 0x000003e0, 0x00fbc44c, 0x000003e0, 0x3f20040c, 0x00000000,
	0x00000080, 0x00000000, 0x00000400, 0x00000000, 0x00040800, 0x00000000,
	0x03248a04, 0x00000000, 0x00040900, 0x00000000, 0x00ffdf4c, 0x000003e0,
	0x00ebcc4c, 0x000003e0, 0x02040804, 0x00000000, 0x02248804, 0x00000000,
	0x00efc44c, 0x000003e0, 0x02000800, 0x00000000, 0x00040200, 0x00000000,
	0x02248a04, 0x00000000
};

const int Whale::Parser::compressed_goto_table[Whale::Parser::compressed_goto_table_size]={
	  1,   2,   3,   4,   5,   6,   7,   8,  -1,  -1,  -1,  -1,
	 -1,  -1,   9,  10,   2,   3,   4,   5,   6,   7,   8,  -1,
	 -1,  -1,  -1,  -1,  -1,  18,  24,  -1,  25,  28,  -1,  29,
	 31,  -1,  32,  34,  36,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
	 -1,  -1,  -1,  -1,  -1,  37,  -1,  38,  -1,  -1,  -1,  -1,
	 -1,  -1,  -1,  -1,  -1,  -1,  -1,  39,  -1,  40,  44,  57,
	 -1,  58,  66,  67,  -1,  68,  71,  76,  80,  86,  89,  97,
	104, 105, 106, 109, 113, 116, 117, 118, 119, 120, 121, 122,
	 36,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
	 -1, 125,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
	 -1,  -1,  -1,  39,  -1,  40, 126, 130, 134, 135, 139, 140,
	 -1, 141, 152, 154, 163,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
	 -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
	 -1,  -1,  -1,  -1,  -1,  -1,  -1, 164, 165, 174, 176, 178,
	202,  57,  -1, 203, 204, 205, 206, 207, 209, 210,  -1,  -1,
	 -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
	 -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 211,  -1,
	212, 218, 219, 225, 231, 210,  -1,  -1,  -1,  -1,  -1,  -1,
	 -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
	 -1,  -1,  -1,  -1,  -1,  -1, 233, 234,  -1,  -1,  -1,  -1,
	 -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
	 -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 164, 165,
	239
};
