Root           ?= ../../.. ;
Location        = prog/3rdPartyLibs/fsr2 ;

TargetType      = lib ;
Target          = 3rdPartyLibs/fsr2.lib ;

include $(Root)/prog/_jBuild/defaults.jam ;

Sources =  ;

AddIncludes =
  $(Root)/$(Location)/shaders/dx12 ;

Sources += ffx_assert.cpp ;
Sources += ffx_fsr2.cpp ;
Sources += dx12/ffx_fsr2_dx12.cpp ;
SHADERS_SRC = dx12/shaders/ffx_fsr2_shaders_dx12.cpp ;
Sources += $(SHADERS_SRC) ;

# Copied from fsr2 and fsr2/dx12 CMakeLists.txt
PASS_SHADERS = ffx_fsr2_tcr_autogen_pass ;
PASS_SHADERS += ffx_fsr2_autogen_reactive_pass ;
PASS_SHADERS += ffx_fsr2_accumulate_pass ;
PASS_SHADERS += ffx_fsr2_compute_luminance_pyramid_pass ;
PASS_SHADERS += ffx_fsr2_depth_clip_pass ;
PASS_SHADERS += ffx_fsr2_lock_pass ;
PASS_SHADERS += ffx_fsr2_reconstruct_previous_depth_pass ;
PASS_SHADERS += ffx_fsr2_rcas_pass ;
FFX_SC_BASE_ARGS = -reflection -deps=gcc -DFFX_GPU=1 ;
FFX_SC_BASE_ARGS += -DFFX_FSR2_OPTION_UPSAMPLE_SAMPLERS_USE_DATA_HALF=0 ;
FFX_SC_BASE_ARGS += -DFFX_FSR2_OPTION_ACCUMULATE_SAMPLERS_USE_DATA_HALF=0 ;
FFX_SC_BASE_ARGS += -DFFX_FSR2_OPTION_REPROJECT_SAMPLERS_USE_DATA_HALF=1 ;
FFX_SC_BASE_ARGS += -DFFX_FSR2_OPTION_POSTPROCESSLOCKSTATUS_SAMPLERS_USE_DATA_HALF=0 ;
FFX_SC_BASE_ARGS += -DFFX_FSR2_OPTION_UPSAMPLE_USE_LANCZOS_TYPE=2 ;
FFX_SC_PERMUTATION_ARGS = -DFFX_FSR2_OPTION_REPROJECT_USE_LANCZOS_TYPE={0,1} ;
FFX_SC_PERMUTATION_ARGS += -DFFX_FSR2_OPTION_HDR_COLOR_INPUT={0,1} ;
FFX_SC_PERMUTATION_ARGS += -DFFX_FSR2_OPTION_LOW_RESOLUTION_MOTION_VECTORS={0,1} ;
FFX_SC_PERMUTATION_ARGS += -DFFX_FSR2_OPTION_JITTERED_MOTION_VECTORS={0,1} ;
FFX_SC_PERMUTATION_ARGS += -DFFX_FSR2_OPTION_INVERTED_DEPTH={0,1} ;
FFX_SC_PERMUTATION_ARGS += -DFFX_FSR2_OPTION_APPLY_SHARPENING={0,1} ;
FFX_SC_DX12_BASE_ARGS = -E CS -Wno-for-redefinition -Wno-ambig-lit-shift -DFFX_HLSL=1 -DFFX_HLSL_6_2=1 ;
FFX_SC_ARGS = $(FFX_SC_BASE_ARGS) $(FFX_SC_DX12_BASE_ARGS) $(FFX_SC_PERMUTATION_ARGS) ;

if ! [ GLOB $(_DEVTOOL)/FidelityFX_SC/ : * ] { exit FATAL\: \"$(_DEVTOOL)/FidelityFX_SC\" not found!  Please, update DEVTOOLS ; }
FFX_SC_EXECUTABLE = $(_DEVTOOL)/FidelityFX_SC/FidelityFX_SC.exe ;
PASS_SHADER_OUTPUT_PATH = $(Root)/$(Location)/shaders/dx12/ ;
PASS_SHADER_INPUT_PATH = $(Root)/$(Location)/shaders/ ;

actions together quietly FidelityFX_CS
{
  # $(1) used only for dependencies, since output name is generated by FidelityFX shader compiler as (value passed to parameter -name=) + _permutations.h
  call $(FFX_SC_EXECUTABLE) $(FFX_SC_ARGS) $(opt) -output=$(PASS_SHADER_OUTPUT_PATH) $(2)
}

# FidelityFX_CompileShader src : dst : params (including -name=) : target
rule FidelityFX_CompileShader
{
  local src = $(PASS_SHADER_INPUT_PATH)$(2).hlsl ;
  local dst = $(PASS_SHADER_OUTPUT_PATH)$(1)_permutations.h ;
  local target = $(4) ;
  opt on $(dst) = -name=$(1) $(3) ;
  Depends $(dst) : $(src) ;
  MakeDirectory $(dst) : $(dst:D) ;
  FidelityFX_CS  $(dst) : $(src) ;
  Includes $(target) : $(dst) ;
}

# Based on fsr2/dx12/CMakeLists.txt
for PASS_SHADER in $(PASS_SHADERS) {
  # Wave32
  FidelityFX_CompileShader $(PASS_SHADER) : $(PASS_SHADER) : -DFFX_HALF=0 -T cs_6_2 -I $(PASS_SHADER_INPUT_PATH) : $(Location)/$(SHADERS_SRC) ;
  # Wave64
  FidelityFX_CompileShader $(PASS_SHADER)_wave64 : $(PASS_SHADER) : "-DFFX_FSR2_PREFER_WAVE64=\"[WaveSize(64)]\"" -DFFX_HALF=0 -T cs_6_6 -I $(PASS_SHADER_INPUT_PATH) : $(Location)/$(SHADERS_SRC)  ;
  # Skip 16-bit permutations for the compute luminance pyramid pass
  if ( $(PASS_SHADER) != ffx_fsr2_compute_luminance_pyramid_pass )  {
    # Wave32 16-bit
    FidelityFX_CompileShader $(PASS_SHADER)_16bit : $(PASS_SHADER) : -DFFX_HALF=1 -enable-16bit-types -T cs_6_2 -I $(PASS_SHADER_INPUT_PATH) : $(Location)/$(SHADERS_SRC) ;
    # Wave64 16-bit
    FidelityFX_CompileShader $(PASS_SHADER)_wave64_16bit : $(PASS_SHADER) : "-DFFX_FSR2_PREFER_WAVE64=\"[WaveSize(64)]\"" -DFFX_HALF=1 -enable-16bit-types -T cs_6_6 -I $(PASS_SHADER_INPUT_PATH) : $(Location)/$(SHADERS_SRC) ;
  }
}

CPPopt += -DD3DX12_NO_STATE_OBJECT_HELPERS ;

include $(Root)/prog/_jBuild/build.jam ;
