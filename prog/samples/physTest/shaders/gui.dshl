include "shader_global.dshl"

float4 gui_color_mult = (1, 1, 1, 1);

shader gui_default
{
  // declaring vars
  dynamic texture tex;
  dynamic float4 viewportRect;

  dynamic int transparent = 0;
  interval transparent: transOff < 1, transOn < 2, transNonpremultiplied < 3, transAdditive;

  dynamic int hasTexture = 0;
  interval hasTexture: texOff < 1, texOn < 2, texFontL8 < 3, texFontL8v;

  dynamic int stencilMaskMode = 0;
  interval stencilMaskMode: stencilMaskOff < 1, stencilMaskBegin < 2, stencilMaskEnd;

  dynamic int fontFxType = 0;
  interval fontFxType: no < 1, shadow < 2, glow < 3, undefined;
  dynamic float fontFxScale = 0;
  interval fontFxScale: sharp < 0.01, smooth < 1.3, extraSmooth;
  dynamic float4 fontFxOfs;
  dynamic float4 fontFxColor;

  dynamic texture fontTex2;
  dynamic float4 fontTex2ofs;
  dynamic float4 fontTex2rotCCSmS = (1, 1, 0, 0);

  if (fontFxType == undefined) { dont_render; }

  // setup constants
  cull_mode = none;
  z_write = false;
  z_test = false;

  (vs) { viewport@f4 = viewportRect; }
  (ps) { gui_color_mult@f4 = gui_color_mult; }

  hlsl(ps) {
  #define RETURN_ATEST(X) { float4 __atest_res = X; clip(__atest_res.a-1.1/255.0); return __atest_res; }
  }

  if (hasTexture >= texFontL8)
  {
    blend_src = one; blend_dst = isa;
    (ps) { font@smp2d = tex; }
    if (fontFxType != no)
    {
      (vs) { fontFxOfs@f4 = fontFxOfs; }
      (ps) {
        fontFxOfs@f4 = fontFxOfs;
        fontFxColor@f4 = fontFxColor;
      }
      if (fontFxScale != sharp)
      {
        (vs) { fontFxScale@f1 = (fontFxScale); }
        if (fontFxType == glow) {
          (ps) { scales@f4 = (0.6, 0.25, 0.125, fontFxScale); }
        } else {
          (ps) { scales@f4 = (0.3, 0.25*0.6, 0.125*0.7, fontFxScale); }
        }
      }
    }
    if (fontTex2 != NULL)
    {
      (ps) {fontTex2@smp2d = fontTex2;}
      (vs) {
        fontTex2ofs@f4 = fontTex2ofs;
        fontTex2rotCCSmS@f4 = fontTex2rotCCSmS;
      }
    }
  }
  else if (transparent == transOn)
  {
    blend_src = one; blend_dst = isa;
  }
  else if (transparent == transNonpremultiplied)
  {
    blend_src = sa; blend_dst = isa;
  }
  else if (transparent == transAdditive)
  {
    blend_src = one; blend_dst = one;
  }

  //stencil mask mode
  if (stencilMaskMode == stencilMaskBegin)
  {
    stencil = true;
    stencil_func = always;
    stencil_ref = 1;
    stencil_zfail = keep;
    stencil_fail = keep;
    stencil_pass = replace;

    color_write = false;
  }
  else if (stencilMaskMode == stencilMaskEnd)
  {
    stencil = true;
    stencil_func = equal;
    stencil_ref = 1;
    stencil_zfail = keep;
    stencil_fail = keep;
    stencil_pass = keep;
  }
  else if (stencilMaskMode == stencilMaskOff)
  {
    stencil = false;
  }

  // init channels
  channel short2 pos = pos;
  channel color8 vcol = vcol;
  channel short2 tc = tc mul_4k;
  channel short2 tc[1] = tc[1];

  if (hasTexture == texOn)
  {
    (ps) { tex@smp2d = tex; }
  }

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float4 col: TEXCOORD0;
    ##if hasTexture != texOff
      float2 tc:TEXCOORD1;
    ##endif

    ##if hasTexture >= texFontL8
      ##if fontFxType != no
        float2 tc1:TEXCOORD2;
        float4 tc2:TEXCOORD3;
        ##if fontTex2 != NULL
          float2 f2_tc:TEXCOORD4;
        ##endif
      ##elif fontTex2 != NULL
        float2 f2_tc:TEXCOORD2;
      ##endif
    ##endif
    };
  }

  hlsl(vs) {
    struct VsInput
    {
      int2 pos: POSITION;
      float4 col: COLOR0;
    ##if hasTexture != texOff
      int2 tc0: TEXCOORD0;
      ##if hasTexture >= texFontL8 && fontFxType != no
      int2 tc1: TEXCOORD1;
      ##endif
    ##endif
    };


    VsOutput gui_main_vs(VsInput v)
    {
      VsOutput o;
      float2 fpos = float2(v.pos);

    ##if hasTexture >= texFontL8 && fontFxType != no
      float2 tc = v.tc0/4096.0;
      float2 tc1 = float2(v.tc1);

      float2 ofs = float2(tc1.x > 0. ? 1. : 0., tc1.y > 0. ? 1. : 0.);
      o.tc2.xy = tc - ofs * tc1 * fontFxOfs.zw;
      o.tc2.zw = o.tc2.xy + abs(tc1.xy)*fontFxOfs.zw;

      ##if fontFxScale == sharp
      float2 add = float2(0., 0.);
      ##else
      float2 add = float2(tc1.x > 0. ? 2. : -2., tc1.y > 0. ? 2. : -2.)*fontFxScale.xx;
      ##endif

      o.tc = tc + (ofs*fontFxOfs.xy + add)*fontFxOfs.zw;
      o.tc1 = tc + ((ofs-1)*fontFxOfs.xy + add)*fontFxOfs.zw;
      o.pos = float4((fpos+(ofs*fontFxOfs.xy + add)*4.)*viewport.xy+viewport.zw, 1, 1);
      o.col = v.col;

    ##else
      o.pos = float4(fpos*viewport.xy+viewport.zw, 1, 1);
      o.col = v.col;
    ##if hasTexture != texOff
      o.tc = v.tc0/4096.0;
    ##endif
    ##endif

    ##if hasTexture >= texFontL8 && fontTex2 != NULL
      float2 otc = fpos.xy + fontTex2ofs.zw;
      o.f2_tc = (otc.xy*fontTex2rotCCSmS.xy + otc.yx*fontTex2rotCCSmS.zw) * fontTex2ofs.xy;
    ##endif
      return o;
    }
  }
  compile("target_vs", "gui_main_vs");


  if (hasTexture == texOn)
  {
    hlsl(ps) {

      float4 gui_default_ps_1(VsOutput input) : SV_Target
      {
        RETURN_ATEST((tex2D(tex, input.tc)) * input.col * gui_color_mult);
      }
    }
    compile("target_ps", "gui_default_ps_1");
  }
  else if (hasTexture >= texFontL8)
  {
    hlsl(ps) {

    ##if fontFxType == no
      float4 font_draw_ps(VsOutput v): SV_Target
      {
      ##if fontTex2 != NULL
        float4 t2 = tex2D(fontTex2, v.f2_tc);
        RETURN_ATEST((float4(t2.rgb,1)*tex2D(font,v.tc).r*v.col*t2.a)*gui_color_mult);
      ##else
        RETURN_ATEST(tex2D(font,v.tc).r*v.col*gui_color_mult);
      ##endif
      }

    ##else
      float select(float4 tc_xyxy, float4 box_ltrb, float inside, float outside)
      {
      ##if hardware.ps4 || hardware.ps5
        if (tc_xyxy.x < box_ltrb.x)
          return outside;
        if (tc_xyxy.y < box_ltrb.y)
           return outside;
        if (tc_xyxy.x > box_ltrb.z)
          return outside;
        if (tc_xyxy.y > box_ltrb.w)
           return outside;
        return inside;
      ##else
        return all((tc_xyxy > box_ltrb) ? float4(1,1,0,0) : float4(0,0,1,1)) ? inside : outside;
      ##endif
      }

      half4 font_draw_ps(VsOutput v): SV_Target
      {
        half l_font = select(v.tc.xyxy, v.tc2, ((half4)tex2D(font, v.tc)).r, 0);
      ##if hasTexture == texFontL8v
        if (l_font < 0.5)
          l_font = 0;
      ##endif

        ##if fontTex2 != NULL
          half4 f_col = (half4)tex2D(fontTex2, v.f2_tc);
          f_col = half4(f_col.rgb, 1) * v.col * f_col.a;
        ##else
          float4 f_col = v.col;
        ##endif

        float l_shadow = select(v.tc1.xyxy, v.tc2, tex2D(font, v.tc1).r, 0);
      ##if fontFxScale != sharp
        float2 tc;
        float2 tcScale = fontFxOfs.zw*scales.w;
        float l_shadow2 = 0, l_shadow3 = 0;

          tc = v.tc1+float2(-0.707, -0.707)*tcScale;
          l_shadow2 += select(tc.xyxy, v.tc2, tex2D(font, tc).r, 0);
          tc = v.tc1+float2( 0.707, -0.707)*tcScale;
          l_shadow2 += select(tc.xyxy, v.tc2, tex2D(font, tc).r, 0);
          tc = v.tc1+float2(-0.707,  0.707)*tcScale;
          l_shadow2 += select(tc.xyxy, v.tc2, tex2D(font, tc).r, 0);
          tc = v.tc1+float2( 0.707,  0.707)*tcScale;
          l_shadow2 += select(tc.xyxy, v.tc2, tex2D(font, tc).r, 0);

          ##if (fontFxScale == extraSmooth)
          tc = v.tc1+float2(-2.0,    0)*tcScale;
          l_shadow3 += select(tc.xyxy, v.tc2, tex2D(font, tc).r, 0);
          tc = v.tc1+float2(   0, -2.0)*tcScale;
          l_shadow3 += select(tc.xyxy, v.tc2, tex2D(font, tc).r, 0);
          tc = v.tc1+float2( 2.0,    0)*tcScale;
          l_shadow3 += select(tc.xyxy, v.tc2, tex2D(font, tc).r, 0);
          tc = v.tc1+float2(   0,  2.0)*tcScale;
          l_shadow3 += select(tc.xyxy, v.tc2, tex2D(font, tc).r, 0);

          tc = v.tc1+float2(-1.41, -1.41)*tcScale;
          l_shadow3 += select(tc.xyxy, v.tc2, tex2D(font, tc).r, 0);
          tc = v.tc1+float2( 1.41, -1.41)*tcScale;
          l_shadow3 += select(tc.xyxy, v.tc2, tex2D(font, tc).r, 0);
          tc = v.tc1+float2(-1.41,  1.41)*tcScale;
          l_shadow3 += select(tc.xyxy, v.tc2, tex2D(font, tc).r, 0);
          tc = v.tc1+float2( 1.41,  1.41)*tcScale;
          l_shadow3 += select(tc.xyxy, v.tc2, tex2D(font, tc).r, 0);
        ##else
        l_shadow2 *= 0.5;
        ##endif

        l_shadow = saturate(l_shadow*scales.x + l_shadow2*scales.y + l_shadow3*scales.z);
      ##endif

      ##if fontTex2 != NULL
        l_shadow *= tex2D(fontTex2, v.f2_tc+v.tc1-v.tc).a;
      ##endif

      ##if hasTexture == texFontL8v
        clip(l_font+(1-l_font)*l_shadow*250-0.5);
      ##endif
        RETURN_ATEST((l_font*f_col + (1-l_font)*l_shadow*fontFxColor) * gui_color_mult);
      }
    ##endif
    }
    compile("target_ps", "font_draw_ps");
  }
  else
  {
    hlsl(ps) {
      float4 gui_default_ps_3(VsOutput input) : SV_Target
      {
        RETURN_ATEST(input.col);
      }
    }
    compile("target_ps", "gui_default_ps_3");
  }
}
