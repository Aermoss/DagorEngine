Root    ?= ../../.. ;
Location = prog/engine/ioSys ;
StrictCompile = yes ;

TargetType  = lib ;
Target      = engine/ioSys.lib ;

include $(Root)/prog/_jBuild/defaults.jam ;
Target = $(Target:S=~z$(UseZlibVer).lib) ;

Sources =
  baseIo.cpp
  fileIo.cpp
  memIo.cpp
  chainedMemIo.cpp
  ioUtils.cpp
  zlibIo.cpp
  zlibIoFatal.cpp
  zstdIo.cpp
  zstdIoFatal.cpp
  asyncIo.cpp
  asyncIoCached.cpp
  msgIo.cpp
  obsolete_cfg.cpp
  roDataBlk.cpp
  vromfsLoad.cpp
  vromfsBacked.cpp
  findFiles.cpp
  fastSeqRead.cpp
  asyncWrite.cpp
  lzmaDecIo.cpp
  lzmaEnc.cpp
  lzmaIoFatal.cpp
  brotli.cpp
;

AddIncludes =
  $(Root)/prog/engine/sharedInclude
  $(Root)/prog/3rdPartyLibs/arc/zlib-$(UseZlibVer)
  $(Root)/prog/3rdPartyLibs/arc/brotli/include
;

UseProgLibs =
  engine/ioSys/dataBlock
  3rdPartyLibs/hash
  3rdPartyLibs/arc/zlib-$(UseZlibVer)
  3rdPartyLibs/arc/zstd-1.4.5
  3rdPartyLibs/arc/lzma-9.20
  3rdPartyLibs/arc/brotli
  3rdPartyLibs/eastl
;

local oodle_ver = ;
if $(ProjectAllowsOodle) = yes && ! [ GLOB $(_DEVTOOL) : oodle.* ] { Echo OODLE is missing, ignored ; ProjectAllowsOodle = no ; }
if $(ProjectAllowsOodle) = yes {
  if $(DriverLinkage) != dynamic {
    oodle_ver = 2 9 2 ;
    if $(Platform) in linux64 { oodle_ver = 2 7 6 ; }
  } else {
    if ! $(Platform) in win32 win64 macosx linux64  { Exit DriverLinkage\=$(DriverLinkage) not compatible with Platform\=$(Platform) ; }
    oodle_ver = 2 7 6 ;
  }
}
if $(ProjectAllowsOodle) = yes && $(oodle_ver) {
  local oodle_dir = $(_DEVTOOL)/oodle.$(oodle_ver[1]).$(oodle_ver[2]) ;
  if ! [ GLOB $(oodle_dir) : oodle2_version_$(oodle_ver:J=.) ] { Exit $(oodle_dir) not found ($(oodle_ver:J=.) required), please update it from CVS ; }

  Target = $(Target:S=-oodle$(oodle_ver:J=).lib) ;
  AddIncludes += $(oodle_dir)/include ;
  Sources +=
    oodleIo.cpp
    oodleIoFatal.cpp
  ;

  switch $(Platform) {
    case win32 : AddLibs += $(oodle_dir)/static_lib/oo2core_win32.lib ;
    case win64 : AddLibs += $(oodle_dir)/static_lib/oo2core_win64.lib ;
    case macosx : AddLibs += $(oodle_dir)/lib/liboo2coremac64.a ;
    case linux64 : AddLibs += $(oodle_dir)/lib/liboo2corelinux64.a ;
    case xboxOne : AddLibs += $(oodle_dir)/static_lib/oo2core_xboxonegdk.lib ;
    case scarlett : AddLibs += $(oodle_dir)/static_lib/oo2core_xboxseriesx.lib ;
    case ps4 : AddLibs += $(oodle_dir)/lib/liboo2coreps4.a ;
    case ps5 : AddLibs += $(oodle_dir)/lib/liboo2coreps5.a ;
    case nswitch : AddLibs += $(oodle_dir)/lib/liboo2corelinuxarm64.a ;
    case android : AddLibs += $(oodle_dir)/lib/android/$(AndroidArch)/liboo2coreandroid.a ;
    case iOS : AddLibs += $(oodle_dir)/lib/ios/liboo2coreios.a ;
  }
  oodle_ver = ;
} else {
  Sources +=
    oodleIoStub.cpp
  ;
}

CPPopt = -D__B_MINICORE ;
switch $(UseZlibVer)
{
  case ng :    CPPopt += -DUSE_ZLIB_VER=0xFF0000 ;
}

include $(Root)/prog/_jBuild/build.jam ;
