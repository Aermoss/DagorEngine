// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ANYMESSAGE_IPC_MSG_H_
#define FLATBUFFERS_GENERATED_ANYMESSAGE_IPC_MSG_H_

#include "flatbuffers/flatbuffers.h"

#include "payloads_generated.h"

namespace ipc {
namespace msg {

struct AnyMessage;

enum class Payload : uint8_t {
  NONE = 0,
  Log = 1,
  MouseMove = 2,
  MouseWheel = 3,
  MouseButton = 4,
  Key = 5,
  ViewResize = 6,
  ViewUpdate = 7,
  BrowserShow = 8,
  BrowserHide = 9,
  BrowserStop = 10,
  BrowserRefresh = 11,
  BrowserInitialized = 12,
  BrowserStarted = 13,
  BrowserExited = 14,
  BrowserError = 15,
  PageStateChanged = 16,
  GoForward = 17,
  GoBack = 18,
  Go = 19,
  Paint = 20,
  BrowserClose = 21,
  WindowMethod = 22,
  WindowMethodCall = 23,
  Popup = 24,
  MIN = NONE,
  MAX = Popup
};

inline Payload (&EnumValuesPayload())[25] {
  static Payload values[] = {
    Payload::NONE,
    Payload::Log,
    Payload::MouseMove,
    Payload::MouseWheel,
    Payload::MouseButton,
    Payload::Key,
    Payload::ViewResize,
    Payload::ViewUpdate,
    Payload::BrowserShow,
    Payload::BrowserHide,
    Payload::BrowserStop,
    Payload::BrowserRefresh,
    Payload::BrowserInitialized,
    Payload::BrowserStarted,
    Payload::BrowserExited,
    Payload::BrowserError,
    Payload::PageStateChanged,
    Payload::GoForward,
    Payload::GoBack,
    Payload::Go,
    Payload::Paint,
    Payload::BrowserClose,
    Payload::WindowMethod,
    Payload::WindowMethodCall,
    Payload::Popup
  };
  return values;
}

inline const char **EnumNamesPayload() {
  static const char *names[] = {
    "NONE",
    "Log",
    "MouseMove",
    "MouseWheel",
    "MouseButton",
    "Key",
    "ViewResize",
    "ViewUpdate",
    "BrowserShow",
    "BrowserHide",
    "BrowserStop",
    "BrowserRefresh",
    "BrowserInitialized",
    "BrowserStarted",
    "BrowserExited",
    "BrowserError",
    "PageStateChanged",
    "GoForward",
    "GoBack",
    "Go",
    "Paint",
    "BrowserClose",
    "WindowMethod",
    "WindowMethodCall",
    "Popup",
    nullptr
  };
  return names;
}

inline const char *EnumNamePayload(Payload e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesPayload()[index];
}

template<typename T> struct PayloadTraits {
  static const Payload enum_value = Payload::NONE;
};

template<> struct PayloadTraits<ipc::msg::Log> {
  static const Payload enum_value = Payload::Log;
};

template<> struct PayloadTraits<ipc::msg::MouseMove> {
  static const Payload enum_value = Payload::MouseMove;
};

template<> struct PayloadTraits<ipc::msg::MouseWheel> {
  static const Payload enum_value = Payload::MouseWheel;
};

template<> struct PayloadTraits<ipc::msg::MouseButton> {
  static const Payload enum_value = Payload::MouseButton;
};

template<> struct PayloadTraits<ipc::msg::Key> {
  static const Payload enum_value = Payload::Key;
};

template<> struct PayloadTraits<ipc::msg::ViewResize> {
  static const Payload enum_value = Payload::ViewResize;
};

template<> struct PayloadTraits<ipc::msg::ViewUpdate> {
  static const Payload enum_value = Payload::ViewUpdate;
};

template<> struct PayloadTraits<ipc::msg::BrowserShow> {
  static const Payload enum_value = Payload::BrowserShow;
};

template<> struct PayloadTraits<ipc::msg::BrowserHide> {
  static const Payload enum_value = Payload::BrowserHide;
};

template<> struct PayloadTraits<ipc::msg::BrowserStop> {
  static const Payload enum_value = Payload::BrowserStop;
};

template<> struct PayloadTraits<ipc::msg::BrowserRefresh> {
  static const Payload enum_value = Payload::BrowserRefresh;
};

template<> struct PayloadTraits<ipc::msg::BrowserInitialized> {
  static const Payload enum_value = Payload::BrowserInitialized;
};

template<> struct PayloadTraits<ipc::msg::BrowserStarted> {
  static const Payload enum_value = Payload::BrowserStarted;
};

template<> struct PayloadTraits<ipc::msg::BrowserExited> {
  static const Payload enum_value = Payload::BrowserExited;
};

template<> struct PayloadTraits<ipc::msg::BrowserError> {
  static const Payload enum_value = Payload::BrowserError;
};

template<> struct PayloadTraits<ipc::msg::PageStateChanged> {
  static const Payload enum_value = Payload::PageStateChanged;
};

template<> struct PayloadTraits<ipc::msg::GoForward> {
  static const Payload enum_value = Payload::GoForward;
};

template<> struct PayloadTraits<ipc::msg::GoBack> {
  static const Payload enum_value = Payload::GoBack;
};

template<> struct PayloadTraits<ipc::msg::Go> {
  static const Payload enum_value = Payload::Go;
};

template<> struct PayloadTraits<ipc::msg::Paint> {
  static const Payload enum_value = Payload::Paint;
};

template<> struct PayloadTraits<ipc::msg::BrowserClose> {
  static const Payload enum_value = Payload::BrowserClose;
};

template<> struct PayloadTraits<ipc::msg::WindowMethod> {
  static const Payload enum_value = Payload::WindowMethod;
};

template<> struct PayloadTraits<ipc::msg::WindowMethodCall> {
  static const Payload enum_value = Payload::WindowMethodCall;
};

template<> struct PayloadTraits<ipc::msg::Popup> {
  static const Payload enum_value = Payload::Popup;
};

bool VerifyPayload(flatbuffers::Verifier &verifier, const void *obj, Payload type);
bool VerifyPayloadVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct AnyMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_BROWSERID = 4,
    VT_PAYLOAD_TYPE = 6,
    VT_PAYLOAD = 8
  };
  int32_t browserId() const {
    return GetField<int32_t>(VT_BROWSERID, 0);
  }
  Payload payload_type() const {
    return static_cast<Payload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const ipc::msg::Log *payload_as_Log() const {
    return payload_type() == Payload::Log ? static_cast<const ipc::msg::Log *>(payload()) : nullptr;
  }
  const ipc::msg::MouseMove *payload_as_MouseMove() const {
    return payload_type() == Payload::MouseMove ? static_cast<const ipc::msg::MouseMove *>(payload()) : nullptr;
  }
  const ipc::msg::MouseWheel *payload_as_MouseWheel() const {
    return payload_type() == Payload::MouseWheel ? static_cast<const ipc::msg::MouseWheel *>(payload()) : nullptr;
  }
  const ipc::msg::MouseButton *payload_as_MouseButton() const {
    return payload_type() == Payload::MouseButton ? static_cast<const ipc::msg::MouseButton *>(payload()) : nullptr;
  }
  const ipc::msg::Key *payload_as_Key() const {
    return payload_type() == Payload::Key ? static_cast<const ipc::msg::Key *>(payload()) : nullptr;
  }
  const ipc::msg::ViewResize *payload_as_ViewResize() const {
    return payload_type() == Payload::ViewResize ? static_cast<const ipc::msg::ViewResize *>(payload()) : nullptr;
  }
  const ipc::msg::ViewUpdate *payload_as_ViewUpdate() const {
    return payload_type() == Payload::ViewUpdate ? static_cast<const ipc::msg::ViewUpdate *>(payload()) : nullptr;
  }
  const ipc::msg::BrowserShow *payload_as_BrowserShow() const {
    return payload_type() == Payload::BrowserShow ? static_cast<const ipc::msg::BrowserShow *>(payload()) : nullptr;
  }
  const ipc::msg::BrowserHide *payload_as_BrowserHide() const {
    return payload_type() == Payload::BrowserHide ? static_cast<const ipc::msg::BrowserHide *>(payload()) : nullptr;
  }
  const ipc::msg::BrowserStop *payload_as_BrowserStop() const {
    return payload_type() == Payload::BrowserStop ? static_cast<const ipc::msg::BrowserStop *>(payload()) : nullptr;
  }
  const ipc::msg::BrowserRefresh *payload_as_BrowserRefresh() const {
    return payload_type() == Payload::BrowserRefresh ? static_cast<const ipc::msg::BrowserRefresh *>(payload()) : nullptr;
  }
  const ipc::msg::BrowserInitialized *payload_as_BrowserInitialized() const {
    return payload_type() == Payload::BrowserInitialized ? static_cast<const ipc::msg::BrowserInitialized *>(payload()) : nullptr;
  }
  const ipc::msg::BrowserStarted *payload_as_BrowserStarted() const {
    return payload_type() == Payload::BrowserStarted ? static_cast<const ipc::msg::BrowserStarted *>(payload()) : nullptr;
  }
  const ipc::msg::BrowserExited *payload_as_BrowserExited() const {
    return payload_type() == Payload::BrowserExited ? static_cast<const ipc::msg::BrowserExited *>(payload()) : nullptr;
  }
  const ipc::msg::BrowserError *payload_as_BrowserError() const {
    return payload_type() == Payload::BrowserError ? static_cast<const ipc::msg::BrowserError *>(payload()) : nullptr;
  }
  const ipc::msg::PageStateChanged *payload_as_PageStateChanged() const {
    return payload_type() == Payload::PageStateChanged ? static_cast<const ipc::msg::PageStateChanged *>(payload()) : nullptr;
  }
  const ipc::msg::GoForward *payload_as_GoForward() const {
    return payload_type() == Payload::GoForward ? static_cast<const ipc::msg::GoForward *>(payload()) : nullptr;
  }
  const ipc::msg::GoBack *payload_as_GoBack() const {
    return payload_type() == Payload::GoBack ? static_cast<const ipc::msg::GoBack *>(payload()) : nullptr;
  }
  const ipc::msg::Go *payload_as_Go() const {
    return payload_type() == Payload::Go ? static_cast<const ipc::msg::Go *>(payload()) : nullptr;
  }
  const ipc::msg::Paint *payload_as_Paint() const {
    return payload_type() == Payload::Paint ? static_cast<const ipc::msg::Paint *>(payload()) : nullptr;
  }
  const ipc::msg::BrowserClose *payload_as_BrowserClose() const {
    return payload_type() == Payload::BrowserClose ? static_cast<const ipc::msg::BrowserClose *>(payload()) : nullptr;
  }
  const ipc::msg::WindowMethod *payload_as_WindowMethod() const {
    return payload_type() == Payload::WindowMethod ? static_cast<const ipc::msg::WindowMethod *>(payload()) : nullptr;
  }
  const ipc::msg::WindowMethodCall *payload_as_WindowMethodCall() const {
    return payload_type() == Payload::WindowMethodCall ? static_cast<const ipc::msg::WindowMethodCall *>(payload()) : nullptr;
  }
  const ipc::msg::Popup *payload_as_Popup() const {
    return payload_type() == Payload::Popup ? static_cast<const ipc::msg::Popup *>(payload()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_BROWSERID) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE) &&
           VerifyOffsetRequired(verifier, VT_PAYLOAD) &&
           VerifyPayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const ipc::msg::Log *AnyMessage::payload_as<ipc::msg::Log>() const {
  return payload_as_Log();
}

template<> inline const ipc::msg::MouseMove *AnyMessage::payload_as<ipc::msg::MouseMove>() const {
  return payload_as_MouseMove();
}

template<> inline const ipc::msg::MouseWheel *AnyMessage::payload_as<ipc::msg::MouseWheel>() const {
  return payload_as_MouseWheel();
}

template<> inline const ipc::msg::MouseButton *AnyMessage::payload_as<ipc::msg::MouseButton>() const {
  return payload_as_MouseButton();
}

template<> inline const ipc::msg::Key *AnyMessage::payload_as<ipc::msg::Key>() const {
  return payload_as_Key();
}

template<> inline const ipc::msg::ViewResize *AnyMessage::payload_as<ipc::msg::ViewResize>() const {
  return payload_as_ViewResize();
}

template<> inline const ipc::msg::ViewUpdate *AnyMessage::payload_as<ipc::msg::ViewUpdate>() const {
  return payload_as_ViewUpdate();
}

template<> inline const ipc::msg::BrowserShow *AnyMessage::payload_as<ipc::msg::BrowserShow>() const {
  return payload_as_BrowserShow();
}

template<> inline const ipc::msg::BrowserHide *AnyMessage::payload_as<ipc::msg::BrowserHide>() const {
  return payload_as_BrowserHide();
}

template<> inline const ipc::msg::BrowserStop *AnyMessage::payload_as<ipc::msg::BrowserStop>() const {
  return payload_as_BrowserStop();
}

template<> inline const ipc::msg::BrowserRefresh *AnyMessage::payload_as<ipc::msg::BrowserRefresh>() const {
  return payload_as_BrowserRefresh();
}

template<> inline const ipc::msg::BrowserInitialized *AnyMessage::payload_as<ipc::msg::BrowserInitialized>() const {
  return payload_as_BrowserInitialized();
}

template<> inline const ipc::msg::BrowserStarted *AnyMessage::payload_as<ipc::msg::BrowserStarted>() const {
  return payload_as_BrowserStarted();
}

template<> inline const ipc::msg::BrowserExited *AnyMessage::payload_as<ipc::msg::BrowserExited>() const {
  return payload_as_BrowserExited();
}

template<> inline const ipc::msg::BrowserError *AnyMessage::payload_as<ipc::msg::BrowserError>() const {
  return payload_as_BrowserError();
}

template<> inline const ipc::msg::PageStateChanged *AnyMessage::payload_as<ipc::msg::PageStateChanged>() const {
  return payload_as_PageStateChanged();
}

template<> inline const ipc::msg::GoForward *AnyMessage::payload_as<ipc::msg::GoForward>() const {
  return payload_as_GoForward();
}

template<> inline const ipc::msg::GoBack *AnyMessage::payload_as<ipc::msg::GoBack>() const {
  return payload_as_GoBack();
}

template<> inline const ipc::msg::Go *AnyMessage::payload_as<ipc::msg::Go>() const {
  return payload_as_Go();
}

template<> inline const ipc::msg::Paint *AnyMessage::payload_as<ipc::msg::Paint>() const {
  return payload_as_Paint();
}

template<> inline const ipc::msg::BrowserClose *AnyMessage::payload_as<ipc::msg::BrowserClose>() const {
  return payload_as_BrowserClose();
}

template<> inline const ipc::msg::WindowMethod *AnyMessage::payload_as<ipc::msg::WindowMethod>() const {
  return payload_as_WindowMethod();
}

template<> inline const ipc::msg::WindowMethodCall *AnyMessage::payload_as<ipc::msg::WindowMethodCall>() const {
  return payload_as_WindowMethodCall();
}

template<> inline const ipc::msg::Popup *AnyMessage::payload_as<ipc::msg::Popup>() const {
  return payload_as_Popup();
}

struct AnyMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_browserId(int32_t browserId) {
    fbb_.AddElement<int32_t>(AnyMessage::VT_BROWSERID, browserId, 0);
  }
  void add_payload_type(Payload payload_type) {
    fbb_.AddElement<uint8_t>(AnyMessage::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(AnyMessage::VT_PAYLOAD, payload);
  }
  AnyMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AnyMessageBuilder &operator=(const AnyMessageBuilder &);
  flatbuffers::Offset<AnyMessage> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<AnyMessage>(end);
    fbb_.Required(o, AnyMessage::VT_PAYLOAD);
    return o;
  }
};

inline flatbuffers::Offset<AnyMessage> CreateAnyMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t browserId = 0,
    Payload payload_type = Payload::NONE,
    flatbuffers::Offset<void> payload = 0) {
  AnyMessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_browserId(browserId);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

inline bool VerifyPayload(flatbuffers::Verifier &verifier, const void *obj, Payload type) {
  switch (type) {
    case Payload::NONE: {
      return true;
    }
    case Payload::Log: {
      auto ptr = reinterpret_cast<const ipc::msg::Log *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::MouseMove: {
      auto ptr = reinterpret_cast<const ipc::msg::MouseMove *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::MouseWheel: {
      auto ptr = reinterpret_cast<const ipc::msg::MouseWheel *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::MouseButton: {
      auto ptr = reinterpret_cast<const ipc::msg::MouseButton *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::Key: {
      auto ptr = reinterpret_cast<const ipc::msg::Key *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::ViewResize: {
      auto ptr = reinterpret_cast<const ipc::msg::ViewResize *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::ViewUpdate: {
      auto ptr = reinterpret_cast<const ipc::msg::ViewUpdate *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::BrowserShow: {
      auto ptr = reinterpret_cast<const ipc::msg::BrowserShow *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::BrowserHide: {
      auto ptr = reinterpret_cast<const ipc::msg::BrowserHide *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::BrowserStop: {
      auto ptr = reinterpret_cast<const ipc::msg::BrowserStop *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::BrowserRefresh: {
      auto ptr = reinterpret_cast<const ipc::msg::BrowserRefresh *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::BrowserInitialized: {
      auto ptr = reinterpret_cast<const ipc::msg::BrowserInitialized *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::BrowserStarted: {
      auto ptr = reinterpret_cast<const ipc::msg::BrowserStarted *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::BrowserExited: {
      auto ptr = reinterpret_cast<const ipc::msg::BrowserExited *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::BrowserError: {
      auto ptr = reinterpret_cast<const ipc::msg::BrowserError *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::PageStateChanged: {
      auto ptr = reinterpret_cast<const ipc::msg::PageStateChanged *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::GoForward: {
      auto ptr = reinterpret_cast<const ipc::msg::GoForward *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::GoBack: {
      auto ptr = reinterpret_cast<const ipc::msg::GoBack *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::Go: {
      auto ptr = reinterpret_cast<const ipc::msg::Go *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::Paint: {
      auto ptr = reinterpret_cast<const ipc::msg::Paint *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::BrowserClose: {
      auto ptr = reinterpret_cast<const ipc::msg::BrowserClose *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::WindowMethod: {
      auto ptr = reinterpret_cast<const ipc::msg::WindowMethod *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::WindowMethodCall: {
      auto ptr = reinterpret_cast<const ipc::msg::WindowMethodCall *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::Popup: {
      auto ptr = reinterpret_cast<const ipc::msg::Popup *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyPayloadVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPayload(
        verifier,  values->Get(i), types->GetEnum<Payload>(i))) {
      return false;
    }
  }
  return true;
}

inline const ipc::msg::AnyMessage *GetAnyMessage(const void *buf) {
  return flatbuffers::GetRoot<ipc::msg::AnyMessage>(buf);
}

inline bool VerifyAnyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ipc::msg::AnyMessage>(nullptr);
}

inline void FinishAnyMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ipc::msg::AnyMessage> root) {
  fbb.Finish(root);
}

}  // namespace msg
}  // namespace ipc

#endif  // FLATBUFFERS_GENERATED_ANYMESSAGE_IPC_MSG_H_
