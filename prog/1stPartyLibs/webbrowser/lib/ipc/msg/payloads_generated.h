// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PAYLOADS_IPC_MSG_H_
#define FLATBUFFERS_GENERATED_PAYLOADS_IPC_MSG_H_

#include "flatbuffers/flatbuffers.h"

namespace ipc {
namespace msg {

struct Log;

struct MouseMove;

struct MouseWheel;

struct MouseButton;

struct Key;

struct ViewResize;

struct ViewUpdate;

struct BrowserShow;

struct BrowserHide;

struct BrowserStop;

struct BrowserRefresh;

struct BrowserInitialized;

struct BrowserStarted;

struct BrowserExited;

struct BrowserError;

struct PageStateChanged;

struct GoForward;

struct GoBack;

struct Paint;

struct Go;

struct BrowserClose;

struct WindowMethod;

struct WindowMethodCall;

struct Popup;

enum class LogLevel : int8_t {
  ERR = 0,
  WARN = 1,
  INFO = 2,
  DBG = 3,
  MIN = ERR,
  MAX = DBG
};

inline LogLevel (&EnumValuesLogLevel())[4] {
  static LogLevel values[] = {
    LogLevel::ERR,
    LogLevel::WARN,
    LogLevel::INFO,
    LogLevel::DBG
  };
  return values;
}

inline const char **EnumNamesLogLevel() {
  static const char *names[] = {
    "ERR",
    "WARN",
    "INFO",
    "DBG",
    nullptr
  };
  return names;
}

inline const char *EnumNameLogLevel(LogLevel e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesLogLevel()[index];
}

enum class MouseButtonId : int8_t {
  LEFT = 0,
  MIDDLE = 1,
  RIGHT = 2,
  MIN = LEFT,
  MAX = RIGHT
};

inline MouseButtonId (&EnumValuesMouseButtonId())[3] {
  static MouseButtonId values[] = {
    MouseButtonId::LEFT,
    MouseButtonId::MIDDLE,
    MouseButtonId::RIGHT
  };
  return values;
}

inline const char **EnumNamesMouseButtonId() {
  static const char *names[] = {
    "LEFT",
    "MIDDLE",
    "RIGHT",
    nullptr
  };
  return names;
}

inline const char *EnumNameMouseButtonId(MouseButtonId e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMouseButtonId()[index];
}

enum class KeyEventType : int8_t {
  PRESS = 0,
  RELEASE = 1,
  CHAR = 2,
  MIN = PRESS,
  MAX = CHAR
};

inline KeyEventType (&EnumValuesKeyEventType())[3] {
  static KeyEventType values[] = {
    KeyEventType::PRESS,
    KeyEventType::RELEASE,
    KeyEventType::CHAR
  };
  return values;
}

inline const char **EnumNamesKeyEventType() {
  static const char *names[] = {
    "PRESS",
    "RELEASE",
    "CHAR",
    nullptr
  };
  return names;
}

inline const char *EnumNameKeyEventType(KeyEventType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesKeyEventType()[index];
}

enum class PageState : int8_t {
  UNDEFINED = 0,
  CREATED = 1,
  LOADED = 2,
  CLOSED = 3,
  ABORTED = 4,
  FAILED = 5,
  MIN = UNDEFINED,
  MAX = FAILED
};

inline PageState (&EnumValuesPageState())[6] {
  static PageState values[] = {
    PageState::UNDEFINED,
    PageState::CREATED,
    PageState::LOADED,
    PageState::CLOSED,
    PageState::ABORTED,
    PageState::FAILED
  };
  return values;
}

inline const char **EnumNamesPageState() {
  static const char *names[] = {
    "UNDEFINED",
    "CREATED",
    "LOADED",
    "CLOSED",
    "ABORTED",
    "FAILED",
    nullptr
  };
  return names;
}

inline const char *EnumNamePageState(PageState e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesPageState()[index];
}

enum class PageType : int8_t {
  UNDEFINED = 0,
  POPUP = 1,
  TAB = 2,
  WINDOW = 3,
  MIN = UNDEFINED,
  MAX = WINDOW
};

inline PageType (&EnumValuesPageType())[4] {
  static PageType values[] = {
    PageType::UNDEFINED,
    PageType::POPUP,
    PageType::TAB,
    PageType::WINDOW
  };
  return values;
}

inline const char **EnumNamesPageType() {
  static const char *names[] = {
    "UNDEFINED",
    "POPUP",
    "TAB",
    "WINDOW",
    nullptr
  };
  return names;
}

inline const char *EnumNamePageType(PageType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesPageType()[index];
}

struct Log FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_LEVEL = 4,
    VT_MSG = 6
  };
  LogLevel level() const {
    return static_cast<LogLevel>(GetField<int8_t>(VT_LEVEL, 0));
  }
  const flatbuffers::String *msg() const {
    return GetPointer<const flatbuffers::String *>(VT_MSG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_LEVEL) &&
           VerifyOffsetRequired(verifier, VT_MSG) &&
           verifier.Verify(msg()) &&
           verifier.EndTable();
  }
};

struct LogBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_level(LogLevel level) {
    fbb_.AddElement<int8_t>(Log::VT_LEVEL, static_cast<int8_t>(level), 0);
  }
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) {
    fbb_.AddOffset(Log::VT_MSG, msg);
  }
  LogBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LogBuilder &operator=(const LogBuilder &);
  flatbuffers::Offset<Log> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Log>(end);
    fbb_.Required(o, Log::VT_MSG);
    return o;
  }
};

inline flatbuffers::Offset<Log> CreateLog(
    flatbuffers::FlatBufferBuilder &_fbb,
    LogLevel level = LogLevel::ERR,
    flatbuffers::Offset<flatbuffers::String> msg = 0) {
  LogBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_level(level);
  return builder_.Finish();
}

inline flatbuffers::Offset<Log> CreateLogDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    LogLevel level = LogLevel::ERR,
    const char *msg = nullptr) {
  return ipc::msg::CreateLog(
      _fbb,
      level,
      msg ? _fbb.CreateString(msg) : 0);
}

struct MouseMove FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_X = 4,
    VT_Y = 6
  };
  int16_t x() const {
    return GetField<int16_t>(VT_X, 0);
  }
  int16_t y() const {
    return GetField<int16_t>(VT_Y, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_X) &&
           VerifyField<int16_t>(verifier, VT_Y) &&
           verifier.EndTable();
  }
};

struct MouseMoveBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(int16_t x) {
    fbb_.AddElement<int16_t>(MouseMove::VT_X, x, 0);
  }
  void add_y(int16_t y) {
    fbb_.AddElement<int16_t>(MouseMove::VT_Y, y, 0);
  }
  MouseMoveBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MouseMoveBuilder &operator=(const MouseMoveBuilder &);
  flatbuffers::Offset<MouseMove> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<MouseMove>(end);
    return o;
  }
};

inline flatbuffers::Offset<MouseMove> CreateMouseMove(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t x = 0,
    int16_t y = 0) {
  MouseMoveBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct MouseWheel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_X = 4,
    VT_Y = 6,
    VT_DX = 8,
    VT_DY = 10
  };
  int16_t x() const {
    return GetField<int16_t>(VT_X, 0);
  }
  int16_t y() const {
    return GetField<int16_t>(VT_Y, 0);
  }
  int16_t dx() const {
    return GetField<int16_t>(VT_DX, 0);
  }
  int16_t dy() const {
    return GetField<int16_t>(VT_DY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_X) &&
           VerifyField<int16_t>(verifier, VT_Y) &&
           VerifyField<int16_t>(verifier, VT_DX) &&
           VerifyField<int16_t>(verifier, VT_DY) &&
           verifier.EndTable();
  }
};

struct MouseWheelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(int16_t x) {
    fbb_.AddElement<int16_t>(MouseWheel::VT_X, x, 0);
  }
  void add_y(int16_t y) {
    fbb_.AddElement<int16_t>(MouseWheel::VT_Y, y, 0);
  }
  void add_dx(int16_t dx) {
    fbb_.AddElement<int16_t>(MouseWheel::VT_DX, dx, 0);
  }
  void add_dy(int16_t dy) {
    fbb_.AddElement<int16_t>(MouseWheel::VT_DY, dy, 0);
  }
  MouseWheelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MouseWheelBuilder &operator=(const MouseWheelBuilder &);
  flatbuffers::Offset<MouseWheel> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<MouseWheel>(end);
    return o;
  }
};

inline flatbuffers::Offset<MouseWheel> CreateMouseWheel(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t x = 0,
    int16_t y = 0,
    int16_t dx = 0,
    int16_t dy = 0) {
  MouseWheelBuilder builder_(_fbb);
  builder_.add_dy(dy);
  builder_.add_dx(dx);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct MouseButton FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_X = 4,
    VT_Y = 6,
    VT_BTN = 8,
    VT_ISUP = 10
  };
  int16_t x() const {
    return GetField<int16_t>(VT_X, 0);
  }
  int16_t y() const {
    return GetField<int16_t>(VT_Y, 0);
  }
  MouseButtonId btn() const {
    return static_cast<MouseButtonId>(GetField<int8_t>(VT_BTN, 0));
  }
  bool isUp() const {
    return GetField<uint8_t>(VT_ISUP, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_X) &&
           VerifyField<int16_t>(verifier, VT_Y) &&
           VerifyField<int8_t>(verifier, VT_BTN) &&
           VerifyField<uint8_t>(verifier, VT_ISUP) &&
           verifier.EndTable();
  }
};

struct MouseButtonBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(int16_t x) {
    fbb_.AddElement<int16_t>(MouseButton::VT_X, x, 0);
  }
  void add_y(int16_t y) {
    fbb_.AddElement<int16_t>(MouseButton::VT_Y, y, 0);
  }
  void add_btn(MouseButtonId btn) {
    fbb_.AddElement<int8_t>(MouseButton::VT_BTN, static_cast<int8_t>(btn), 0);
  }
  void add_isUp(bool isUp) {
    fbb_.AddElement<uint8_t>(MouseButton::VT_ISUP, static_cast<uint8_t>(isUp), 0);
  }
  MouseButtonBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MouseButtonBuilder &operator=(const MouseButtonBuilder &);
  flatbuffers::Offset<MouseButton> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<MouseButton>(end);
    return o;
  }
};

inline flatbuffers::Offset<MouseButton> CreateMouseButton(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t x = 0,
    int16_t y = 0,
    MouseButtonId btn = MouseButtonId::LEFT,
    bool isUp = false) {
  MouseButtonBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_isUp(isUp);
  builder_.add_btn(btn);
  return builder_.Finish();
}

struct Key FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_WINKEY = 4,
    VT_NATIVEKEY = 6,
    VT_ISSYSKEY = 8,
    VT_MODIFIERS = 10,
    VT_EVENTTYPE = 12
  };
  uint64_t winKey() const {
    return GetField<uint64_t>(VT_WINKEY, 0);
  }
  int64_t nativeKey() const {
    return GetField<int64_t>(VT_NATIVEKEY, 0);
  }
  bool isSysKey() const {
    return GetField<uint8_t>(VT_ISSYSKEY, 0) != 0;
  }
  int8_t modifiers() const {
    return GetField<int8_t>(VT_MODIFIERS, 0);
  }
  KeyEventType eventType() const {
    return static_cast<KeyEventType>(GetField<int8_t>(VT_EVENTTYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_WINKEY) &&
           VerifyField<int64_t>(verifier, VT_NATIVEKEY) &&
           VerifyField<uint8_t>(verifier, VT_ISSYSKEY) &&
           VerifyField<int8_t>(verifier, VT_MODIFIERS) &&
           VerifyField<int8_t>(verifier, VT_EVENTTYPE) &&
           verifier.EndTable();
  }
};

struct KeyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_winKey(uint64_t winKey) {
    fbb_.AddElement<uint64_t>(Key::VT_WINKEY, winKey, 0);
  }
  void add_nativeKey(int64_t nativeKey) {
    fbb_.AddElement<int64_t>(Key::VT_NATIVEKEY, nativeKey, 0);
  }
  void add_isSysKey(bool isSysKey) {
    fbb_.AddElement<uint8_t>(Key::VT_ISSYSKEY, static_cast<uint8_t>(isSysKey), 0);
  }
  void add_modifiers(int8_t modifiers) {
    fbb_.AddElement<int8_t>(Key::VT_MODIFIERS, modifiers, 0);
  }
  void add_eventType(KeyEventType eventType) {
    fbb_.AddElement<int8_t>(Key::VT_EVENTTYPE, static_cast<int8_t>(eventType), 0);
  }
  KeyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  KeyBuilder &operator=(const KeyBuilder &);
  flatbuffers::Offset<Key> Finish() {
    const auto end = fbb_.EndTable(start_, 5);
    auto o = flatbuffers::Offset<Key>(end);
    return o;
  }
};

inline flatbuffers::Offset<Key> CreateKey(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t winKey = 0,
    int64_t nativeKey = 0,
    bool isSysKey = false,
    int8_t modifiers = 0,
    KeyEventType eventType = KeyEventType::PRESS) {
  KeyBuilder builder_(_fbb);
  builder_.add_nativeKey(nativeKey);
  builder_.add_winKey(winKey);
  builder_.add_eventType(eventType);
  builder_.add_modifiers(modifiers);
  builder_.add_isSysKey(isSysKey);
  return builder_.Finish();
}

struct ViewResize FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_KEY = 8
  };
  int16_t width() const {
    return GetField<int16_t>(VT_WIDTH, 0);
  }
  int16_t height() const {
    return GetField<int16_t>(VT_HEIGHT, 0);
  }
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_WIDTH) &&
           VerifyField<int16_t>(verifier, VT_HEIGHT) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.Verify(key()) &&
           verifier.EndTable();
  }
};

struct ViewResizeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(int16_t width) {
    fbb_.AddElement<int16_t>(ViewResize::VT_WIDTH, width, 0);
  }
  void add_height(int16_t height) {
    fbb_.AddElement<int16_t>(ViewResize::VT_HEIGHT, height, 0);
  }
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(ViewResize::VT_KEY, key);
  }
  ViewResizeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ViewResizeBuilder &operator=(const ViewResizeBuilder &);
  flatbuffers::Offset<ViewResize> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<ViewResize>(end);
    return o;
  }
};

inline flatbuffers::Offset<ViewResize> CreateViewResize(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t width = 0,
    int16_t height = 0,
    flatbuffers::Offset<flatbuffers::String> key = 0) {
  ViewResizeBuilder builder_(_fbb);
  builder_.add_key(key);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

inline flatbuffers::Offset<ViewResize> CreateViewResizeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t width = 0,
    int16_t height = 0,
    const char *key = nullptr) {
  return ipc::msg::CreateViewResize(
      _fbb,
      width,
      height,
      key ? _fbb.CreateString(key) : 0);
}

struct ViewUpdate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ViewUpdateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  ViewUpdateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ViewUpdateBuilder &operator=(const ViewUpdateBuilder &);
  flatbuffers::Offset<ViewUpdate> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<ViewUpdate>(end);
    return o;
  }
};

inline flatbuffers::Offset<ViewUpdate> CreateViewUpdate(
    flatbuffers::FlatBufferBuilder &_fbb) {
  ViewUpdateBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BrowserShow FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct BrowserShowBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  BrowserShowBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BrowserShowBuilder &operator=(const BrowserShowBuilder &);
  flatbuffers::Offset<BrowserShow> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<BrowserShow>(end);
    return o;
  }
};

inline flatbuffers::Offset<BrowserShow> CreateBrowserShow(
    flatbuffers::FlatBufferBuilder &_fbb) {
  BrowserShowBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BrowserHide FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct BrowserHideBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  BrowserHideBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BrowserHideBuilder &operator=(const BrowserHideBuilder &);
  flatbuffers::Offset<BrowserHide> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<BrowserHide>(end);
    return o;
  }
};

inline flatbuffers::Offset<BrowserHide> CreateBrowserHide(
    flatbuffers::FlatBufferBuilder &_fbb) {
  BrowserHideBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BrowserStop FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct BrowserStopBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  BrowserStopBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BrowserStopBuilder &operator=(const BrowserStopBuilder &);
  flatbuffers::Offset<BrowserStop> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<BrowserStop>(end);
    return o;
  }
};

inline flatbuffers::Offset<BrowserStop> CreateBrowserStop(
    flatbuffers::FlatBufferBuilder &_fbb) {
  BrowserStopBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BrowserRefresh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct BrowserRefreshBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  BrowserRefreshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BrowserRefreshBuilder &operator=(const BrowserRefreshBuilder &);
  flatbuffers::Offset<BrowserRefresh> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<BrowserRefresh>(end);
    return o;
  }
};

inline flatbuffers::Offset<BrowserRefresh> CreateBrowserRefresh(
    flatbuffers::FlatBufferBuilder &_fbb) {
  BrowserRefreshBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BrowserInitialized FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct BrowserInitializedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  BrowserInitializedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BrowserInitializedBuilder &operator=(const BrowserInitializedBuilder &);
  flatbuffers::Offset<BrowserInitialized> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<BrowserInitialized>(end);
    return o;
  }
};

inline flatbuffers::Offset<BrowserInitialized> CreateBrowserInitialized(
    flatbuffers::FlatBufferBuilder &_fbb) {
  BrowserInitializedBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BrowserStarted FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct BrowserStartedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  BrowserStartedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BrowserStartedBuilder &operator=(const BrowserStartedBuilder &);
  flatbuffers::Offset<BrowserStarted> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<BrowserStarted>(end);
    return o;
  }
};

inline flatbuffers::Offset<BrowserStarted> CreateBrowserStarted(
    flatbuffers::FlatBufferBuilder &_fbb) {
  BrowserStartedBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BrowserExited FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct BrowserExitedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  BrowserExitedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BrowserExitedBuilder &operator=(const BrowserExitedBuilder &);
  flatbuffers::Offset<BrowserExited> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<BrowserExited>(end);
    return o;
  }
};

inline flatbuffers::Offset<BrowserExited> CreateBrowserExited(
    flatbuffers::FlatBufferBuilder &_fbb) {
  BrowserExitedBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BrowserError FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERROR = 4
  };
  int32_t error() const {
    return GetField<int32_t>(VT_ERROR, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERROR) &&
           verifier.EndTable();
  }
};

struct BrowserErrorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error(int32_t error) {
    fbb_.AddElement<int32_t>(BrowserError::VT_ERROR, error, 0);
  }
  BrowserErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BrowserErrorBuilder &operator=(const BrowserErrorBuilder &);
  flatbuffers::Offset<BrowserError> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<BrowserError>(end);
    return o;
  }
};

inline flatbuffers::Offset<BrowserError> CreateBrowserError(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t error = 0) {
  BrowserErrorBuilder builder_(_fbb);
  builder_.add_error(error);
  return builder_.Finish();
}

struct PageStateChanged FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_STATE = 4,
    VT_TYPE = 6,
    VT_ID = 8,
    VT_URL = 10,
    VT_TITLE = 12,
    VT_ERROR = 14,
    VT_CANBACK = 16,
    VT_CANFORWARD = 18
  };
  PageState state() const {
    return static_cast<PageState>(GetField<int8_t>(VT_STATE, 0));
  }
  PageType type() const {
    return static_cast<PageType>(GetField<int8_t>(VT_TYPE, 0));
  }
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  const flatbuffers::String *error() const {
    return GetPointer<const flatbuffers::String *>(VT_ERROR);
  }
  bool canBack() const {
    return GetField<uint8_t>(VT_CANBACK, 0) != 0;
  }
  bool canForward() const {
    return GetField<uint8_t>(VT_CANFORWARD, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATE) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.Verify(url()) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.Verify(title()) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.Verify(error()) &&
           VerifyField<uint8_t>(verifier, VT_CANBACK) &&
           VerifyField<uint8_t>(verifier, VT_CANFORWARD) &&
           verifier.EndTable();
  }
};

struct PageStateChangedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(PageState state) {
    fbb_.AddElement<int8_t>(PageStateChanged::VT_STATE, static_cast<int8_t>(state), 0);
  }
  void add_type(PageType type) {
    fbb_.AddElement<int8_t>(PageStateChanged::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(PageStateChanged::VT_ID, id, 0);
  }
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(PageStateChanged::VT_URL, url);
  }
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(PageStateChanged::VT_TITLE, title);
  }
  void add_error(flatbuffers::Offset<flatbuffers::String> error) {
    fbb_.AddOffset(PageStateChanged::VT_ERROR, error);
  }
  void add_canBack(bool canBack) {
    fbb_.AddElement<uint8_t>(PageStateChanged::VT_CANBACK, static_cast<uint8_t>(canBack), 0);
  }
  void add_canForward(bool canForward) {
    fbb_.AddElement<uint8_t>(PageStateChanged::VT_CANFORWARD, static_cast<uint8_t>(canForward), 0);
  }
  PageStateChangedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PageStateChangedBuilder &operator=(const PageStateChangedBuilder &);
  flatbuffers::Offset<PageStateChanged> Finish() {
    const auto end = fbb_.EndTable(start_, 8);
    auto o = flatbuffers::Offset<PageStateChanged>(end);
    return o;
  }
};

inline flatbuffers::Offset<PageStateChanged> CreatePageStateChanged(
    flatbuffers::FlatBufferBuilder &_fbb,
    PageState state = PageState::UNDEFINED,
    PageType type = PageType::UNDEFINED,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> url = 0,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    flatbuffers::Offset<flatbuffers::String> error = 0,
    bool canBack = false,
    bool canForward = false) {
  PageStateChangedBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_title(title);
  builder_.add_url(url);
  builder_.add_id(id);
  builder_.add_canForward(canForward);
  builder_.add_canBack(canBack);
  builder_.add_type(type);
  builder_.add_state(state);
  return builder_.Finish();
}

inline flatbuffers::Offset<PageStateChanged> CreatePageStateChangedDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    PageState state = PageState::UNDEFINED,
    PageType type = PageType::UNDEFINED,
    uint32_t id = 0,
    const char *url = nullptr,
    const char *title = nullptr,
    const char *error = nullptr,
    bool canBack = false,
    bool canForward = false) {
  return ipc::msg::CreatePageStateChanged(
      _fbb,
      state,
      type,
      id,
      url ? _fbb.CreateString(url) : 0,
      title ? _fbb.CreateString(title) : 0,
      error ? _fbb.CreateString(error) : 0,
      canBack,
      canForward);
}

struct GoForward FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GoForwardBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  GoForwardBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GoForwardBuilder &operator=(const GoForwardBuilder &);
  flatbuffers::Offset<GoForward> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<GoForward>(end);
    return o;
  }
};

inline flatbuffers::Offset<GoForward> CreateGoForward(
    flatbuffers::FlatBufferBuilder &_fbb) {
  GoForwardBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GoBack FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GoBackBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  GoBackBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GoBackBuilder &operator=(const GoBackBuilder &);
  flatbuffers::Offset<GoBack> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<GoBack>(end);
    return o;
  }
};

inline flatbuffers::Offset<GoBack> CreateGoBack(
    flatbuffers::FlatBufferBuilder &_fbb) {
  GoBackBuilder builder_(_fbb);
  return builder_.Finish();
}

struct Paint FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_WIDTH = 4,
    VT_HEIGHT = 6
  };
  uint16_t width() const {
    return GetField<uint16_t>(VT_WIDTH, 0);
  }
  uint16_t height() const {
    return GetField<uint16_t>(VT_HEIGHT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_WIDTH) &&
           VerifyField<uint16_t>(verifier, VT_HEIGHT) &&
           verifier.EndTable();
  }
};

struct PaintBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(uint16_t width) {
    fbb_.AddElement<uint16_t>(Paint::VT_WIDTH, width, 0);
  }
  void add_height(uint16_t height) {
    fbb_.AddElement<uint16_t>(Paint::VT_HEIGHT, height, 0);
  }
  PaintBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PaintBuilder &operator=(const PaintBuilder &);
  flatbuffers::Offset<Paint> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Paint>(end);
    return o;
  }
};

inline flatbuffers::Offset<Paint> CreatePaint(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t width = 0,
    uint16_t height = 0) {
  PaintBuilder builder_(_fbb);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

struct Go FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_URL = 4
  };
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_URL) &&
           verifier.Verify(url()) &&
           verifier.EndTable();
  }
};

struct GoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(Go::VT_URL, url);
  }
  GoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GoBuilder &operator=(const GoBuilder &);
  flatbuffers::Offset<Go> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<Go>(end);
    fbb_.Required(o, Go::VT_URL);
    return o;
  }
};

inline flatbuffers::Offset<Go> CreateGo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> url = 0) {
  GoBuilder builder_(_fbb);
  builder_.add_url(url);
  return builder_.Finish();
}

inline flatbuffers::Offset<Go> CreateGoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *url = nullptr) {
  return ipc::msg::CreateGo(
      _fbb,
      url ? _fbb.CreateString(url) : 0);
}

struct BrowserClose FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct BrowserCloseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  BrowserCloseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BrowserCloseBuilder &operator=(const BrowserCloseBuilder &);
  flatbuffers::Offset<BrowserClose> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<BrowserClose>(end);
    return o;
  }
};

inline flatbuffers::Offset<BrowserClose> CreateBrowserClose(
    flatbuffers::FlatBufferBuilder &_fbb) {
  BrowserCloseBuilder builder_(_fbb);
  return builder_.Finish();
}

struct WindowMethod FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_PARAMETERSCNT = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t parametersCnt() const {
    return GetField<uint32_t>(VT_PARAMETERSCNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<uint32_t>(verifier, VT_PARAMETERSCNT) &&
           verifier.EndTable();
  }
};

struct WindowMethodBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(WindowMethod::VT_NAME, name);
  }
  void add_parametersCnt(uint32_t parametersCnt) {
    fbb_.AddElement<uint32_t>(WindowMethod::VT_PARAMETERSCNT, parametersCnt, 0);
  }
  WindowMethodBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WindowMethodBuilder &operator=(const WindowMethodBuilder &);
  flatbuffers::Offset<WindowMethod> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<WindowMethod>(end);
    fbb_.Required(o, WindowMethod::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<WindowMethod> CreateWindowMethod(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t parametersCnt = 0) {
  WindowMethodBuilder builder_(_fbb);
  builder_.add_parametersCnt(parametersCnt);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<WindowMethod> CreateWindowMethodDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t parametersCnt = 0) {
  return ipc::msg::CreateWindowMethod(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      parametersCnt);
}

struct WindowMethodCall FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_P1 = 6,
    VT_P2 = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *p1() const {
    return GetPointer<const flatbuffers::String *>(VT_P1);
  }
  const flatbuffers::String *p2() const {
    return GetPointer<const flatbuffers::String *>(VT_P2);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_P1) &&
           verifier.Verify(p1()) &&
           VerifyOffset(verifier, VT_P2) &&
           verifier.Verify(p2()) &&
           verifier.EndTable();
  }
};

struct WindowMethodCallBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(WindowMethodCall::VT_NAME, name);
  }
  void add_p1(flatbuffers::Offset<flatbuffers::String> p1) {
    fbb_.AddOffset(WindowMethodCall::VT_P1, p1);
  }
  void add_p2(flatbuffers::Offset<flatbuffers::String> p2) {
    fbb_.AddOffset(WindowMethodCall::VT_P2, p2);
  }
  WindowMethodCallBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WindowMethodCallBuilder &operator=(const WindowMethodCallBuilder &);
  flatbuffers::Offset<WindowMethodCall> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<WindowMethodCall>(end);
    fbb_.Required(o, WindowMethodCall::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<WindowMethodCall> CreateWindowMethodCall(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> p1 = 0,
    flatbuffers::Offset<flatbuffers::String> p2 = 0) {
  WindowMethodCallBuilder builder_(_fbb);
  builder_.add_p2(p2);
  builder_.add_p1(p1);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<WindowMethodCall> CreateWindowMethodCallDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *p1 = nullptr,
    const char *p2 = nullptr) {
  return ipc::msg::CreateWindowMethodCall(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      p1 ? _fbb.CreateString(p1) : 0,
      p2 ? _fbb.CreateString(p2) : 0);
}

struct Popup FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_URL = 4
  };
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_URL) &&
           verifier.Verify(url()) &&
           verifier.EndTable();
  }
};

struct PopupBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(Popup::VT_URL, url);
  }
  PopupBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PopupBuilder &operator=(const PopupBuilder &);
  flatbuffers::Offset<Popup> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<Popup>(end);
    fbb_.Required(o, Popup::VT_URL);
    return o;
  }
};

inline flatbuffers::Offset<Popup> CreatePopup(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> url = 0) {
  PopupBuilder builder_(_fbb);
  builder_.add_url(url);
  return builder_.Finish();
}

inline flatbuffers::Offset<Popup> CreatePopupDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *url = nullptr) {
  return ipc::msg::CreatePopup(
      _fbb,
      url ? _fbb.CreateString(url) : 0);
}

}  // namespace msg
}  // namespace ipc

#endif  // FLATBUFFERS_GENERATED_PAYLOADS_IPC_MSG_H_
