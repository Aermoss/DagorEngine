// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: testVectorSerialization.proto

#pragma once


#include <protoConfig.h>


namespace proto
{
  namespace io
  {
    struct StreamTag;
    class OutputCodeStream;
    class InputCodeStream;
  }
}


namespace proto_vector_test
{

  class TestItem:
      public proto::SerializableVersioned
  {
  public:
    TestItem();
    ~TestItem();

    void clear();

    void touchRecursive(proto::version value);

    void saveToDB(
        proto::io::OutputCodeStream & stream,
        const proto::BinarySaveOptions & saveOptions) const;

    bool loadFromDB(proto::io::InputCodeStream & stream, proto::io::StreamTag tag);

    const proto::string & getName() const;
    void setName(const proto::string & value);

  private:
    proto::string name;
  };

  typedef proto::ContainerVersioned<proto::Vector<TestItem>::TType>
      TTestItemVector;


  class TestMessage:
      public proto::SerializableVersioned
  {
  public:
    TestMessage();
    ~TestMessage();

    void clear();

    void touchRecursive(proto::version value);

    void saveToDB(
        proto::io::OutputCodeStream & stream,
        const proto::BinarySaveOptions & saveOptions) const;

    bool loadFromDB(proto::io::InputCodeStream & stream, proto::io::StreamTag tag);

    TTestItemVector & getItems();
    const TTestItemVector & getItems() const;

  private:
    TTestItemVector items;
  };


  inline const proto::string & TestItem::getName() const
  {
    return name;
  }


  inline void TestItem::setName(const proto::string & value)
  {
    name = value;
  }


  inline TTestItemVector & TestMessage::getItems()
  {
    return items;
  }


  inline const TTestItemVector & TestMessage::getItems() const
  {
    return items;
  }

}


// type traits
namespace proto
{
}

