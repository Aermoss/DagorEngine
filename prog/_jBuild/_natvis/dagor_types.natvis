<?xml version="1.0" encoding="utf-8"?>

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

<Type Name="carray&lt;*,*&gt;">
  <DisplayString>{{ count={static_size} }}</DisplayString>
  <Expand>
    <ArrayItems>
      <Size>static_size</Size>
      <ValuePointer>dptr</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<Type Name="PatchableTab&lt;*&gt;">
  <DisplayString>{{ count={((dag::Span&lt;$T1&gt;*)this)-&gt;dcnt} }}</DisplayString>
  <Expand>
    <ArrayItems>
      <Size>((dag::Span&lt;$T1&gt;*)this)-&gt;dcnt</Size>
      <ValuePointer>((dag::Span&lt;$T1&gt;*)this)-&gt;dptr</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<Type Name="dag::Span&lt;*&gt;">
  <DisplayString>{{ count={dcnt} }}</DisplayString>
  <Expand>
    <ArrayItems>
      <Size>dcnt</Size>
      <ValuePointer>dptr</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<Type Name="dag::RelocatableFixedData&lt;*,*,*,*,*,*&gt;">
  <Intrinsic Name="isInplace" Expression="!canOverflow || mAllocatorAndCount.count &lt;= $T2" />
  <DisplayString>{{ count={mAllocatorAndCount.count} }}</DisplayString>
  <Expand>
    <ArrayItems>
      <Size>mAllocatorAndCount.count</Size>
      <ValuePointer Condition="isInplace()">(value_type*)inplaceStor.data</ValuePointer>
      <ValuePointer Condition="!isInplace()">heap.data</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<Type Name="dag::Span&lt;char&gt;">
  <DisplayString>{dptr,na}</DisplayString>
  <StringView>dptr,na</StringView>
  <Expand>
    <Item Name="[size]" ExcludeView="simple">dcnt</Item>
    <ArrayItems>
      <Size>dcnt</Size>
      <ValuePointer>dptr</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<Type Name="dag::Vector&lt;*,*,*,*&gt;">
  <DisplayString>{{ size={mCount} }}</DisplayString>
  <Expand>
    <Item Name="[capacity]" ExcludeView="simple">mAllocated</Item>
    <ArrayItems>
      <Size>mCount</Size>
      <ValuePointer>mBeginAndAllocator.mFirst</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<Type Name="dag::Vector&lt;char,*,*,*&gt;">
  <DisplayString>"{mBeginAndAllocator.mFirst,sb}"</DisplayString>
  <StringView>mBeginAndAllocator.mFirst,na</StringView>
  <Expand>
    <Item Name="[size]" ExcludeView="simple">mCount</Item>
    <ArrayItems>
      <Size>mCount</Size>
      <ValuePointer>mBeginAndAllocator.mFirst</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<Type Name="InitOnDemand&lt;*,0&gt;">
  <SmartPointer Usage="Minimal">($T1*)objBuf</SmartPointer>
  <DisplayString>{{ inited={inited} }}</DisplayString>
  <Expand>
    <ExpandedItem>($T1*)objBuf</ExpandedItem>
  </Expand>
</Type>
  
<Type Name="InitOnDemand&lt;*,1&gt;">
  <SmartPointer Usage="Minimal">obj</SmartPointer>
  <DisplayString>{{ inited={obj!=nullptr} }}</DisplayString>
  <Expand>
    <ExpandedItem>($T1*)obj</ExpandedItem>
  </Expand>
</Type>

<Type Name="SimpleString">
  <DisplayString>{string,s}</DisplayString>
</Type>

<Type Name="IPoint2">
  <DisplayString>x={x} y={y}</DisplayString>
</Type>

<Type Name="IPoint3">
  <DisplayString>x={x} y={y} z={z}</DisplayString>
</Type>

<Type Name="IPoint4">
  <DisplayString>x={x} y={y} z={z} w={w}</DisplayString>
</Type>

<Type Name="Point2">
  <DisplayString>x={x} y={y}</DisplayString>
</Type>

<Type Name="Point3">
  <AlternativeType Name="DPoint3" />
  <DisplayString>x={x} y={y} z={z}</DisplayString>
</Type>

<Type Name="Point4">
  <DisplayString>x={x} y={y} z={z} w={w}</DisplayString>
</Type>

<Type Name="Color3">
  <DisplayString>r={r} g={g} b={b}</DisplayString>
</Type>

<Type Name="Color4">
  <DisplayString>r={r} g={g} b={b} a={a}</DisplayString>
</Type>

<Type Name="PatchablePtr&lt;*&gt;">
  <SmartPointer Usage="Minimal">p</SmartPointer>
  <DisplayString IncludeView="ptr" Condition="p == 0">nullptr</DisplayString>
  <DisplayString IncludeView="ptr" Condition="p != 0">ptr</DisplayString>
  <Expand>
    <ExpandedItem Condition="p != 0">*p</ExpandedItem>
  </Expand>
</Type>

<Type Name="Ptr&lt;*&gt;">
  <SmartPointer Usage="Minimal">ptr</SmartPointer>
  <DisplayString IncludeView="ptr" Condition="ptr == 0">nullptr</DisplayString>
  <DisplayString IncludeView="ptr" Condition="ptr != 0">p</DisplayString>
  <Expand>
    <ExpandedItem Condition="ptr != 0">*ptr</ExpandedItem>
  </Expand>
</Type>

<Type Name="ska::flat_hash_set&lt;*&gt;">
  <DisplayString>{{ size={num_elements} }}</DisplayString>
  <Expand>
    <Item Name="[size]">num_elements</Item>
    <Item Name="[capacity]">(num_slots_minus_one + max_lookups)</Item>
    <CustomListItems>
      <Variable Name="_it" InitialValue="entries" />
      <Variable Name="_end" InitialValue="entries + (ptrdiff_t)(num_slots_minus_one + max_lookups)" />
      <Size>num_elements</Size>
      <Loop Condition="_it != _end">
        <If Condition="_it-&gt;distance_from_desired &gt;= 0">
          <Item>_it->value</Item>
        </If>
        <Exec>_it++</Exec>
      </Loop>
    </CustomListItems>
  </Expand>
</Type>

<Type Name="HashedKeyMap&lt;*,*,*,*,*,*,*&gt;">
  <DisplayString>{{ size={used} }}</DisplayString>
  <Expand>
    <Item Name="[size]" ExcludeView="simple">used</Item>
    <Item Name="[capacity]" ExcludeView="simple">mask+1</Item>
    <CustomListItems>
      <Variable Name="_i" InitialValue="0" />
      <Size>used</Size>
      <Loop Condition="_i &lt; mask+1">
        <If Condition="keys.mFirst[_i] != $T3">
          <Item>vals[_i]</Item>
        </If>
        <Exec>_i++</Exec>
      </Loop>
    </CustomListItems>
  </Expand>
</Type>

<Type Name="ChunkedStorage&lt;*,*,*&gt;">
  <DisplayString>{{ size={count} }}</DisplayString>
  <Expand>
    <CustomListItems>
      <Variable Name="_chunk" InitialValue="head" />
      <Variable Name="_i" InitialValue="0" />
      <Size>count</Size>
      <Loop Condition="_chunk != nullptr">
        <Loop Condition="_i &lt; _chunk-&gt;count">
          <Item>(($T1*)_chunk-&gt;data)[_i]</Item>
          <Exec>_i++</Exec>
        </Loop>
        <Exec>_chunk = _chunk-&gt;next</Exec>
        <Exec>_i = 0</Exec>
      </Loop>
    </CustomListItems>
  </Expand>
</Type>

<Type Name="OAHashNameMap&lt;*,*&gt;">
  <DisplayString>{{ size={strings.mCount} }}</DisplayString>
  <Expand>
    <CustomListItems>
      <Variable Name="_i" InitialValue="0" />
      <Variable Name="_nameId" InitialValue="0" />
      <Variable Name="_page_id" InitialValue="0" />
      <Variable Name="_page_ofs" InitialValue="0" />
      <Size>strings.mCount</Size>
      <Loop Condition="_i &lt; strings.mCount">
        <Exec>_nameId = strings.mBeginAndAllocator.mFirst[_i++]</Exec>
        <Exec>_page_id = _nameId &gt;&gt; allocator.max_page_shift</Exec>
        <Exec>_page_ofs = _nameId &amp; ((1 &lt;&lt; allocator.max_page_shift) - 1)</Exec>
        <Item >(char*)((_page_id == allocator.pages.mCount ? allocator.head.data.mPair.mFirst : allocator.pages.mBeginAndAllocator.mFirst[_page_id].data.mPair.mFirst) + _page_ofs),s</Item>
      </Loop>
    </CustomListItems>
  </Expand>
</Type>

<Type Name="DataBlock">
  <Intrinsic Name="_isEmpty" Expression="paramsCount == 0 &amp;&amp; blocksCount == 0" />
  <Intrinsic Name="_rw" Expression="(DBNameMapBase*)&amp;(shared->rw)" />
  <Intrinsic Name="_ro" Expression="(DBNameMapBase*)shared->ro" />
  <Intrinsic Name="_data" Expression="data->data.mBeginAndAllocator.mFirst" />

  <DisplayString Condition=" _isEmpty()">empty</DisplayString>
  <DisplayString Condition="!_isEmpty()" ExcludeView="tree">{{ paramCount={paramsCount} blockCount={blocksCount} }}</DisplayString>
  <DisplayString Condition="!_isEmpty()" IncludeView="tree">paramCount={paramsCount} blockCount={blocksCount}</DisplayString>

  <Expand HideRawView="true">
    <CustomListItems Condition="_isEmpty()" />

    <Synthetic ExcludeView="tree" Condition="!_isEmpty() &amp;&amp; !(nameIdAndFlags &amp; NAME_ID_MASK)" Name="[Source]">
      <DisplayString>{shared->srcFilename}</DisplayString>
    </Synthetic>

    <CustomListItems ExcludeView="tree" Condition="!_isEmpty() &amp;&amp; (nameIdAndFlags &amp; NAME_ID_MASK)">
      <Variable Name="_nameId" InitialValue="(nameIdAndFlags &amp; NAME_ID_MASK) - 1" />
      <Variable Name="_roc" InitialValue="_ro() ? _ro()->strings.mCount : 0" />
      <Variable Name="_db" InitialValue="_ro()" />
      <Variable Name="_pageId" InitialValue="0" />
      <Variable Name="_pageOfs" InitialValue="0" />

      <Exec Condition="_nameId >= _roc">
        _db = _rw(),
        _nameId -= _roc
      </Exec>
      <Exec>
        _nameId = _db->strings.mBeginAndAllocator.mFirst[_nameId],
        _pageId = _nameId >> _db->allocator.max_page_shift,
        _pageOfs = _nameId &amp; ((1 &lt;&lt; _db->allocator.max_page_shift) - 1)
      </Exec>

      <Item Name="[Name]">
        (_pageId != _db->allocator.pages.mCount
        ? _db->allocator.pages.mBeginAndAllocator.mFirst[_pageId].data.mPair.mFirst
        : _db->allocator.head.data.mPair.mFirst
        ) + _pageOfs,sb
      </Item>
    </CustomListItems>

    <CustomListItems Condition="!_isEmpty()">
      <Variable Name="_roc" InitialValue="_ro() ? _ro()->strings.mCount : 0" />
      <Variable Name="_i" InitialValue="0" />
      <Variable Name="_param" InitialValue="(Param*)0" />
      <Variable Name="_block" InitialValue="(DataBlock*)0" />
      <Variable Name="_pblock" InitialValue="(DataBlock**)0" />
      <Variable Name="_nameId" InitialValue="0" />
      <Variable Name="_name" InitialValue="(char*)0" />
      <Variable Name="_start" InitialValue="(char*)0" />
      <Variable Name="_db" InitialValue="(DBNameMapBase*)0" />
      <Variable Name="_pageId" InitialValue="0" />
      <Variable Name="_pageOfs" InitialValue="0" />

      <If Condition="ofs == IS_OWNED">
        <Exec>
          _start = _data() + paramsCount * sizeof(DataBlock::Param),
          _param = (Param*)_data()
        </Exec>

        <Loop Condition="_i &lt; paramsCount">
          <Exec>
            _nameId = _param->nameId,
            _db = _ro()
          </Exec>
          <Exec Condition="_nameId >= _roc">
            _nameId -= _roc,
            _db = _rw()
          </Exec>
          <Exec>
            _nameId = _db->strings.mBeginAndAllocator.mFirst[_nameId],
            _pageId = _nameId >> _db->allocator.max_page_shift,
            _pageOfs = _nameId &amp; ((1 &lt;&lt; _db->allocator.max_page_shift) - 1),
            _name = (_pageId != _db->allocator.pages.mCount
            ? _db->allocator.pages.mBeginAndAllocator.mFirst[_pageId].data.mPair.mFirst
            : _db->allocator.head.data.mPair.mFirst
            ) + _pageOfs
          </Exec>

          <If Condition="_param->type == 1">
            <If Condition="_param->v &amp; IS_NAMEMAP_ID">
              <Exec>
                _nameId = _param->v &amp; ~IS_NAMEMAP_ID,
                _db = _ro()
              </Exec>
              <Exec Condition="_nameId >= _roc">
                _nameId -= _roc,
                _db = _rw()
              </Exec>
              <Exec>_nameId = _db->strings.mBeginAndAllocator.mFirst[_nameId]</Exec>
            </If>

            <Exec Condition="!(_param->v &amp; IS_NAMEMAP_ID)">
              _nameId = _param->v,
              _db = _rw()
            </Exec>

            <Exec>
              _pageId = _nameId >> _db->allocator.max_page_shift,
              _pageOfs = _nameId &amp; ((1 &lt;&lt; _db->allocator.max_page_shift) - 1)
            </Exec>

            <Item Name="{_name,sb}:t">
              (_pageId != _db->allocator.pages.mCount
              ? _db->allocator.pages.mBeginAndAllocator.mFirst[_pageId].data.mPair.mFirst
              : _db->allocator.head.data.mPair.mFirst
              ) + _pageOfs,s
            </Item>
          </If>
          <Item Name="{_name,sb}:i" Condition="_param->type == 2">*(int*)&amp;_param->v</Item>
          <Item Name="{_name,sb}:r" Condition="_param->type == 3">*(float*)&amp;_param->v</Item>
          <Item Name="{_name,sb}:p2" Condition="_param->type == 4">*(Point2*)(_start + _param->v)</Item>
          <Item Name="{_name,sb}:p3" Condition="_param->type == 5">*(Point3*)(_start + _param->v)</Item>
          <Item Name="{_name,sb}:p4" Condition="_param->type == 6">*(Point4*)(_start + _param->v)</Item>
          <Item Name="{_name,sb}:ip2" Condition="_param->type == 7">*(IPoint2*)(_start + _param->v)</Item>
          <Item Name="{_name,sb}:ip3" Condition="_param->type == 8">*(IPoint3*)(_start + _param->v)</Item>
          <Item Name="{_name,sb}:b" Condition="_param->type == 9">*(bool*)&amp;_param->v</Item>
          <Item Name="{_name,sb}:c" Condition="_param->type == 10">*(E3DCOLOR*)(_start + _param->v)</Item>
          <Item Name="{_name,sb}:m" Condition="_param->type == 11">*(TMatrix*)(_start + _param->v)</Item>
          <Item Name="{_name,sb}:i64" Condition="_param->type == 12">*(int64_t*)(_start + _param->v)</Item>

          <Exec>_param++, _i++</Exec>
        </Loop>
      </If>

      <If Condition="ofs != IS_OWNED">
        <Exec>
          _start = (char*)shared + sizeof(DataBlockShared),
          _param = (Param*)(_start + ofs)
        </Exec>

        <Loop Condition="_i &lt; paramsCount">
          <Exec>
            _nameId = _param->nameId,
            _db = _ro()
          </Exec>
          <Exec Condition="_nameId >= _roc">
            _nameId -= _roc,
            _db = _rw()
          </Exec>
          <Exec>
            _nameId = _db->strings.mBeginAndAllocator.mFirst[_nameId],
            _pageId = _nameId >> _db->allocator.max_page_shift,
            _pageOfs = _nameId &amp; ((1 &lt;&lt; _db->allocator.max_page_shift) - 1),
            _name = (_pageId != _db->allocator.pages.mCount
            ? _db->allocator.pages.mBeginAndAllocator.mFirst[_pageId].data.mPair.mFirst
            : _db->allocator.head.data.mPair.mFirst
            ) + _pageOfs
          </Exec>

          <If Condition="_param->type == 1">
            <If Condition="_param->v &amp; IS_NAMEMAP_ID">
              <Exec>
                _nameId = _param->v &amp; ~IS_NAMEMAP_ID,
                _db = _ro()
              </Exec>
              <Exec Condition="_nameId >= _roc">
                _nameId -= _roc,
                _db = _rw()
              </Exec>
              <Exec>
                _nameId = _db->strings.mBeginAndAllocator.mFirst[_nameId],
                _pageId = _nameId >> _db->allocator.max_page_shift,
                _pageOfs = _nameId &amp; ((1 &lt;&lt; _db->allocator.max_page_shift) - 1)
              </Exec>

              <Item Name="{_name,sb}:t">
                (_pageId != _db->allocator.pages.mCount
                ? _db->allocator.pages.mBeginAndAllocator.mFirst[_pageId].data.mPair.mFirst
                : _db->allocator.head.data.mPair.mFirst
                ) + _pageOfs,s
              </Item>
            </If>

            <Item Name="{_name,sb}:t" Condition="!(_param->v &amp; IS_NAMEMAP_ID)">_start + _param->v,s</Item>
          </If>
          <Item Name="{_name,sb}:i" Condition="_param->type == 2">*(int*)&amp;_param->v</Item>
          <Item Name="{_name,sb}:r" Condition="_param->type == 3">*(float*)&amp;_param->v</Item>
          <Item Name="{_name,sb}:p2" Condition="_param->type == 4">*(Point2*)(_start + _param->v)</Item>
          <Item Name="{_name,sb}:p3" Condition="_param->type == 5">*(Point3*)(_start + _param->v)</Item>
          <Item Name="{_name,sb}:p4" Condition="_param->type == 6">*(Point4*)(_start + _param->v)</Item>
          <Item Name="{_name,sb}:ip2" Condition="_param->type == 7">*(IPoint2*)(_start + _param->v)</Item>
          <Item Name="{_name,sb}:ip3" Condition="_param->type == 8">*(IPoint3*)(_start + _param->v)</Item>
          <Item Name="{_name,sb}:b" Condition="_param->type == 9">*(bool*)&amp;_param->v</Item>
          <Item Name="{_name,sb}:c" Condition="_param->type == 10">*(E3DCOLOR*)(_start + _param->v)</Item>
          <Item Name="{_name,sb}:m" Condition="_param->type == 11">*(TMatrix*)(_start + _param->v)</Item>
          <Item Name="{_name,sb}:i64" Condition="_param->type == 12">*(int64_t*)(_start + _param->v)</Item>

          <Exec>_param++, _i++</Exec>
        </Loop>
      </If>

      <If Condition="firstBlockId == IS_OWNED">
        <Exec>
          _i = 0,
          _pblock = (DataBlock**)(_data() + data->data.mCount - (blocksCount - 1) * sizeof(DataBlock*))
        </Exec>

        <Loop Condition="_i &lt; blocksCount">
          <Exec>
            _nameId = ((*_pblock)->nameIdAndFlags &amp; NAME_ID_MASK) - 1,
            _db = _ro()
          </Exec>
          <Exec Condition="_nameId >= _roc">
            _nameId -= _roc,
            _db = _rw()
          </Exec>
          <Exec>
            _nameId = _db->strings.mBeginAndAllocator.mFirst[_nameId],
            _pageId = _nameId >> _db->allocator.max_page_shift,
            _pageOfs = _nameId &amp; ((1 &lt;&lt; _db->allocator.max_page_shift) - 1),
            _name = (_pageId != _db->allocator.pages.mCount
            ? _db->allocator.pages.mBeginAndAllocator.mFirst[_pageId].data.mPair.mFirst
            : _db->allocator.head.data.mPair.mFirst
            ) + _pageOfs
          </Exec>

          <Item Name="{_name,sb} {{">**_pblock,view(tree)</Item>

          <Exec>_pblock++, _i++</Exec>
        </Loop>
      </If>

      <If Condition="firstBlockId != IS_OWNED">
        <Exec>
          _i = 0,
          _block = (((DataBlock*)(((char*)shared) + sizeof(DataBlockShared) + shared->blocksStartsAt)) + firstBlockId)
        </Exec>

        <Loop Condition="_i &lt; blocksCount">
          <Exec>
            _nameId = ((_block)->nameIdAndFlags &amp; NAME_ID_MASK) - 1,
            _db = _ro()
          </Exec>
          <Exec Condition="_nameId >= _roc">
            _nameId -= _roc,
            _db = _rw()
          </Exec>
          <Exec>
            _nameId = _db->strings.mBeginAndAllocator.mFirst[_nameId],
            _pageId = _nameId >> _db->allocator.max_page_shift,
            _pageOfs = _nameId &amp; ((1 &lt;&lt; _db->allocator.max_page_shift) - 1),
            _name = (_pageId != _db->allocator.pages.mCount
            ? _db->allocator.pages.mBeginAndAllocator.mFirst[_pageId].data.mPair.mFirst
            : _db->allocator.head.data.mPair.mFirst
            ) + _pageOfs
          </Exec>

          <Item Name="{_name,sb} {{">*_block,view(tree)</Item>

          <Exec>_block++, _i++</Exec>
        </Loop>
      </If>
    </CustomListItems>

    <Synthetic Name="}" Condition="!_isEmpty() &amp;&amp; (nameIdAndFlags &amp; NAME_ID_MASK)" IncludeView="tree" />
  </Expand>
</Type>

<Type Name="bindump::detail::VecHolderBase&lt;*,bindump::detail::MAPPER&gt;">
  <AlternativeType Name="bindump::detail::mapper::ListMapper&lt;*&gt;" />
  <DisplayString>{{ size = {mCount} }}</DisplayString>
  <Expand>
    <Item Name="[size]" ExcludeView="simple">mCount</Item>
    <ArrayItems>
      <Size>mCount</Size>
      <ValuePointer>($T1*)((uint8_t *)this + mOffset)</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<Type Name="bindump::detail::SpanBase&lt;*,bindump::detail::MAPPER&gt;">
  <DisplayString>{{ size = {((uint32_t*)this)[1]} }}</DisplayString>
  <Expand>
    <ArrayItems>
      <Size>((uint32_t*)this)[1]</Size>
      <ValuePointer>($T1*)((uint8_t *)this + ((int32_t*)this)[0])</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<Type Name="bindump::detail::SpanBase&lt;char,bindump::detail::MAPPER&gt;">
  <DisplayString>{(char*)((uint8_t *)this + ((int32_t*)this)[0]),na}</DisplayString>
  <StringView>(char*)((uint8_t *)this + ((int32_t*)this)[0]),na</StringView>
</Type>

<Type Name="bindump::detail::StrHolderBase&lt;bindump::detail::MAPPER&gt;">
  <DisplayString>{(char*)((uint8_t *)this + mOffset),na}</DisplayString>
  <StringView>(char*)((uint8_t *)this + mOffset),na</StringView>
</Type>

<Type Name="bindump::detail::mapper::PtrMapper&lt;*&gt;">
  <DisplayString>{{ {*($T1*)((uint8_t *)this + mOffset)} }}</DisplayString>
</Type>

<Type Name="ScriptedShaderElement::PackedPassId">
  <DisplayString>{*(ScriptedShaderElement::PackedPassId::Id*)this}</DisplayString>
  <Expand HideRawView="true">
    <ExpandedItem>*(ScriptedShaderElement::PackedPassId::Id*)this</ExpandedItem>
  </Expand>
</Type>

<Type Name="drv3d_dx12::ImageViewState">
  <DisplayString>{wrapper.value,Xb}</DisplayString>
  <Expand HideRawView="true">
    <Item Name="value">wrapper.value,X</Item>
    <Item Name="sampleStencil">(bool)((wrapper.value >> SAMPLE_STENCIL_SHIFT) &amp; 1)</Item>
    <Item Name="type">(drv3d_dx12::ImageViewState::Type)((wrapper.value >> TYPE_SHIFT) &amp; ((1ull &lt;&lt; TYPE_BITS) - 1))</Item>
    <Item Name="isCubemap">(bool)((wrapper.value >> IS_CUBEMAP_SHIFT) &amp; 1)</Item>
    <Item Name="isArray">(bool)((wrapper.value >> IS_ARRAY_SHIFT) &amp; 1)</Item>
    <Item Name="format">(uint8_t)((wrapper.value >> FORMAT_SHIFT) &amp; ((1ull &lt;&lt; FORMAT_BITS) - 1)),nvo</Item>
    <Item Name="mipmapOffset">(int)((wrapper.value >> MIPMAP_OFFSET_SHIFT) &amp; ((1ull &lt;&lt; MIPMAP_OFFSET_BITS) - 1))</Item>
    <Item Name="mipmapRange">(int)((wrapper.value >> MIPMAP_RANGE_SHIFT) &amp; ((1ull &lt;&lt; MIPMAP_RANGE_BITS) - 1))</Item>
    <Item Name="arrayOffset">(int)((wrapper.value >> ARRAY_OFFSET_SHIFT) &amp; ((1ull &lt;&lt; ARRAY_OFFSET_BITS) - 1))</Item>
    <Item Name="arrayRange">(int)((wrapper.value >> ARRAY_RANGE_SHIFT) &amp; ((1ull &lt;&lt; ARRAY_RANGE_BITS) - 1))</Item>
  </Expand>
</Type>

<Type Name="drv3d_dx12::FormatStore">
  <DisplayString>{wrapper.value,nvoXb}</DisplayString>
  <Expand HideRawView="true">
    <Item Name="value">wrapper.value,nvoX</Item>
    <Item Name="isSrgb">(bool)((wrapper.value >> BITS) &amp; 1)</Item>
    <Item Name="linearFormat">(int)((wrapper.value >> 0) &amp; ((1 &lt;&lt; BITS) - 1)) &lt;&lt; CREATE_FLAGS_FORMAT_SHIFT,X</Item>
  </Expand>
</Type>

<Type Name="drv3d_dx12::SamplerState">
  <DisplayString>{wrapper.value,Xb}</DisplayString>
  <Expand HideRawView="true">
    <Item Name="value">wrapper.value,X</Item>
    <Item Name="mipMapMode">(uint8_t)((wrapper.value >> MIP_SHIFT) &amp; ((1ull &lt;&lt; MIP_BITS) - 1)),nvo</Item>
    <Item Name="filterMode">(uint8_t)((wrapper.value >> FILTER_SHIFT) &amp; ((1ull &lt;&lt; FILTER_BITS) - 1)),nvo</Item>
    <Item Name="borderColorMode">(uint8_t)((wrapper.value >> BORDER_SHIFT) &amp; ((1ull &lt;&lt; BORDER_BITS) - 1)),nvo</Item>
    <Item Name="anisotropicValue">(uint8_t)((wrapper.value >> ANISO_SHIFT) &amp; ((1ull &lt;&lt; ANISO_BITS) - 1)),nvo</Item>
    <Synthetic Name="coordMode">
      <Expand HideRawView="true">
        <CustomListItems>
          <Variable Name="_i" InitialValue="0" />
          <Loop Condition="_i &lt; COORD_COUNT">
            <Item Name="[{_i}]">(uint8_t)((wrapper.value >> (COORD_SHIFT + COORD_BITS * _i )) &amp; ((1ull &lt;&lt; COORD_BITS) - 1)),nvo</Item>
            <Exec>_i++</Exec>
          </Loop>
        </CustomListItems>
      </Expand>
    </Synthetic>
    <Item Name="biasBits">(uint)((wrapper.value >> BIAS_OFFSET) &amp; ((1ull &lt;&lt; BIAS_BITS) - 1)),b</Item>
    <Item Name="isCompare">(bool)((wrapper.value >> IS_COMPARE_SHIFT) &amp; 1)</Item>
  </Expand>
</Type>

<Type Name="drv3d_dx12::InititalResourceStateSet">
  <DisplayString>{dataSet.dataSet}</DisplayString>
  <Expand HideRawView="true">
    <ExpandedItem>dataSet.dataSet</ExpandedItem>
  </Expand>
</Type>

<Type Name="drv3d_dx12::BarrierBatcher">
  <AlternativeType Name="drv3d_dx12::ResourceStateSetBase&lt;*,*&gt;" />
  <AlternativeType Name="drv3d_dx12::SplitTransitionTracker" />

  <DisplayString>{dataSet}</DisplayString>
  <Expand HideRawView="true">
    <ExpandedItem>dataSet</ExpandedItem>
  </Expand>
</Type>

<Type Name="drv3d_dx12::ResourceStateBaseBitsProvider&lt;*,*&gt;">
  <Intrinsic Name="_value" Expression="value &amp; StateMask" />

  <DisplayString Condition="((_value() - 1) &amp; value)">{_value(),X}</DisplayString>
  <DisplayString Condition="!((_value() - 1) &amp; value)">{(D3D12_RESOURCE_STATES)_value()}</DisplayString>
  <Expand HideRawView="true">
    <ExpandedItem>&amp;value,X</ExpandedItem>
  </Expand>
</Type>

<Type Name="drv3d_dx12::ExtendedImageGlobalSubresouceId">
  <Intrinsic Name="_valid" Expression="invalid_id != value" />
  <DisplayString Condition="_valid()">{value &amp; index_mask}</DisplayString>
  <DisplayString Condition="!_valid()">invalid</DisplayString>
  <Expand HideRawView="true">
    <Item Name="value">value,X</Item>
    <Item Name="isStatic" Condition="_valid()">0 != (value &amp; static_texture_bit)</Item>
    <Item Name="reportTransition" Condition="_valid()">0 != (value &amp; report_transitions_bit)</Item>
  </Expand>
</Type>

<Type Name="drv3d_dx12::TaggedIndexType&lt;*,*&gt;">
  <AlternativeType Name="drv3d_dx12::ImageGlobalSubresouceId" />
  <AlternativeType Name="drv3d_dx12::TaggedCountType&lt;*&gt;" />
  <DisplayString>{value}</DisplayString>
  <Expand HideRawView="true">
    <ExpandedItem>&amp;value</ExpandedItem>
  </Expand>
</Type>

<Type Name="drv3d_dx12::TaggedIndexType&lt;unsigned char,*&gt;">
  <AlternativeType Name="drv3d_dx12::TaggedCountType&lt;drv3d_dx12::TaggedIndexType&lt;unsigned char,*&gt;&gt;" />
  <DisplayString>{value,nvo}</DisplayString>
  <Expand HideRawView="true">
    <ExpandedItem>&amp;value</ExpandedItem>
  </Expand>
</Type>

<Type Name="drv3d_dx12::ResourceUsageManagerWithHistory">
  <Expand HideRawView="true">
    <Item Name="incomingUAVResources">incomingUAVResources</Item>
    <Item Name="outgoingUAVResources">outgoingUAVResources</Item>
    <Item Name="userUavResources">userUavResources</Item>
    <Item Name="userSkippedUavSync">userSkippedUavSync</Item>
    <Item Name="textureStates">textureStates</Item>
    <Item Name="bufferStates">bufferStates</Item>
    <Item Name="reportDecay" Optional="true">reportDecay</Item>
    <Item Name="scratchBuffer">scratchBuffer</Item>
    <Item Name="scratchBufferState">scratchBufferState</Item>
    <Item Name="historicalData">historicalData</Item>
    <Item Name="recordData">recordData</Item>
  </Expand>
</Type>
  
<Type Name="drv3d_dx11::BaseTex" ExcludeView="nonrecursive">
  <DisplayString Condition="type == RES3D_TEX">{{{statName,sb}, ({width}x{height})}}</DisplayString>
  <DisplayString Condition="type != RES3D_TEX">{{{statName,sb}}}</DisplayString>
  <StringView>statName</StringView>
  <Expand HideRawView="true">
    <ExpandedItem>this,view(nonrecursive)</ExpandedItem>
  </Expand>
</Type>

<Type Name="drv3d_dx12::BaseTex" ExcludeView="nonrecursive">
  <DisplayString Condition="resType == RES3D_TEX">{{{statName,sb}, ({width}x{height})}}</DisplayString>
  <DisplayString Condition="resType != RES3D_TEX">{{{statName,sb}}}</DisplayString>
  <StringView>statName</StringView>
  <Expand HideRawView="true">
    <ExpandedItem>this,view(nonrecursive)</ExpandedItem>
  </Expand>
</Type>

<Type Name="drv3d_ps::BaseTex" ExcludeView="nonrecursive">
  <DisplayString>{{{statName}}}</DisplayString>
  <StringView>statName</StringView>
  <Expand HideRawView="true">
    <ExpandedItem>this,view(nonrecursive)</ExpandedItem>
  </Expand>
</Type>

<Type Name="drv3d_dx11::BaseTex" ExcludeView="nonrecursive" IncludeView="simple">
  <AlternativeType Name="drv3d_dx12::BaseTex" />
  <AlternativeType Name="drv3d_ps::BaseTex" />
  <DisplayString>{*this,view(nonrecursive)}</DisplayString>
  <Expand HideRawView="true">
    <ExpandedItem>this,view(nonrecursive)</ExpandedItem>
  </Expand>
</Type>

<Type Name="GenericSbufferImplementation&lt;drv3d_dx12::PlatformBufferInterfaceConfig&gt;" ExcludeView="nonrecursive" IncludeView="simple">
  <DisplayString>{*this,view(nonrecursive)}</DisplayString>
  <Expand HideRawView="true">
    <ExpandedItem>this,view(nonrecursive)</ExpandedItem>
  </Expand>
</Type>

<Type Name="resptr_detail::ManagedRes&lt;*&gt;">
  <AlternativeType Name="resptr_detail::SharedRes&lt;*&gt;" />
  <SmartPointer Usage="Minimal">mResource,na</SmartPointer>
  <DisplayString Condition="mResource == nullptr">empty</DisplayString>
  <DisplayString Condition="mResource != nullptr">{mResource->statName}</DisplayString>

  <Expand>
    <Item Name="[Texture]">*mResource,view(simple)</Item>
    <Item Name="[ResID]">mResId.handle</Item>
  </Expand>
</Type>

<Type Name="resptr_detail::ManagedRes&lt;ManagedRes&lt;Sbuffer&gt;&gt;">
  <SmartPointer Usage="Minimal">mResource,na</SmartPointer>
  <DisplayString Condition="mResource == nullptr">empty</DisplayString>
  <DisplayString Condition="mResource != nullptr">{mResource->statName}</DisplayString>

  <Expand>
    <Item Name="[Buffer]">*mResource,view(simple)</Item>
    <Item Name="[ResID]">mResId.handle</Item>
  </Expand>
</Type>

<Type Name="resptr_detail::UniqueRes&lt;*,*&gt;">
  <SmartPointer Usage="Minimal">mResource,na</SmartPointer>
  <DisplayString Condition="mResource == nullptr">empty</DisplayString>
  <DisplayString Condition="mResource != nullptr">{mResource->statName}</DisplayString>

  <Expand>
    <Item Name="[Texture]">*mResource,view(simple)</Item>
    <Item Name="[ResID]">mResId.handle</Item>
    <Item Name="[Aliases]" Condition="mAliases.mpBegin">mAliases</Item>
  </Expand>
</Type>

<Type Name="resptr_detail::UniqueRes&lt;resptr_detail::ManagedRes&lt;Sbuffer&gt;,*&gt;">
  <SmartPointer Usage="Minimal">mResource,na</SmartPointer>
  <DisplayString Condition="mResource == nullptr">empty</DisplayString>
  <DisplayString Condition="mResource != nullptr">{mResource->statName}</DisplayString>
  <Expand>
    <Item Name="[Buffer]">*mResource,view(simple)</Item>
    <Item Name="[ResID]">mResId.handle</Item>
  </Expand>
</Type>

<Type Name="ViewDependentResource&lt;*,*,*&gt;">
  <Expand HideRawView="true">
    <CustomListItems>
      <Variable Name="_i" InitialValue="0" />
      <Variable Name="_j" InitialValue="0" />
      <Loop Condition="_i &lt; $T2 &amp;&amp; _j &lt; $T3">
        <Item Name="[{_i}, {_j}] ->" Condition="_i == currentView">values[_i][_j]</Item>
        <Item Name="[{_i}, {_j}]" Condition="_i != currentView">values[_i][_j]</Item>
        <Exec>_i = _i + (++_j) / $T3</Exec>
        <Exec>_j = _j % $T3</Exec>
      </Loop>
    </CustomListItems>
  </Expand>
</Type>

<Type Name="ViewDependentResource&lt;*,*,1&gt;">
  <Expand HideRawView="true">
    <CustomListItems>
      <Variable Name="_i" InitialValue="0" />
      <Loop Condition="_i &lt; $T2">
        <Item Name="[{_i}] ->" Condition="_i == currentView">values[_i][0]</Item>
        <Item Name="[{_i}]" Condition="_i != currentView">values[_i][0]</Item>
        <Exec>_i++</Exec>
      </Loop>
    </CustomListItems>
  </Expand>
</Type>

</AutoVisualizer>
