#  to be included in jBuild.jam

rule SignPackageRule
{
}

rule CopyGameOsAndDlls
{
  ProcessBundleCopy
    @$(_GDK_DIR)/GRDK/ExtensionLibraries/Xbox.XCurl.API/Redist/CommonConfiguration/neutral/XCurl.dll xcurl.dll
    @$(_GDK_DIR)/GXDK/Sideload/gameos.xvd gameos.xvd
    @$(_VC_DIR)/redist/onecore/x64/Microsoft.VC142.CRT/msvcp140.dll msvcp140.dll
    @$(_VC_DIR)/redist/onecore/x64/Microsoft.VC142.CRT/vcruntime140.dll vcruntime140.dll
    @$(_VC_DIR)/redist/onecore/x64/Microsoft.VC142.CRT/vcruntime140_1.dll vcruntime140_1.dll
  ;

  ALWAYS $(_GDK_DIR)/GRDK/ExtensionLibraries/Xbox.XCurl.API/Redist/CommonConfiguration/neutral/XCurl.dll ;
  ALWAYS $(_GDK_DIR)/GXDK/Sideload/gameos.xvd ;
  ALWAYS $(_VC_DIR)/redist/onecore/x64/Microsoft.VC142.CRT/msvcp140.dll ;
  ALWAYS $(_VC_DIR)/redist/onecore/x64/Microsoft.VC142.CRT/vcruntime140.dll ;
  ALWAYS $(_VC_DIR)/redist/onecore/x64/Microsoft.VC142.CRT/vcruntime140_1.dll ;

  if $(Sanitize) = address {
    ProcessBundleCopy
      @$(_CLANG_DIR)/lib/clang/$(CLangVer)/lib/windows/clang_rt.asan_dynamic-x86_64.dll clang_rt.asan_dynamic-x86_64.dll
    ;
    ALWAYS $(_CLANG_DIR)/lib/clang/$(CLangVer)/lib/windows/clang_rt.asan_dynamic-x86_64.dll ;
  }
}

rule CopyMedia
{
  if $(XboxCopyMedia) != no
  {
    XboxTitleLogo ?= @$(Root)/prog/_jBuild/_xbox/stubLogo.png ;
    XboxTitleLogoSmall ?= $(XboxTitleLogo) ;
    XboxTitleLogoStore ?= $(XboxTitleLogo) ;
    XboxTitleSplash ?= $(XboxTitleLogo) ;

    ProcessBundleCopy
      $(XboxTitleLogo)       media/storeLogo.png
      $(XboxTitleLogoSmall)  media/smallLogo.png
      $(XboxTitleLogoStore)  media/systemLogo.png
      $(XboxTitleSplash)     media/splashScreen.png
    ;
  }
}

actions together quietly process_manifest
{
  echo Processing manifest
  copyfile $(2) $(1)
  call $(_DEVTOOL)/util/msysutil/sed.exe -i $(sedOpts) $(1)
  if errorlevel 1 goto failed
  goto end
:failed
  echo FAILED to process manifest [Error #%errorlevel%]
  set ERRORLEVEL=13
:end
}


rule ProcessManifest
{
  XboxTitleName ?= ?XboxTitleName ;
  XboxTitleVersion ?= 1.0.0.0 ;
  XboxTitlePublisher ?= "CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US" ;
  XboxTitleDisplayName ?= $(XboxTitleName) ;
  XboxTitlePublisherDisplayName ?= ?XboxTitlePublisherDisplayName ;
  XboxTitleDesc ?= $(XboxTitleName) ;
  XboxManifest ?= @$(Root)/prog/_jBuild/_xbox/MicrosoftGame.template.config ;
  XboxManifestOutput = $(OutDir)/MicrosoftGame.config ;

  local split = [ MATCH "(@*)(.*)" : $(XboxManifest) ] ;
  if $(split[1]) = @ { XboxManifest = $(split[2]) ; } else { XboxManifest = $(Root)/$(Location)/$(XboxManifest) ; }

  sedOpts on $(XboxManifestOutput) =
    "-e "\"s|%TITLE_NAME%|$(XboxTitleName:J=\ )|g\"
    "-e "\"s|%TITLE_EXE%|$(Target:D=)|g\"
    "-e "\"s|%TITLE_PUBLISHER%|$(XboxTitlePublisher:J=\ )|g\"
    "-e "\"s|%TITLE_VERSION%|$(XboxTitleVersion)|g\"
    "-e "\"s|%TITLE_DISPLAY_NAME%|$(XboxTitleDisplayName:J=\ )|g\"
    "-e "\"s|%TITLE_PUBLISHER_DISPLAY_NAME%|$(XboxTitlePublisherDisplayName:J=\ )|g\"
    "-e "\"s|%TITLE_DESC%|$(XboxTitleDesc:J=\ )|g\"
    "-e "\"s|%DEVICE_FAMILY%|$(_XBOX_DEVICE_FAMILY)|g\"
    "-e "\"s|%TARGET_MEMORY_TAG%|$(_XBOX_MANIFEST_MEMORY_TAG)|g\"
  ;

  Depends $(OutDir)/$(Target) : $(XboxManifestOutput) ;
  Depends $(XboxManifestOutput) : $(XboxManifest) ;

  process_manifest $(XboxManifestOutput) : $(XboxManifest) ;
}

rule ProcessLinkTarget
{
  local nodef_libs =
    advapi32.lib comctl32.lib comsupp.lib dbghelp.lib gdi32.lib gdiplus.lib
    guardcfw.lib kernel32.lib mmc.lib msimg32.lib msvcole.lib msvcoled.lib
    mswsock.lib ntstrsafe.lib ole2.lib ole2autd.lib ole2auto.lib ole2d.lib
    ole2ui.lib ole2uid.lib ole32.lib oleacc.lib oleaut32.lib oledlg.lib
    oledlgd.lib runtimeobject.lib shell32.lib shlwapi.lib strsafe.lib
    urlmon.lib user32.lib userenv.lib wlmole.lib wlmoled.lib onecore.lib
    # oldnames.lib - get rid of this one in further commits
  ;
  local _XBOX_LIBS = /nodefaultlib:$(nodef_libs)
    xgameplatform.lib
    xgameruntime.lib
    pixevt.lib
    xmem.lib
    xcurl.lib
    Crypt32.lib
    libHttpClient.142.GDK.C.lib
    Microsoft.Xbox.Services.142.GDK.C.lib
  ;

  if $(Sanitize) = address {
    _XBOX_LIBS +=
      clang_rt.asan_dynamic-x86_64.lib
      clang_rt.asan_dynamic_runtime_thunk-x86_64.lib
    ;
  }

  if $(TargetType) = exe
  {
    _LINK_OPT = /nologo
                /DYNAMICBASE /incremental:no /opt:ref /SUBSYSTEM:WINDOWS /TLBID:1 /MANIFEST:NO /NXCOMPAT ;
    if $(Config) = dev { _LINK_OPT += -opt:noicf ; }

    _IMG_COPY  = $(OutDir)/$(Target:B).exe x$(TitleLocation)/$(Target:B).exe ;

    $(Target)__LINK      = $(_LINK) ;
    $(Target)__LINK_OPT  = $(_LINK_OPT) $(LINKopt) ;
    $(Target)__IMGCOPY     = $(_IMG_COPY) ;

    LinkExeSetMap $(Target) : ;
    LinkExeSetBuildStamp $(Target) ;

    if $(XboxOnlyLink) != yes {
      CopyMedia ;
      CopyGameOsAndDlls ;
      ProcessManifest ;
    }

  }
  else if $(TargetType) = lib
  {
    $(Target)__LINK     = $(_LIB) ;
    $(Target)__LINK_OPT = $(LINKopt) ;
  }
  else if $(TargetType) = dll
  {
    Exit DLL is not handled yet for xboxOne ;
  }

  local _ADD_LIBS = " " $(1) ;

  if $(TargetType) = exe {
    _ADD_LIBS += $(_XBOX_LIBS) ;
  }
  $(Target)__LINK_LIBS = $(_ADD_LIBS) ;
}


actions together quietly link_target
{
#async
  $(prelink_cmd)
  echo linking $(1:B)$(1:S)
  del $(1)
  $(DEL_)$(pdb_path)
  set_filter nul /warning LNK4099/
  call_filtered $(link) $(link_opt) $(link_libs) $(resources) $(DEBUG_PDB_)$(pdb_path) -out:$(1) $(obj_list)
  echo ----------------------------------------------------------------------
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  echo SUCCESSFULLY built $(1:B)$(1:S)  $(_PrintedOutput)

  goto end

  :failed
  echo FAILED to build $(1:B)$(1:S) [Error #%errorlevel%] $(_PrintedOutput)
  set ERRORLEVEL=13

  :end
  echo .
}


actions together quietly lib_target
{
#async
  echo creating lib $(1:B)$(1:S)
  del $(1)
  call $(link) $(link_opt) -out:$(1) $(obj_list) $(link_libs)
  echo ----------------------------------------------------------------------
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  echo SUCCESSFULLY built $(1:B)$(1:S)  $(_PrintedOutput)
  goto end

  :failed
  echo FAILED to build $(1:B)$(1:S) [Error #%errorlevel%] $(_PrintedOutput)
  set ERRORLEVEL=13

  :end
  echo .
}
