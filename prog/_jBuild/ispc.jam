# setup for Intel(r) Implicit SPMD Program Compiler
switch $(Platform) {
  case win32   : _ISPC_COMPILER = $(_DEVTOOL)/ispc-v1.22.0-windows/bin/ispc.exe --arch=x86 ;
  case win64   : _ISPC_COMPILER = $(_DEVTOOL)/ispc-v1.22.0-windows/bin/ispc.exe ;
  case linux64 : _ISPC_COMPILER = $(_DEVTOOL)/ispc-v1.22.0-linux/bin/ispc ;
  case macosx  : _ISPC_COMPILER = $(_DEVTOOL)/ispc-v1.22.0-macOS.x86_64/bin/ispc ;
}
if ! $(_ISPC_COMPILER) { # ISPC compilation is not supported for other platforms
  rule CompileISPC { Exit ISPC not supported on Platform=$(Platform) for $(2) ; }
  rule GatherISPCObjs { return ; }
  return ;
}
if ! [ GLOB $(_ISPC_COMPILER:D) : * ] {
  rule CompileISPC { Exit FATAL\: \"$(_ISPC_COMPILER)\" not found!  Please, update DEVTOOLS (required for $(2)) ; }
  rule GatherISPCObjs { return ; }
  return ;
}

actions together quietly compile_ispc
{
#async
  echo $(2:D=) [building for targets: $(target:J=,)]
  call $(_ISPC_COMPILER) $(opt) --target=$(target:J=,) $(2:G=) -h $(2:G=:S=_ispc.h) -o $(1)
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  goto end
  :failed
  set ERRORLEVEL=13
  :end
}

# rule how to compile ISPC target
#   params: ( target_pathname : sources : target )
rule CompileISPC
{
  Depends $(1) : $(2) ;
  MakeDirectory $(1) : $(1:D) ;

  LOCATE on $(2) = $(Root) ;
  opt    on $(1) = $(opt)  ;
  target on $(1) = $(target)  ;

  if $(GLOBAL_CacheDryRun) { return ; }
  if ! [ GLOB $(Root)/$(2:D) : $(2:D=:S=_ispc.h) ] { ALWAYS $(1) ; }
  if $(dependents) { Includes $(dependents) : $(1) ; }
  compile_ispc $(1) : $(2) ;
  on $(2) null_action $(1:S=)_$(target)$(_OBJ_SUFFIX) ;
}

# rule to gather OBJs for .ispc (main one and for each compiled target)
rule GatherISPCObjs {
  on $(1) return $(1:S=$(_OBJ_SUFFIX)) $(1:S=)_$(target)$(_OBJ_SUFFIX) ;
}
