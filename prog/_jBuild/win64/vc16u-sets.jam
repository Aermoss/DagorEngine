#  Setup for Visual C/C++ 2019 compiler for Win64 (to be included from jBuild.jam)

_OBJ_SUFFIX  = .obj ;

_CLANG_DIR   = $(_DEVTOOL)/LLVM-$(CLangVer) ;
_VC_DIR      = $(_DEVTOOL)/vc2019 ;
if $(VCUpdateVer) { _VC_DIR = $(_VC_DIR)_$(VCUpdateVer) ; }
_VC_CRT_TYPE = -MT ;
C_preopt_DirectXVer = jun2010 ;
_WIN_SDK_TARGET_SUFFIX = x64 ;
include $(Root)/prog/_jBuild/_vc/win_sdk.jam ;

if ! [ GLOB $(_VC_DIR) : * ] { exit FATAL\: \"$(_VC_DIR)\" not found!  Please, update DEVTOOLS ; }
if ! [ GLOB $(_WIN_SDK) : * ] { exit FATAL\: \"$(_WIN_SDK)\" not found!  Please, update DEVTOOLS ; }
if ! [ GLOB $(_DEVTOOL)/win.sdk.100/Include/10.0.19041.0 : * ] { exit FATAL\: \"$(_DEVTOOL)/win.sdk.100/Include/10.0.19041.0\" not found!  Please, update DEVTOOLS ; }

if $(UseWholeOpt) = yes {
  UseLLDLink = no ;
}

if $(UseLLDLink) != yes {
  _LINK         = $(_VC_DIR)/bin/Hostx64/x64/link.exe /machine:x64 ;
  _LIB          = $(_VC_DIR)/bin/Hostx64/x64/lib.exe /machine:x64 ;
} else
{
  _LINK         = $(_CLANG_DIR)/bin/lld-link.exe /machine:x64  ;
  _LIB          = $(_CLANG_DIR)/bin/lld-link.exe /lib /machine:x64 ;
}
_C_COMPILER   = $(_VC_DIR)/bin/Hostx64/x64/cl.exe /DWIN64 /FS ;
_CPP_COMPILER = $(_C_COMPILER) /std:c++$(CPPStd) /DWIN64 /FS ;
_ASM_COMPILER = $(_DEVTOOL)/nasm/nasm.exe -f win64 ;
_MASM_COMPILER = $(_VC_DIR)/bin/Hostx64/x64/ml64.exe -c -nologo ;

_DEP_COMPILER = $(Root)/prog/_jBuild/fastdep-g.exe --cVC80 /DWIN64 ;

_RC_COMPILER    = $(_WIN_SDK_BIN)/rc.exe /x /i$(_WIN_SDK_INC) /i$(_VC_DIR)/Include ;
_MT_UTIL        = $(_WIN_SDK_BIN)/mt.exe ;
_CVTRES_EXE     = $(_VC_DIR)/bin/Hostx64/x64/cvtres.exe /MACHINE:x64 /NOLOGO ;
_UM_LIB         = $(_DEVTOOL)/win.sdk.100/Lib/10.0.19041.0/um/x64 ;
_UCRT_LIB       = $(_DEVTOOL)/win.sdk.100/Lib/10.0.19041.0/ucrt/x64 ;
_UCRT_INC       = $(_DEVTOOL)/win.sdk.100/Include/10.0.19041.0/ucrt ;

_INCLUDE      = $(_WIN_SDK_INC) $(_VC_DIR)/include $(_UCRT_INC) ;
_LIBPATH      = $(_UCRT_LIB) $(_WIN_SDK_LIB) $(_VC_DIR)/lib/x64 $(_UM_LIB) ;


# make linker cmd-line ###
for lib in $(_LIBPATH) {
  _LINK += -libpath:$(lib) ;
}

# make compiler cmd-line ###
_CPP_BASE_INCLUDES = -I$(MasterPreInclude) ;
_C_BASE_INCLUDES   = -I$(MasterPreInclude) ;

for inc in $(_INCLUDE) {
  _CPP_BASE_INCLUDES += -I$(inc) ;
  _C_BASE_INCLUDES   += -I$(inc) ;
  _DEP_COMPILER += --x$(inc) ;
}
