#  to be included in jBuild.jam

rule ProcessCompileTarget
{
  #  basic opts: warning/remark suppressing, additional includes etc.
  local _SUPPRESS_OPT = ;
  local _CONFIG_OPT = ;
  local pre_opt = ;
  local post_opt = ;

  if $(StrictCompile) = yes
  {
    #  suppressed warnigs list (marked with x are not suppressed now):
    #   C4265  'XXX' : class has virtual functions, but destructor is not virtual
    #   C4127  conditional expression is constant
    # x C4100  'XXX' : unreferenced formal parameter
    # x   981  operands are evaluated in unspecified order
    # x   383  value copied to temporary, reference to temporary used
    # x   310  old-style parameter list (anachronism)
    # x   174  expression has no effect
    # x   111  statement is unreachable
    # x   271  trailing comma is nonstandard
    #   C4514  'XXX' : unreferenced inline function has been removed
    #   C4061  enumerator 'XXX' in switch of enum 'YYY' is not explicitly handled by a case label
    #   C4062  enumerator 'XXX' in switch of enum 'YYY' is not handled
    #   C4820  'XXX' : 'N' bytes padding added after data member 'XXX::YYY'
    #   C4668  'XXX' is not defined as a preprocessor macro, replacing with '0' for '#if/#elif'
    #   C4619  pragma warning : there is no warning number 'NNN'
    #   C4365  'XXX' : conversion from 'TYPE1' to 'TYPE2', signed/unsigned mismatch
    #   C4302  'type cast' : truncation from 'TYPE1' to 'TYPE2'
    #   C4244  '=' : conversion from 'TYPE1' to 'TYPE2', possible loss of data
    #   C4242  'argument' : conversion from 'TYPE1' to 'TYPE2', possible loss of data
    #   C4245  'argument' : conversion from 'TYPE1' to 'TYPE2', signed/unsigned mismatch
    #   C4101  'XXX' : unreferenced local variable
    #   C4201  nonstandard extension used : nameless struct/union
    #   C4625  'XXX' : copy constructor could not be generated because a base class copy constructor is inaccessible
    #   C4626  'XXX' : assignment operator could not be generated because a base class assignment operator is inaccessible
    #   C4800  'int' : forcing value to bool 'true' or 'false' (performance warning)
    #   C4018  '<' : signed/unsigned mismatch
    #   C4710  'XXX' : function not inlined
    #   C4291  'void *operator new(size_t,IMemAlloc *)' : no matching operator delete found; memory will not be freed if initialization throws an exception
    #   C4389  '!=' : signed/unsigned mismatch
    #   C4200  nonstandard extension used : zero-sized array in struct/union
    #   C4255  'XXX' : no function prototype given: converting '()' to '(void)'
    #   C4711  function 'XXX' selected for automatic inline expansion
    #   C4355  'this' : used in base member initializer list
    #   C4640  'XXX' : construction of local static object is not thread-safe
    # x C4714  function 'XXX' marked as __forceinline not inlined
    #   C4305  'initializing' : truncation from 'double' to 'real'
    #   C4511  'XXX' : copy constructor could not be generated
    #   C4512  'XXX' : assignment operator could not be generated
    #   C4305  'XXX' : truncation from 'double' to 'float'
    #   C4738  storing 32-bit float result in memory, possible loss of performance
    #   C4996  'stricmp' was declared deprecated
    #   C4740  macro redefinition
    #   C4702  unreachable code
    _SUPPRESS_OPT = -Wall -WX /wd4514 /wd4061 /wd4820 /wd4668 /wd4619 
                    /wd4365 /wd4127 /wd4302 /wd4242 /wd4244 /wd4265 
                    /wd4101 /wd4201 /wd4625 /wd4626 /wd4800 /wd4018 
                    /wd4710 /wd4245 /wd4291 /wd4389 /wd4200 /wd4255
                    /wd4711 /wd4062 /wd4355 /wd4640 /wd4305
                    /wd4511 /wd4512 /wd4305 /wd4738 /wd4996 /wd4005 
                    /wd4740 /wd4702
                    #/wd444 /wd279 /wd981 /wd383 /wd310 /wd174 /wd111 /wd271 /wd4714 ;
    ;
  }
  else
  {
    _SUPPRESS_OPT = -W3 /wd4244 /wd4101 /wd4800 /wd4018 /wd4291 /wd4200 /wd4355 /wd4305
                    /wd4996 /wd4005 /wd4740 /wd4265 ;
  }

  local _DEF_CPP_OPT  = /c /nologo /Zc:wchar_t /Zp8 /J /DWIN32 ;

  if $(Exceptions) != yes {
    _DEF_CPP_OPT += -D_HAS_EXCEPTIONS=0 -DEA_COMPILER_NO_NOEXCEPT ;
  } else {
    if ($CatchSEH) != yes {
      _DEF_CPP_OPT += /EHsc -DDAGOR_EXCEPTIONS_ENABLED=1 ;
    } else {
      _DEF_CPP_OPT += /EHac -DDAGOR_EXCEPTIONS_ENABLED=1 ;
    }
  }

  if $(Rtti) != yes {
    _DEF_CPP_OPT += /GR- ;
  }

  if $(_GlobCopt_ForScope) {
    _DEF_CPP_OPT += $(_GlobCopt_ForScope) ;
  } else {
    _DEF_CPP_OPT += /Zc:forScope ;
  }

  local _DEF_ASM_OPT  = ;

  switch $(Config) {
    case dev :
      _CONFIG_OPT = /GF /Gy /arch:SSE /Zi /Oy- -DDAGOR_DBGLEVEL=1 ;
    case *rel :
      _CONFIG_OPT = /GF /Gy /arch:SSE /Zi /Oy- -DDAGOR_DBGLEVEL=0 ;
    case dbg :
      _CONFIG_OPT = /Zi /RTC1 -DDAGOR_DBGLEVEL=2 ;
    case * :
      _CONFIG_OPT = ;
  }

  if $(_GlobCopt_Optimize) {
    _CONFIG_OPT += $(_GlobCopt_Optimize) ;
  } else {
    if $(Config) != dbg {
      _CONFIG_OPT += /Ox /Oi /Ot ;
    } else {
      _CONFIG_OPT += /Od ;
    }
  }

  if $(_GlobCopt_CRT) {
    _CONFIG_OPT += $(_GlobCopt_CRT) ;
  } else {
    if $(Config) != dbg {
      _CONFIG_OPT += -MT ;
    } else {
      _CONFIG_OPT += -MTd ;
    }
  }

  for inc in $(AddIncludes)
  {
    _DEF_CPP_OPT += -I$(inc) ;
    _DEF_ASM_OPT += -I$(inc) ;
  }

  _CPP_OPT = $(_DEF_CPP_OPT) $(_CONFIG_OPT) $(_SUPPRESS_OPT) $(CPPopt) $(GlobalCPPopt) ;

  AddDirectXInclude pre_opt : post_opt ;


  $(Target)__CPP_OPT = $(post_opt) $(_CPP_OPT) -TP ;
  $(Target)__C_OPT   = $(post_opt) $(Copt) $(_CPP_OPT) ;
  $(Target)__ASM_OPT = $(_DEF_ASM_OPT) $(ASMopt) ;
  $(Target)__PRE_OPT = -I$(PreAddIncludes) $(pre_opt) ;
  include $(Root)/prog/_jBuild/_vc/add_fd_opt.jam ;
}


rule DepRule
{
  local changed_dep = ;

  # add $(Root) prefix when needed
  for dep in $(>)
  {
    switch $(dep) 
    {
      case ?:* : changed_dep += $(dep) ;   # absolute path with drive
      case \\* : changed_dep += $(dep) ;   # absolute path with root foolder (\)
      case /*  : changed_dep += $(dep) ;   # absolute path with root foolder (/)
      case *   : changed_dep += $(Root)/$(dep) ; # relative path, add $(Root) prefix
    }
  }
  Includes $(<) : $(changed_dep) ;
  null_action $(changed_dep) ;
}


rule CheckHeaders
{
  Depends $(<) : $(>) ;
  NoCare $(>) ; # tolerant to .d absence
  NOUPDATE $(>) ; # tolerant to .d timestamp

  # scan line for header, skipping any ../ at the beginning [will be prefixed with $(Root)]
  HDRSCAN   on $(>) = "^.*: [\.\\\/]*([^\
]*).*$" ;
  HDRRULE   on $(>) = DepRule ;
}


actions together quietly compile_cpp
{
#async
  $(VC_START_SHOW_INCLUDES_FILTER)
  set_filter $(1:S=.d) /$(VC_SHOW_INCLUDES_FILTER_PREFIX)(.+)/d1 $(1:G=:D=): $1
  call_filtered $(_CPP_COMPILER) $(pre_opt) $(_CPP_BASE_INCLUDES) /fp:fast $(cpp_opt) -showIncludes #\(-Fo$(1) $(2:G=))\#
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  goto end
  :failed
  set ERRORLEVEL=13
  :end
}

actions together quietly compile_c
{
#async
  $(VC_START_SHOW_INCLUDES_FILTER)
  set_filter $(1:S=.d) /$(VC_SHOW_INCLUDES_FILTER_PREFIX)(.+)/d1 $(1:G=:D=): $1
  call_filtered $(_CPP_COMPILER) $(pre_opt) $(_C_BASE_INCLUDES) /fp:fast $(c_opt) -showIncludes #\(-Fo$(1) $(2:G=))\#
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  goto end
  :failed
  set ERRORLEVEL=13
  :end
}

include $(Root)/prog/_jBuild/_vc/win_rc.jam ;
